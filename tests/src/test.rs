// This file was auto-generated by `gen-tests.py`, do not edit manually.

#![allow(non_snake_case)]

#[allow(unused_imports)]
use crate::run_test;

#[ignore] #[test] fn resvg_filters_feDisplacementMap_simple_case() {assert_eq!(run_test("svg/resvg/filters/feDisplacementMap/simple-case.svg", "ref/resvg/filters/feDisplacementMap/simple-case.png", "diff/resvg/filters/feDisplacementMap/simple-case.png", false), 0)}
#[test] fn resvg_filters_feOffset_negative_offset() {assert_eq!(run_test("svg/resvg/filters/feOffset/negative-offset.svg", "ref/resvg/filters/feOffset/negative-offset.png", "diff/resvg/filters/feOffset/negative-offset.png", false), 0)}
#[ignore] #[test] fn resvg_filters_feOffset_fractional_offset() {assert_eq!(run_test("svg/resvg/filters/feOffset/fractional-offset.svg", "ref/resvg/filters/feOffset/fractional-offset.png", "diff/resvg/filters/feOffset/fractional-offset.png", false), 0)}
#[ignore] #[test] fn resvg_filters_feOffset_complex_transform() {assert_eq!(run_test("svg/resvg/filters/feOffset/complex-transform.svg", "ref/resvg/filters/feOffset/complex-transform.png", "diff/resvg/filters/feOffset/complex-transform.png", false), 0)}
#[test] fn resvg_filters_feOffset_no_offset() {assert_eq!(run_test("svg/resvg/filters/feOffset/no-offset.svg", "ref/resvg/filters/feOffset/no-offset.png", "diff/resvg/filters/feOffset/no-offset.png", false), 0)}
#[test] fn resvg_filters_feOffset_with_primitiveUnits_objectBoundingBox() {assert_eq!(run_test("svg/resvg/filters/feOffset/with-primitiveUnits=objectBoundingBox.svg", "ref/resvg/filters/feOffset/with-primitiveUnits=objectBoundingBox.png", "diff/resvg/filters/feOffset/with-primitiveUnits=objectBoundingBox.png", false), 0)}
#[test] fn resvg_filters_feOffset_simple_case() {assert_eq!(run_test("svg/resvg/filters/feOffset/simple-case.svg", "ref/resvg/filters/feOffset/simple-case.png", "diff/resvg/filters/feOffset/simple-case.png", false), 0)}
#[test] fn resvg_filters_feOffset_only_dx() {assert_eq!(run_test("svg/resvg/filters/feOffset/only-dx.svg", "ref/resvg/filters/feOffset/only-dx.png", "diff/resvg/filters/feOffset/only-dx.png", false), 0)}
#[test] fn resvg_filters_feOffset_percentage_values() {assert_eq!(run_test("svg/resvg/filters/feOffset/percentage-values.svg", "ref/resvg/filters/feOffset/percentage-values.png", "diff/resvg/filters/feOffset/percentage-values.png", false), 0)}
#[test] fn resvg_filters_feOffset_only_dy() {assert_eq!(run_test("svg/resvg/filters/feOffset/only-dy.svg", "ref/resvg/filters/feOffset/only-dy.png", "diff/resvg/filters/feOffset/only-dy.png", false), 0)}
#[test] fn resvg_filters_feColorMatrix_invalid_type() {assert_eq!(run_test("svg/resvg/filters/feColorMatrix/invalid-type.svg", "ref/resvg/filters/feColorMatrix/invalid-type.png", "diff/resvg/filters/feColorMatrix/invalid-type.png", false), 0)}
#[test] fn resvg_filters_feColorMatrix_type_matrix() {assert_eq!(run_test("svg/resvg/filters/feColorMatrix/type=matrix.svg", "ref/resvg/filters/feColorMatrix/type=matrix.png", "diff/resvg/filters/feColorMatrix/type=matrix.png", false), 0)}
#[test] fn resvg_filters_feColorMatrix_type_hueRotate_without_an_angle() {assert_eq!(run_test("svg/resvg/filters/feColorMatrix/type=hueRotate-without-an-angle.svg", "ref/resvg/filters/feColorMatrix/type=hueRotate-without-an-angle.png", "diff/resvg/filters/feColorMatrix/type=hueRotate-without-an-angle.png", false), 0)}
#[test] fn resvg_filters_feColorMatrix_type_saturate_without_a_coefficient() {assert_eq!(run_test("svg/resvg/filters/feColorMatrix/type=saturate-without-a-coefficient.svg", "ref/resvg/filters/feColorMatrix/type=saturate-without-a-coefficient.png", "diff/resvg/filters/feColorMatrix/type=saturate-without-a-coefficient.png", false), 0)}
#[test] fn resvg_filters_feColorMatrix_type_hueRotate() {assert_eq!(run_test("svg/resvg/filters/feColorMatrix/type=hueRotate.svg", "ref/resvg/filters/feColorMatrix/type=hueRotate.png", "diff/resvg/filters/feColorMatrix/type=hueRotate.png", false), 0)}
#[test] fn resvg_filters_feColorMatrix_without_attributes() {assert_eq!(run_test("svg/resvg/filters/feColorMatrix/without-attributes.svg", "ref/resvg/filters/feColorMatrix/without-attributes.png", "diff/resvg/filters/feColorMatrix/without-attributes.png", false), 0)}
#[test] fn resvg_filters_feColorMatrix_type_matrix_without_values() {assert_eq!(run_test("svg/resvg/filters/feColorMatrix/type=matrix-without-values.svg", "ref/resvg/filters/feColorMatrix/type=matrix-without-values.png", "diff/resvg/filters/feColorMatrix/type=matrix-without-values.png", false), 0)}
#[ignore] #[test] fn resvg_filters_feColorMatrix_type_saturate_with_negative_coefficient() {assert_eq!(run_test("svg/resvg/filters/feColorMatrix/type=saturate-with-negative-coefficient.svg", "ref/resvg/filters/feColorMatrix/type=saturate-with-negative-coefficient.png", "diff/resvg/filters/feColorMatrix/type=saturate-with-negative-coefficient.png", false), 0)}
#[test] fn resvg_filters_feColorMatrix_type_luminanceToAlpha() {assert_eq!(run_test("svg/resvg/filters/feColorMatrix/type=luminanceToAlpha.svg", "ref/resvg/filters/feColorMatrix/type=luminanceToAlpha.png", "diff/resvg/filters/feColorMatrix/type=luminanceToAlpha.png", false), 0)}
#[test] fn resvg_filters_feColorMatrix_type_matrix_with_too_many_values() {assert_eq!(run_test("svg/resvg/filters/feColorMatrix/type=matrix-with-too-many-values.svg", "ref/resvg/filters/feColorMatrix/type=matrix-with-too-many-values.png", "diff/resvg/filters/feColorMatrix/type=matrix-with-too-many-values.png", false), 0)}
#[test] fn resvg_filters_feColorMatrix_type_matrix_with_non_normalized_values() {assert_eq!(run_test("svg/resvg/filters/feColorMatrix/type=matrix-with-non-normalized-values.svg", "ref/resvg/filters/feColorMatrix/type=matrix-with-non-normalized-values.png", "diff/resvg/filters/feColorMatrix/type=matrix-with-non-normalized-values.png", false), 0)}
#[test] fn resvg_filters_feColorMatrix_type_saturate() {assert_eq!(run_test("svg/resvg/filters/feColorMatrix/type=saturate.svg", "ref/resvg/filters/feColorMatrix/type=saturate.png", "diff/resvg/filters/feColorMatrix/type=saturate.png", false), 0)}
#[test] fn resvg_filters_feColorMatrix_without_a_type() {assert_eq!(run_test("svg/resvg/filters/feColorMatrix/without-a-type.svg", "ref/resvg/filters/feColorMatrix/without-a-type.png", "diff/resvg/filters/feColorMatrix/without-a-type.png", false), 0)}
#[test] fn resvg_filters_feColorMatrix_type_matrix_with_empty_values() {assert_eq!(run_test("svg/resvg/filters/feColorMatrix/type=matrix-with-empty-values.svg", "ref/resvg/filters/feColorMatrix/type=matrix-with-empty-values.png", "diff/resvg/filters/feColorMatrix/type=matrix-with-empty-values.png", false), 0)}
#[test] fn resvg_filters_feColorMatrix_type_matrix_with_not_enough_values() {assert_eq!(run_test("svg/resvg/filters/feColorMatrix/type=matrix-with-not-enough-values.svg", "ref/resvg/filters/feColorMatrix/type=matrix-with-not-enough-values.png", "diff/resvg/filters/feColorMatrix/type=matrix-with-not-enough-values.png", false), 0)}
#[ignore] #[test] fn resvg_filters_feColorMatrix_type_saturate_with_a_large_coefficient() {assert_eq!(run_test("svg/resvg/filters/feColorMatrix/type=saturate-with-a-large-coefficient.svg", "ref/resvg/filters/feColorMatrix/type=saturate-with-a-large-coefficient.png", "diff/resvg/filters/feColorMatrix/type=saturate-with-a-large-coefficient.png", false), 0)}
#[test] fn resvg_filters_feBlend_with_subregion_on_input_2() {assert_eq!(run_test("svg/resvg/filters/feBlend/with-subregion-on-input-2.svg", "ref/resvg/filters/feBlend/with-subregion-on-input-2.png", "diff/resvg/filters/feBlend/with-subregion-on-input-2.png", false), 0)}
#[test] fn resvg_filters_feBlend_mode_darken() {assert_eq!(run_test("svg/resvg/filters/feBlend/mode=darken.svg", "ref/resvg/filters/feBlend/mode=darken.png", "diff/resvg/filters/feBlend/mode=darken.png", false), 0)}
#[test] fn resvg_filters_feBlend_with_subregion_on_input_1() {assert_eq!(run_test("svg/resvg/filters/feBlend/with-subregion-on-input-1.svg", "ref/resvg/filters/feBlend/with-subregion-on-input-1.png", "diff/resvg/filters/feBlend/with-subregion-on-input-1.png", false), 0)}
#[test] fn resvg_filters_feBlend_mode_lighten() {assert_eq!(run_test("svg/resvg/filters/feBlend/mode=lighten.svg", "ref/resvg/filters/feBlend/mode=lighten.png", "diff/resvg/filters/feBlend/mode=lighten.png", false), 0)}
#[test] fn resvg_filters_feBlend_mode_screen() {assert_eq!(run_test("svg/resvg/filters/feBlend/mode=screen.svg", "ref/resvg/filters/feBlend/mode=screen.png", "diff/resvg/filters/feBlend/mode=screen.png", false), 0)}
#[test] fn resvg_filters_feBlend_mode_hue() {assert_eq!(run_test("svg/resvg/filters/feBlend/mode=hue.svg", "ref/resvg/filters/feBlend/mode=hue.png", "diff/resvg/filters/feBlend/mode=hue.png", false), 0)}
#[test] fn resvg_filters_feBlend_mode_color_burn() {assert_eq!(run_test("svg/resvg/filters/feBlend/mode=color-burn.svg", "ref/resvg/filters/feBlend/mode=color-burn.png", "diff/resvg/filters/feBlend/mode=color-burn.png", false), 0)}
#[test] fn resvg_filters_feBlend_mode_normal() {assert_eq!(run_test("svg/resvg/filters/feBlend/mode=normal.svg", "ref/resvg/filters/feBlend/mode=normal.png", "diff/resvg/filters/feBlend/mode=normal.png", false), 0)}
#[test] fn resvg_filters_feBlend_empty() {assert_eq!(run_test("svg/resvg/filters/feBlend/empty.svg", "ref/resvg/filters/feBlend/empty.png", "diff/resvg/filters/feBlend/empty.png", false), 0)}
#[test] fn resvg_filters_feBlend_mode_multiply() {assert_eq!(run_test("svg/resvg/filters/feBlend/mode=multiply.svg", "ref/resvg/filters/feBlend/mode=multiply.png", "diff/resvg/filters/feBlend/mode=multiply.png", false), 0)}
#[test] fn resvg_filters_feComponentTransfer_type_table_with_large_values() {assert_eq!(run_test("svg/resvg/filters/feComponentTransfer/type=table-with-large-values.svg", "ref/resvg/filters/feComponentTransfer/type=table-with-large-values.png", "diff/resvg/filters/feComponentTransfer/type=table-with-large-values.png", false), 0)}
#[test] fn resvg_filters_feComponentTransfer_type_table_on_blue_with_sRGB_interpolation() {assert_eq!(run_test("svg/resvg/filters/feComponentTransfer/type=table-on-blue-with-sRGB-interpolation.svg", "ref/resvg/filters/feComponentTransfer/type=table-on-blue-with-sRGB-interpolation.png", "diff/resvg/filters/feComponentTransfer/type=table-on-blue-with-sRGB-interpolation.png", false), 0)}
#[test] fn resvg_filters_feComponentTransfer_type_table_and_tableValues_100__100() {assert_eq!(run_test("svg/resvg/filters/feComponentTransfer/type=table-and-tableValues=100--100.svg", "ref/resvg/filters/feComponentTransfer/type=table-and-tableValues=100--100.png", "diff/resvg/filters/feComponentTransfer/type=table-and-tableValues=100--100.png", false), 0)}
#[test] fn resvg_filters_feComponentTransfer_invalid_type() {assert_eq!(run_test("svg/resvg/filters/feComponentTransfer/invalid-type.svg", "ref/resvg/filters/feComponentTransfer/invalid-type.png", "diff/resvg/filters/feComponentTransfer/invalid-type.png", false), 0)}
#[test] fn resvg_filters_feComponentTransfer_mixed_types() {assert_eq!(run_test("svg/resvg/filters/feComponentTransfer/mixed-types.svg", "ref/resvg/filters/feComponentTransfer/mixed-types.png", "diff/resvg/filters/feComponentTransfer/mixed-types.png", false), 0)}
#[test] fn resvg_filters_feComponentTransfer_type_linear_with_invalid_values() {assert_eq!(run_test("svg/resvg/filters/feComponentTransfer/type=linear-with-invalid-values.svg", "ref/resvg/filters/feComponentTransfer/type=linear-with-invalid-values.png", "diff/resvg/filters/feComponentTransfer/type=linear-with-invalid-values.png", false), 0)}
#[test] fn resvg_filters_feComponentTransfer_no_children() {assert_eq!(run_test("svg/resvg/filters/feComponentTransfer/no-children.svg", "ref/resvg/filters/feComponentTransfer/no-children.png", "diff/resvg/filters/feComponentTransfer/no-children.png", false), 0)}
#[test] fn resvg_filters_feComponentTransfer_type_table_and_tableValues_1px() {assert_eq!(run_test("svg/resvg/filters/feComponentTransfer/type=table-and-tableValues=1px.svg", "ref/resvg/filters/feComponentTransfer/type=table-and-tableValues=1px.png", "diff/resvg/filters/feComponentTransfer/type=table-and-tableValues=1px.png", false), 0)}
#[test] fn resvg_filters_feComponentTransfer_type_table_and_tableValues_1_0_1() {assert_eq!(run_test("svg/resvg/filters/feComponentTransfer/type=table-and-tableValues=1-0-1.svg", "ref/resvg/filters/feComponentTransfer/type=table-and-tableValues=1-0-1.png", "diff/resvg/filters/feComponentTransfer/type=table-and-tableValues=1-0-1.png", false), 0)}
#[test] fn resvg_filters_feComponentTransfer_type_linear_on_blue() {assert_eq!(run_test("svg/resvg/filters/feComponentTransfer/type=linear-on-blue.svg", "ref/resvg/filters/feComponentTransfer/type=linear-on-blue.png", "diff/resvg/filters/feComponentTransfer/type=linear-on-blue.png", false), 0)}
#[test] fn resvg_filters_feComponentTransfer_type_table_without_tableValues() {assert_eq!(run_test("svg/resvg/filters/feComponentTransfer/type=table-without-tableValues.svg", "ref/resvg/filters/feComponentTransfer/type=table-without-tableValues.png", "diff/resvg/filters/feComponentTransfer/type=table-without-tableValues.png", false), 0)}
#[test] fn resvg_filters_feComponentTransfer_type_table_with_an_empty_tableValues() {assert_eq!(run_test("svg/resvg/filters/feComponentTransfer/type=table-with-an-empty-tableValues.svg", "ref/resvg/filters/feComponentTransfer/type=table-with-an-empty-tableValues.png", "diff/resvg/filters/feComponentTransfer/type=table-with-an-empty-tableValues.png", false), 0)}
#[test] fn resvg_filters_feComponentTransfer_type_identity_on_all() {assert_eq!(run_test("svg/resvg/filters/feComponentTransfer/type=identity-on-all.svg", "ref/resvg/filters/feComponentTransfer/type=identity-on-all.png", "diff/resvg/filters/feComponentTransfer/type=identity-on-all.png", false), 0)}
#[test] fn resvg_filters_feComponentTransfer_type_discrete_on_blue() {assert_eq!(run_test("svg/resvg/filters/feComponentTransfer/type=discrete-on-blue.svg", "ref/resvg/filters/feComponentTransfer/type=discrete-on-blue.png", "diff/resvg/filters/feComponentTransfer/type=discrete-on-blue.png", false), 0)}
#[test] fn resvg_filters_feComponentTransfer_type_gamma_with_invalid_values() {assert_eq!(run_test("svg/resvg/filters/feComponentTransfer/type=gamma-with-invalid-values.svg", "ref/resvg/filters/feComponentTransfer/type=gamma-with-invalid-values.png", "diff/resvg/filters/feComponentTransfer/type=gamma-with-invalid-values.png", false), 0)}
#[test] fn resvg_filters_feComponentTransfer_type_table_on_blue_twice() {assert_eq!(run_test("svg/resvg/filters/feComponentTransfer/type=table-on-blue-twice.svg", "ref/resvg/filters/feComponentTransfer/type=table-on-blue-twice.png", "diff/resvg/filters/feComponentTransfer/type=table-on-blue-twice.png", false), 0)}
#[test] fn resvg_filters_feComponentTransfer_type_gamma_with_an_invalid_offset() {assert_eq!(run_test("svg/resvg/filters/feComponentTransfer/type=gamma-with-an-invalid-offset.svg", "ref/resvg/filters/feComponentTransfer/type=gamma-with-an-invalid-offset.png", "diff/resvg/filters/feComponentTransfer/type=gamma-with-an-invalid-offset.png", false), 0)}
#[test] fn resvg_filters_feComponentTransfer_type_gamma_on_blue() {assert_eq!(run_test("svg/resvg/filters/feComponentTransfer/type=gamma-on-blue.svg", "ref/resvg/filters/feComponentTransfer/type=gamma-on-blue.png", "diff/resvg/filters/feComponentTransfer/type=gamma-on-blue.png", false), 0)}
#[test] fn resvg_filters_feComponentTransfer_type_table_on_blue() {assert_eq!(run_test("svg/resvg/filters/feComponentTransfer/type=table-on-blue.svg", "ref/resvg/filters/feComponentTransfer/type=table-on-blue.png", "diff/resvg/filters/feComponentTransfer/type=table-on-blue.png", false), 0)}
#[test] fn resvg_filters_feComponentTransfer_type_table_on_alpha() {assert_eq!(run_test("svg/resvg/filters/feComponentTransfer/type=table-on-alpha.svg", "ref/resvg/filters/feComponentTransfer/type=table-on-alpha.png", "diff/resvg/filters/feComponentTransfer/type=table-on-alpha.png", false), 0)}
#[test] fn resvg_filters_feComponentTransfer_type_table_and_tableValues_1() {assert_eq!(run_test("svg/resvg/filters/feComponentTransfer/type=table-and-tableValues=1.svg", "ref/resvg/filters/feComponentTransfer/type=table-and-tableValues=1.png", "diff/resvg/filters/feComponentTransfer/type=table-and-tableValues=1.png", false), 0)}
#[test] fn resvg_filters_feComponentTransfer_type_linear_with_large_values() {assert_eq!(run_test("svg/resvg/filters/feComponentTransfer/type=linear-with-large-values.svg", "ref/resvg/filters/feComponentTransfer/type=linear-with-large-values.png", "diff/resvg/filters/feComponentTransfer/type=linear-with-large-values.png", false), 0)}
#[test] fn resvg_filters_feSpecularLighting_with_feSpotLight_and_specular_and_exponent() {assert_eq!(run_test("svg/resvg/filters/feSpecularLighting/with-feSpotLight-and-specular-and-exponent.svg", "ref/resvg/filters/feSpecularLighting/with-feSpotLight-and-specular-and-exponent.png", "diff/resvg/filters/feSpecularLighting/with-feSpotLight-and-specular-and-exponent.png", false), 0)}
#[test] fn resvg_filters_feSpecularLighting_with_feDistantLight() {assert_eq!(run_test("svg/resvg/filters/feSpecularLighting/with-feDistantLight.svg", "ref/resvg/filters/feSpecularLighting/with-feDistantLight.png", "diff/resvg/filters/feSpecularLighting/with-feDistantLight.png", false), 0)}
#[test] fn resvg_filters_feSpecularLighting_lighting_color_hsla() {assert_eq!(run_test("svg/resvg/filters/feSpecularLighting/lighting-color=hsla.svg", "ref/resvg/filters/feSpecularLighting/lighting-color=hsla.png", "diff/resvg/filters/feSpecularLighting/lighting-color=hsla.png", false), 0)}
#[test] fn resvg_filters_feSpecularLighting_specularExponent_256() {assert_eq!(run_test("svg/resvg/filters/feSpecularLighting/specularExponent=256.svg", "ref/resvg/filters/feSpecularLighting/specularExponent=256.png", "diff/resvg/filters/feSpecularLighting/specularExponent=256.png", false), 0)}
#[test] fn resvg_filters_feSpecularLighting_with_feSpotLight_and_specularConstant_5() {assert_eq!(run_test("svg/resvg/filters/feSpecularLighting/with-feSpotLight-and-specularConstant=5.svg", "ref/resvg/filters/feSpecularLighting/with-feSpotLight-and-specularConstant=5.png", "diff/resvg/filters/feSpecularLighting/with-feSpotLight-and-specularConstant=5.png", false), 0)}
#[test] fn resvg_filters_feSpecularLighting_with_fePointLight() {assert_eq!(run_test("svg/resvg/filters/feSpecularLighting/with-fePointLight.svg", "ref/resvg/filters/feSpecularLighting/with-fePointLight.png", "diff/resvg/filters/feSpecularLighting/with-fePointLight.png", false), 0)}
#[test] fn resvg_filters_feSpecularLighting_specularExponent_0() {assert_eq!(run_test("svg/resvg/filters/feSpecularLighting/specularExponent=0.svg", "ref/resvg/filters/feSpecularLighting/specularExponent=0.png", "diff/resvg/filters/feSpecularLighting/specularExponent=0.png", false), 0)}
#[test] fn resvg_filters_feSpecularLighting_with_feSpotLight() {assert_eq!(run_test("svg/resvg/filters/feSpecularLighting/with-feSpotLight.svg", "ref/resvg/filters/feSpecularLighting/with-feSpotLight.png", "diff/resvg/filters/feSpecularLighting/with-feSpotLight.png", false), 0)}
#[test] fn resvg_filters_flood_color_hsla_color() {assert_eq!(run_test("svg/resvg/filters/flood-color/hsla-color.svg", "ref/resvg/filters/flood-color/hsla-color.png", "diff/resvg/filters/flood-color/hsla-color.png", false), 0)}
#[test] fn resvg_filters_flood_color_simple_case() {assert_eq!(run_test("svg/resvg/filters/flood-color/simple-case.svg", "ref/resvg/filters/flood-color/simple-case.png", "diff/resvg/filters/flood-color/simple-case.png", false), 0)}
#[test] fn resvg_filters_flood_color_inheritance_1() {assert_eq!(run_test("svg/resvg/filters/flood-color/inheritance-1.svg", "ref/resvg/filters/flood-color/inheritance-1.png", "diff/resvg/filters/flood-color/inheritance-1.png", false), 0)}
#[test] fn resvg_filters_flood_color_inheritance_3() {assert_eq!(run_test("svg/resvg/filters/flood-color/inheritance-3.svg", "ref/resvg/filters/flood-color/inheritance-3.png", "diff/resvg/filters/flood-color/inheritance-3.png", false), 0)}
#[test] fn resvg_filters_flood_color_inheritance_2() {assert_eq!(run_test("svg/resvg/filters/flood-color/inheritance-2.svg", "ref/resvg/filters/flood-color/inheritance-2.png", "diff/resvg/filters/flood-color/inheritance-2.png", false), 0)}
#[test] fn resvg_filters_flood_color_inheritance_5() {assert_eq!(run_test("svg/resvg/filters/flood-color/inheritance-5.svg", "ref/resvg/filters/flood-color/inheritance-5.png", "diff/resvg/filters/flood-color/inheritance-5.png", false), 0)}
#[test] fn resvg_filters_flood_color_inheritance_4() {assert_eq!(run_test("svg/resvg/filters/flood-color/inheritance-4.svg", "ref/resvg/filters/flood-color/inheritance-4.png", "diff/resvg/filters/flood-color/inheritance-4.png", false), 0)}
#[test] fn resvg_filters_feComposite_with_subregion_on_input_2() {assert_eq!(run_test("svg/resvg/filters/feComposite/with-subregion-on-input-2.svg", "ref/resvg/filters/feComposite/with-subregion-on-input-2.png", "diff/resvg/filters/feComposite/with-subregion-on-input-2.png", false), 0)}
#[test] fn resvg_filters_feComposite_operator_xor() {assert_eq!(run_test("svg/resvg/filters/feComposite/operator=xor.svg", "ref/resvg/filters/feComposite/operator=xor.png", "diff/resvg/filters/feComposite/operator=xor.png", false), 0)}
#[test] fn resvg_filters_feComposite_operator_in() {assert_eq!(run_test("svg/resvg/filters/feComposite/operator=in.svg", "ref/resvg/filters/feComposite/operator=in.png", "diff/resvg/filters/feComposite/operator=in.png", false), 0)}
#[test] fn resvg_filters_feComposite_with_subregion_on_input_1() {assert_eq!(run_test("svg/resvg/filters/feComposite/with-subregion-on-input-1.svg", "ref/resvg/filters/feComposite/with-subregion-on-input-1.png", "diff/resvg/filters/feComposite/with-subregion-on-input-1.png", false), 0)}
#[test] fn resvg_filters_feComposite_operator_arithmetic() {assert_eq!(run_test("svg/resvg/filters/feComposite/operator=arithmetic.svg", "ref/resvg/filters/feComposite/operator=arithmetic.png", "diff/resvg/filters/feComposite/operator=arithmetic.png", false), 0)}
#[test] fn resvg_filters_feComposite_operator_over() {assert_eq!(run_test("svg/resvg/filters/feComposite/operator=over.svg", "ref/resvg/filters/feComposite/operator=over.png", "diff/resvg/filters/feComposite/operator=over.png", false), 0)}
#[test] fn resvg_filters_feComposite_operator_out() {assert_eq!(run_test("svg/resvg/filters/feComposite/operator=out.svg", "ref/resvg/filters/feComposite/operator=out.png", "diff/resvg/filters/feComposite/operator=out.png", false), 0)}
#[test] fn resvg_filters_feComposite_operator_arithmetic_with_opacity_on_sRGB() {assert_eq!(run_test("svg/resvg/filters/feComposite/operator=arithmetic-with-opacity-on-sRGB.svg", "ref/resvg/filters/feComposite/operator=arithmetic-with-opacity-on-sRGB.png", "diff/resvg/filters/feComposite/operator=arithmetic-with-opacity-on-sRGB.png", false), 0)}
#[test] fn resvg_filters_feComposite_empty() {assert_eq!(run_test("svg/resvg/filters/feComposite/empty.svg", "ref/resvg/filters/feComposite/empty.png", "diff/resvg/filters/feComposite/empty.png", false), 0)}
#[test] fn resvg_filters_feComposite_operator_atop() {assert_eq!(run_test("svg/resvg/filters/feComposite/operator=atop.svg", "ref/resvg/filters/feComposite/operator=atop.png", "diff/resvg/filters/feComposite/operator=atop.png", false), 0)}
#[test] fn resvg_filters_feComposite_invalid_operator() {assert_eq!(run_test("svg/resvg/filters/feComposite/invalid-operator.svg", "ref/resvg/filters/feComposite/invalid-operator.png", "diff/resvg/filters/feComposite/invalid-operator.png", false), 0)}
#[test] fn resvg_filters_feComposite_operator_arithmetic_with_large_k1_4() {assert_eq!(run_test("svg/resvg/filters/feComposite/operator=arithmetic-with-large-k1-4.svg", "ref/resvg/filters/feComposite/operator=arithmetic-with-large-k1-4.png", "diff/resvg/filters/feComposite/operator=arithmetic-with-large-k1-4.png", false), 0)}
#[test] fn resvg_filters_feComposite_operator_arithmetic_with_some_k1_4() {assert_eq!(run_test("svg/resvg/filters/feComposite/operator=arithmetic-with-some-k1-4.svg", "ref/resvg/filters/feComposite/operator=arithmetic-with-some-k1-4.png", "diff/resvg/filters/feComposite/operator=arithmetic-with-some-k1-4.png", false), 0)}
#[test] fn resvg_filters_feComposite_operator_arithmetic_without_k1_4() {assert_eq!(run_test("svg/resvg/filters/feComposite/operator=arithmetic-without-k1-4.svg", "ref/resvg/filters/feComposite/operator=arithmetic-without-k1-4.png", "diff/resvg/filters/feComposite/operator=arithmetic-without-k1-4.png", false), 0)}
#[test] fn resvg_filters_feComposite_operator_arithmetic_and_invalid_k1_4() {assert_eq!(run_test("svg/resvg/filters/feComposite/operator=arithmetic-and-invalid-k1-4.svg", "ref/resvg/filters/feComposite/operator=arithmetic-and-invalid-k1-4.png", "diff/resvg/filters/feComposite/operator=arithmetic-and-invalid-k1-4.png", false), 0)}
#[test] fn resvg_filters_feComposite_operator_arithmetic_on_sRGB() {assert_eq!(run_test("svg/resvg/filters/feComposite/operator=arithmetic-on-sRGB.svg", "ref/resvg/filters/feComposite/operator=arithmetic-on-sRGB.png", "diff/resvg/filters/feComposite/operator=arithmetic-on-sRGB.png", false), 0)}
#[test] fn resvg_filters_feComposite_default_operator() {assert_eq!(run_test("svg/resvg/filters/feComposite/default-operator.svg", "ref/resvg/filters/feComposite/default-operator.png", "diff/resvg/filters/feComposite/default-operator.png", false), 0)}
#[test] fn resvg_filters_feComposite_operator_arithmetic_with_opacity() {assert_eq!(run_test("svg/resvg/filters/feComposite/operator=arithmetic-with-opacity.svg", "ref/resvg/filters/feComposite/operator=arithmetic-with-opacity.png", "diff/resvg/filters/feComposite/operator=arithmetic-with-opacity.png", false), 0)}
#[test] fn resvg_filters_filter_functions_two_drop_shadow_function() {assert_eq!(run_test("svg/resvg/filters/filter-functions/two-drop-shadow-function.svg", "ref/resvg/filters/filter-functions/two-drop-shadow-function.png", "diff/resvg/filters/filter-functions/two-drop-shadow-function.png", false), 0)}
#[ignore] #[test] fn resvg_filters_filter_functions_two_exact_urls() {assert_eq!(run_test("svg/resvg/filters/filter-functions/two-exact-urls.svg", "ref/resvg/filters/filter-functions/two-exact-urls.png", "diff/resvg/filters/filter-functions/two-exact-urls.png", false), 0)}
#[test] fn resvg_filters_filter_functions_color_adjust_functions_0percent() {assert_eq!(run_test("svg/resvg/filters/filter-functions/color-adjust-functions-0percent.svg", "ref/resvg/filters/filter-functions/color-adjust-functions-0percent.png", "diff/resvg/filters/filter-functions/color-adjust-functions-0percent.png", false), 0)}
#[test] fn resvg_filters_filter_functions_hue_rotate_function_999deg() {assert_eq!(run_test("svg/resvg/filters/filter-functions/hue-rotate-function-999deg.svg", "ref/resvg/filters/filter-functions/hue-rotate-function-999deg.png", "diff/resvg/filters/filter-functions/hue-rotate-function-999deg.png", false), 0)}
#[test] fn resvg_filters_filter_functions_hue_rotate_function_default_value() {assert_eq!(run_test("svg/resvg/filters/filter-functions/hue-rotate-function-default-value.svg", "ref/resvg/filters/filter-functions/hue-rotate-function-default-value.png", "diff/resvg/filters/filter-functions/hue-rotate-function-default-value.png", false), 0)}
#[test] fn resvg_filters_filter_functions_color_adjust_functions_default_value() {assert_eq!(run_test("svg/resvg/filters/filter-functions/color-adjust-functions-default-value.svg", "ref/resvg/filters/filter-functions/color-adjust-functions-default-value.png", "diff/resvg/filters/filter-functions/color-adjust-functions-default-value.png", false), 0)}
#[test] fn resvg_filters_filter_functions_color_adjust_functions_2() {assert_eq!(run_test("svg/resvg/filters/filter-functions/color-adjust-functions-2.svg", "ref/resvg/filters/filter-functions/color-adjust-functions-2.png", "diff/resvg/filters/filter-functions/color-adjust-functions-2.png", false), 0)}
#[test] fn resvg_filters_filter_functions_color_adjust_functions_100percent() {assert_eq!(run_test("svg/resvg/filters/filter-functions/color-adjust-functions-100percent.svg", "ref/resvg/filters/filter-functions/color-adjust-functions-100percent.png", "diff/resvg/filters/filter-functions/color-adjust-functions-100percent.png", false), 0)}
#[test] fn resvg_filters_filter_functions_drop_shadow_function_color_last() {assert_eq!(run_test("svg/resvg/filters/filter-functions/drop-shadow-function-color-last.svg", "ref/resvg/filters/filter-functions/drop-shadow-function-color-last.png", "diff/resvg/filters/filter-functions/drop-shadow-function-color-last.png", false), 0)}
#[test] fn resvg_filters_filter_functions_blur_function_percent_value() {assert_eq!(run_test("svg/resvg/filters/filter-functions/blur-function-percent-value.svg", "ref/resvg/filters/filter-functions/blur-function-percent-value.png", "diff/resvg/filters/filter-functions/blur-function-percent-value.png", false), 0)}
#[test] fn resvg_filters_filter_functions_nested_filters() {assert_eq!(run_test("svg/resvg/filters/filter-functions/nested-filters.svg", "ref/resvg/filters/filter-functions/nested-filters.png", "diff/resvg/filters/filter-functions/nested-filters.png", false), 0)}
#[test] fn resvg_filters_filter_functions_color_adjust_functions_50percent() {assert_eq!(run_test("svg/resvg/filters/filter-functions/color-adjust-functions-50percent.svg", "ref/resvg/filters/filter-functions/color-adjust-functions-50percent.png", "diff/resvg/filters/filter-functions/color-adjust-functions-50percent.png", false), 0)}
#[test] fn resvg_filters_filter_functions_drop_shadow_function_only_X_offset() {assert_eq!(run_test("svg/resvg/filters/filter-functions/drop-shadow-function-only-X-offset.svg", "ref/resvg/filters/filter-functions/drop-shadow-function-only-X-offset.png", "diff/resvg/filters/filter-functions/drop-shadow-function-only-X-offset.png", false), 0)}
#[test] fn resvg_filters_filter_functions_blur_function() {assert_eq!(run_test("svg/resvg/filters/filter-functions/blur-function.svg", "ref/resvg/filters/filter-functions/blur-function.png", "diff/resvg/filters/filter-functions/blur-function.png", false), 0)}
#[test] fn resvg_filters_filter_functions_color_adjust_functions_negative() {assert_eq!(run_test("svg/resvg/filters/filter-functions/color-adjust-functions-negative.svg", "ref/resvg/filters/filter-functions/color-adjust-functions-negative.png", "diff/resvg/filters/filter-functions/color-adjust-functions-negative.png", false), 0)}
#[test] fn resvg_filters_filter_functions_drop_shadow_function_only_offset() {assert_eq!(run_test("svg/resvg/filters/filter-functions/drop-shadow-function-only-offset.svg", "ref/resvg/filters/filter-functions/drop-shadow-function-only-offset.png", "diff/resvg/filters/filter-functions/drop-shadow-function-only-offset.png", false), 0)}
#[test] fn resvg_filters_filter_functions_drop_shadow_function_percent_values() {assert_eq!(run_test("svg/resvg/filters/filter-functions/drop-shadow-function-percent-values.svg", "ref/resvg/filters/filter-functions/drop-shadow-function-percent-values.png", "diff/resvg/filters/filter-functions/drop-shadow-function-percent-values.png", false), 0)}
#[test] fn resvg_filters_filter_functions_drop_shadow_function_em_values() {assert_eq!(run_test("svg/resvg/filters/filter-functions/drop-shadow-function-em-values.svg", "ref/resvg/filters/filter-functions/drop-shadow-function-em-values.png", "diff/resvg/filters/filter-functions/drop-shadow-function-em-values.png", false), 0)}
#[test] fn resvg_filters_filter_functions_drop_shadow_function_extra_value() {assert_eq!(run_test("svg/resvg/filters/filter-functions/drop-shadow-function-extra-value.svg", "ref/resvg/filters/filter-functions/drop-shadow-function-extra-value.png", "diff/resvg/filters/filter-functions/drop-shadow-function-extra-value.png", false), 0)}
#[test] fn resvg_filters_filter_functions_hue_rotate_function_zero() {assert_eq!(run_test("svg/resvg/filters/filter-functions/hue-rotate-function-zero.svg", "ref/resvg/filters/filter-functions/hue-rotate-function-zero.png", "diff/resvg/filters/filter-functions/hue-rotate-function-zero.png", false), 0)}
#[test] fn resvg_filters_filter_functions_url_and_grayscale() {assert_eq!(run_test("svg/resvg/filters/filter-functions/url-and-grayscale.svg", "ref/resvg/filters/filter-functions/url-and-grayscale.png", "diff/resvg/filters/filter-functions/url-and-grayscale.png", false), 0)}
#[test] fn resvg_filters_filter_functions_blur_function_mm_value() {assert_eq!(run_test("svg/resvg/filters/filter-functions/blur-function-mm-value.svg", "ref/resvg/filters/filter-functions/blur-function-mm-value.png", "diff/resvg/filters/filter-functions/blur-function-mm-value.png", false), 0)}
#[test] fn resvg_filters_filter_functions_drop_shadow_function_filter_region() {assert_eq!(run_test("svg/resvg/filters/filter-functions/drop-shadow-function-filter-region.svg", "ref/resvg/filters/filter-functions/drop-shadow-function-filter-region.png", "diff/resvg/filters/filter-functions/drop-shadow-function-filter-region.png", false), 0)}
#[test] fn resvg_filters_filter_functions_blur_function_no_values() {assert_eq!(run_test("svg/resvg/filters/filter-functions/blur-function-no-values.svg", "ref/resvg/filters/filter-functions/blur-function-no-values.png", "diff/resvg/filters/filter-functions/blur-function-no-values.png", false), 0)}
#[test] fn resvg_filters_filter_functions_one_invalid_function_in_list() {assert_eq!(run_test("svg/resvg/filters/filter-functions/one-invalid-function-in-list.svg", "ref/resvg/filters/filter-functions/one-invalid-function-in-list.png", "diff/resvg/filters/filter-functions/one-invalid-function-in-list.png", false), 0)}
#[test] fn resvg_filters_filter_functions_drop_shadow_function() {assert_eq!(run_test("svg/resvg/filters/filter-functions/drop-shadow-function.svg", "ref/resvg/filters/filter-functions/drop-shadow-function.png", "diff/resvg/filters/filter-functions/drop-shadow-function.png", false), 0)}
#[test] fn resvg_filters_filter_functions_blur_function_two_values() {assert_eq!(run_test("svg/resvg/filters/filter-functions/blur-function-two-values.svg", "ref/resvg/filters/filter-functions/blur-function-two-values.png", "diff/resvg/filters/filter-functions/blur-function-two-values.png", false), 0)}
#[test] fn resvg_filters_filter_functions_one_invalid_url_in_list() {assert_eq!(run_test("svg/resvg/filters/filter-functions/one-invalid-url-in-list.svg", "ref/resvg/filters/filter-functions/one-invalid-url-in-list.png", "diff/resvg/filters/filter-functions/one-invalid-url-in-list.png", false), 0)}
#[test] fn resvg_filters_filter_functions_hue_rotate_function_45rad() {assert_eq!(run_test("svg/resvg/filters/filter-functions/hue-rotate-function-45rad.svg", "ref/resvg/filters/filter-functions/hue-rotate-function-45rad.png", "diff/resvg/filters/filter-functions/hue-rotate-function-45rad.png", false), 0)}
#[test] fn resvg_filters_filter_functions_drop_shadow_function_currentColor() {assert_eq!(run_test("svg/resvg/filters/filter-functions/drop-shadow-function-currentColor.svg", "ref/resvg/filters/filter-functions/drop-shadow-function-currentColor.png", "diff/resvg/filters/filter-functions/drop-shadow-function-currentColor.png", false), 0)}
#[test] fn resvg_filters_filter_functions_hue_rotate_function_45grad() {assert_eq!(run_test("svg/resvg/filters/filter-functions/hue-rotate-function-45grad.svg", "ref/resvg/filters/filter-functions/hue-rotate-function-45grad.png", "diff/resvg/filters/filter-functions/hue-rotate-function-45grad.png", false), 0)}
#[test] fn resvg_filters_filter_functions_drop_shadow_function_no_color() {assert_eq!(run_test("svg/resvg/filters/filter-functions/drop-shadow-function-no-color.svg", "ref/resvg/filters/filter-functions/drop-shadow-function-no-color.png", "diff/resvg/filters/filter-functions/drop-shadow-function-no-color.png", false), 0)}
#[test] fn resvg_filters_filter_functions_hue_rotate_function_45deg() {assert_eq!(run_test("svg/resvg/filters/filter-functions/hue-rotate-function-45deg.svg", "ref/resvg/filters/filter-functions/hue-rotate-function-45deg.png", "diff/resvg/filters/filter-functions/hue-rotate-function-45deg.png", false), 0)}
#[test] fn resvg_filters_filter_functions_drop_shadow_function_comma_spearated() {assert_eq!(run_test("svg/resvg/filters/filter-functions/drop-shadow-function-comma-spearated.svg", "ref/resvg/filters/filter-functions/drop-shadow-function-comma-spearated.png", "diff/resvg/filters/filter-functions/drop-shadow-function-comma-spearated.png", false), 0)}
#[test] fn resvg_filters_filter_functions_drop_shadow_function_no_values() {assert_eq!(run_test("svg/resvg/filters/filter-functions/drop-shadow-function-no-values.svg", "ref/resvg/filters/filter-functions/drop-shadow-function-no-values.png", "diff/resvg/filters/filter-functions/drop-shadow-function-no-values.png", false), 0)}
#[test] fn resvg_filters_filter_functions_drop_shadow_function_color_as_attribute() {assert_eq!(run_test("svg/resvg/filters/filter-functions/drop-shadow-function-color-as-attribute.svg", "ref/resvg/filters/filter-functions/drop-shadow-function-color-as-attribute.png", "diff/resvg/filters/filter-functions/drop-shadow-function-color-as-attribute.png", false), 0)}
#[test] fn resvg_filters_filter_functions_grayscale_and_opacity() {assert_eq!(run_test("svg/resvg/filters/filter-functions/grayscale-and-opacity.svg", "ref/resvg/filters/filter-functions/grayscale-and-opacity.png", "diff/resvg/filters/filter-functions/grayscale-and-opacity.png", false), 0)}
#[test] fn resvg_filters_filter_functions_two_urls() {assert_eq!(run_test("svg/resvg/filters/filter-functions/two-urls.svg", "ref/resvg/filters/filter-functions/two-urls.png", "diff/resvg/filters/filter-functions/two-urls.png", false), 0)}
#[test] fn resvg_filters_filter_functions_hue_rotate_function_45() {assert_eq!(run_test("svg/resvg/filters/filter-functions/hue-rotate-function-45.svg", "ref/resvg/filters/filter-functions/hue-rotate-function-45.png", "diff/resvg/filters/filter-functions/hue-rotate-function-45.png", false), 0)}
#[test] fn resvg_filters_filter_functions_color_adjust_functions_200percent() {assert_eq!(run_test("svg/resvg/filters/filter-functions/color-adjust-functions-200percent.svg", "ref/resvg/filters/filter-functions/color-adjust-functions-200percent.png", "diff/resvg/filters/filter-functions/color-adjust-functions-200percent.png", false), 0)}
#[test] fn resvg_filters_filter_functions_hue_rotate_function_0_25turn() {assert_eq!(run_test("svg/resvg/filters/filter-functions/hue-rotate-function-0.25turn.svg", "ref/resvg/filters/filter-functions/hue-rotate-function-0.25turn.png", "diff/resvg/filters/filter-functions/hue-rotate-function-0.25turn.png", false), 0)}
#[test] fn resvg_filters_filter_functions_drop_shadow_function_mm_values() {assert_eq!(run_test("svg/resvg/filters/filter-functions/drop-shadow-function-mm-values.svg", "ref/resvg/filters/filter-functions/drop-shadow-function-mm-values.png", "diff/resvg/filters/filter-functions/drop-shadow-function-mm-values.png", false), 0)}
#[test] fn resvg_filters_filter_functions_blur_function_negative_value() {assert_eq!(run_test("svg/resvg/filters/filter-functions/blur-function-negative-value.svg", "ref/resvg/filters/filter-functions/blur-function-negative-value.png", "diff/resvg/filters/filter-functions/blur-function-negative-value.png", false), 0)}
#[test] fn resvg_filters_feTile_empty_region() {assert_eq!(run_test("svg/resvg/filters/feTile/empty-region.svg", "ref/resvg/filters/feTile/empty-region.png", "diff/resvg/filters/feTile/empty-region.png", false), 0)}
#[test] fn resvg_filters_feTile_simple_case() {assert_eq!(run_test("svg/resvg/filters/feTile/simple-case.svg", "ref/resvg/filters/feTile/simple-case.png", "diff/resvg/filters/feTile/simple-case.png", false), 0)}
#[test] fn resvg_filters_feTile_with_region() {assert_eq!(run_test("svg/resvg/filters/feTile/with-region.svg", "ref/resvg/filters/feTile/with-region.png", "diff/resvg/filters/feTile/with-region.png", false), 0)}
#[test] fn resvg_filters_feTile_with_subregion_1() {assert_eq!(run_test("svg/resvg/filters/feTile/with-subregion-1.svg", "ref/resvg/filters/feTile/with-subregion-1.png", "diff/resvg/filters/feTile/with-subregion-1.png", false), 0)}
#[test] fn resvg_filters_feTile_with_subregion_3() {assert_eq!(run_test("svg/resvg/filters/feTile/with-subregion-3.svg", "ref/resvg/filters/feTile/with-subregion-3.png", "diff/resvg/filters/feTile/with-subregion-3.png", false), 0)}
#[test] fn resvg_filters_feTile_with_subregion_2() {assert_eq!(run_test("svg/resvg/filters/feTile/with-subregion-2.svg", "ref/resvg/filters/feTile/with-subregion-2.png", "diff/resvg/filters/feTile/with-subregion-2.png", false), 0)}
#[test] fn resvg_filters_feGaussianBlur_stdDeviation_with_multiple_values() {assert_eq!(run_test("svg/resvg/filters/feGaussianBlur/stdDeviation-with-multiple-values.svg", "ref/resvg/filters/feGaussianBlur/stdDeviation-with-multiple-values.png", "diff/resvg/filters/feGaussianBlur/stdDeviation-with-multiple-values.png", false), 0)}
#[test] fn resvg_filters_feGaussianBlur_stdDeviation_with_two_values() {assert_eq!(run_test("svg/resvg/filters/feGaussianBlur/stdDeviation-with-two-values.svg", "ref/resvg/filters/feGaussianBlur/stdDeviation-with-two-values.png", "diff/resvg/filters/feGaussianBlur/stdDeviation-with-two-values.png", false), 0)}
#[test] fn resvg_filters_feGaussianBlur_small_stdDeviation() {assert_eq!(run_test("svg/resvg/filters/feGaussianBlur/small-stdDeviation.svg", "ref/resvg/filters/feGaussianBlur/small-stdDeviation.png", "diff/resvg/filters/feGaussianBlur/small-stdDeviation.png", false), 0)}
#[test] fn resvg_filters_feGaussianBlur_stdDeviation_5_0() {assert_eq!(run_test("svg/resvg/filters/feGaussianBlur/stdDeviation=5-0.svg", "ref/resvg/filters/feGaussianBlur/stdDeviation=5-0.png", "diff/resvg/filters/feGaussianBlur/stdDeviation=5-0.png", false), 0)}
#[ignore] #[test] fn resvg_filters_feGaussianBlur_complex_transform() {assert_eq!(run_test("svg/resvg/filters/feGaussianBlur/complex-transform.svg", "ref/resvg/filters/feGaussianBlur/complex-transform.png", "diff/resvg/filters/feGaussianBlur/complex-transform.png", false), 0)}
#[test] fn resvg_filters_feGaussianBlur_stdDeviation_0_5() {assert_eq!(run_test("svg/resvg/filters/feGaussianBlur/stdDeviation=0-5.svg", "ref/resvg/filters/feGaussianBlur/stdDeviation=0-5.png", "diff/resvg/filters/feGaussianBlur/stdDeviation=0-5.png", false), 0)}
#[test] fn resvg_filters_feGaussianBlur_negative_stdDeviation() {assert_eq!(run_test("svg/resvg/filters/feGaussianBlur/negative-stdDeviation.svg", "ref/resvg/filters/feGaussianBlur/negative-stdDeviation.png", "diff/resvg/filters/feGaussianBlur/negative-stdDeviation.png", false), 0)}
#[test] fn resvg_filters_feGaussianBlur_simple_case() {assert_eq!(run_test("svg/resvg/filters/feGaussianBlur/simple-case.svg", "ref/resvg/filters/feGaussianBlur/simple-case.png", "diff/resvg/filters/feGaussianBlur/simple-case.png", false), 0)}
#[test] fn resvg_filters_feGaussianBlur_no_stdDeviation() {assert_eq!(run_test("svg/resvg/filters/feGaussianBlur/no-stdDeviation.svg", "ref/resvg/filters/feGaussianBlur/no-stdDeviation.png", "diff/resvg/filters/feGaussianBlur/no-stdDeviation.png", false), 0)}
#[test] fn resvg_filters_feGaussianBlur_stdDeviation_with_two_different_values() {assert_eq!(run_test("svg/resvg/filters/feGaussianBlur/stdDeviation-with-two-different-values.svg", "ref/resvg/filters/feGaussianBlur/stdDeviation-with-two-different-values.png", "diff/resvg/filters/feGaussianBlur/stdDeviation-with-two-different-values.png", false), 0)}
#[test] fn resvg_filters_feGaussianBlur_empty_stdDeviation() {assert_eq!(run_test("svg/resvg/filters/feGaussianBlur/empty-stdDeviation.svg", "ref/resvg/filters/feGaussianBlur/empty-stdDeviation.png", "diff/resvg/filters/feGaussianBlur/empty-stdDeviation.png", false), 0)}
#[test] fn resvg_filters_feGaussianBlur_huge_stdDeviation() {assert_eq!(run_test("svg/resvg/filters/feGaussianBlur/huge-stdDeviation.svg", "ref/resvg/filters/feGaussianBlur/huge-stdDeviation.png", "diff/resvg/filters/feGaussianBlur/huge-stdDeviation.png", false), 0)}
#[test] fn resvg_filters_feGaussianBlur_tiny_stdDeviation() {assert_eq!(run_test("svg/resvg/filters/feGaussianBlur/tiny-stdDeviation.svg", "ref/resvg/filters/feGaussianBlur/tiny-stdDeviation.png", "diff/resvg/filters/feGaussianBlur/tiny-stdDeviation.png", false), 0)}
#[test] fn resvg_filters_feTurbulence_baseFrequency__0_05() {assert_eq!(run_test("svg/resvg/filters/feTurbulence/baseFrequency=-0.05.svg", "ref/resvg/filters/feTurbulence/baseFrequency=-0.05.png", "diff/resvg/filters/feTurbulence/baseFrequency=-0.05.png", false), 0)}
#[test] fn resvg_filters_feTurbulence_type_fractalNoise() {assert_eq!(run_test("svg/resvg/filters/feTurbulence/type=fractalNoise.svg", "ref/resvg/filters/feTurbulence/type=fractalNoise.png", "diff/resvg/filters/feTurbulence/type=fractalNoise.png", false), 0)}
#[ignore] #[test] fn resvg_filters_feTurbulence_complex_transform() {assert_eq!(run_test("svg/resvg/filters/feTurbulence/complex-transform.svg", "ref/resvg/filters/feTurbulence/complex-transform.png", "diff/resvg/filters/feTurbulence/complex-transform.png", false), 0)}
#[test] fn resvg_filters_feTurbulence_numOctaves__1() {assert_eq!(run_test("svg/resvg/filters/feTurbulence/numOctaves=-1.svg", "ref/resvg/filters/feTurbulence/numOctaves=-1.png", "diff/resvg/filters/feTurbulence/numOctaves=-1.png", false), 0)}
#[test] fn resvg_filters_feTurbulence_seed_1_5() {assert_eq!(run_test("svg/resvg/filters/feTurbulence/seed=1.5.svg", "ref/resvg/filters/feTurbulence/seed=1.5.png", "diff/resvg/filters/feTurbulence/seed=1.5.png", false), 0)}
#[test] fn resvg_filters_feTurbulence_no_attributes() {assert_eq!(run_test("svg/resvg/filters/feTurbulence/no-attributes.svg", "ref/resvg/filters/feTurbulence/no-attributes.png", "diff/resvg/filters/feTurbulence/no-attributes.png", false), 0)}
#[test] fn resvg_filters_feTurbulence_primitiveUnits_objectBoundingBox() {assert_eq!(run_test("svg/resvg/filters/feTurbulence/primitiveUnits=objectBoundingBox.svg", "ref/resvg/filters/feTurbulence/primitiveUnits=objectBoundingBox.png", "diff/resvg/filters/feTurbulence/primitiveUnits=objectBoundingBox.png", false), 0)}
#[test] fn resvg_filters_feTurbulence_color_interpolation_filters_sRGB() {assert_eq!(run_test("svg/resvg/filters/feTurbulence/color-interpolation-filters=sRGB.svg", "ref/resvg/filters/feTurbulence/color-interpolation-filters=sRGB.png", "diff/resvg/filters/feTurbulence/color-interpolation-filters=sRGB.png", false), 0)}
#[test] fn resvg_filters_feTurbulence_numOctaves_5() {assert_eq!(run_test("svg/resvg/filters/feTurbulence/numOctaves=5.svg", "ref/resvg/filters/feTurbulence/numOctaves=5.png", "diff/resvg/filters/feTurbulence/numOctaves=5.png", false), 0)}
#[test] fn resvg_filters_feTurbulence_numOctaves_0() {assert_eq!(run_test("svg/resvg/filters/feTurbulence/numOctaves=0.svg", "ref/resvg/filters/feTurbulence/numOctaves=0.png", "diff/resvg/filters/feTurbulence/numOctaves=0.png", false), 0)}
#[test] fn resvg_filters_feTurbulence_seed__20() {assert_eq!(run_test("svg/resvg/filters/feTurbulence/seed=-20.svg", "ref/resvg/filters/feTurbulence/seed=-20.png", "diff/resvg/filters/feTurbulence/seed=-20.png", false), 0)}
#[ignore] #[test] fn resvg_filters_feTurbulence_stitchTiles_stitch() {assert_eq!(run_test("svg/resvg/filters/feTurbulence/stitchTiles=stitch.svg", "ref/resvg/filters/feTurbulence/stitchTiles=stitch.png", "diff/resvg/filters/feTurbulence/stitchTiles=stitch.png", false), 0)}
#[test] fn resvg_filters_feTurbulence_baseFrequency_0_05_0() {assert_eq!(run_test("svg/resvg/filters/feTurbulence/baseFrequency=0.05-0.svg", "ref/resvg/filters/feTurbulence/baseFrequency=0.05-0.png", "diff/resvg/filters/feTurbulence/baseFrequency=0.05-0.png", false), 0)}
#[test] fn resvg_filters_feTurbulence_seed_20() {assert_eq!(run_test("svg/resvg/filters/feTurbulence/seed=20.svg", "ref/resvg/filters/feTurbulence/seed=20.png", "diff/resvg/filters/feTurbulence/seed=20.png", false), 0)}
#[test] fn resvg_filters_feTurbulence_baseFrequency_0_05_0_05() {assert_eq!(run_test("svg/resvg/filters/feTurbulence/baseFrequency=0.05-0.05.svg", "ref/resvg/filters/feTurbulence/baseFrequency=0.05-0.05.png", "diff/resvg/filters/feTurbulence/baseFrequency=0.05-0.05.png", false), 0)}
#[test] fn resvg_filters_feTurbulence_type_invalid() {assert_eq!(run_test("svg/resvg/filters/feTurbulence/type=invalid.svg", "ref/resvg/filters/feTurbulence/type=invalid.png", "diff/resvg/filters/feTurbulence/type=invalid.png", false), 0)}
#[test] fn resvg_filters_feTurbulence_baseFrequency_0_01() {assert_eq!(run_test("svg/resvg/filters/feTurbulence/baseFrequency=0.01.svg", "ref/resvg/filters/feTurbulence/baseFrequency=0.01.png", "diff/resvg/filters/feTurbulence/baseFrequency=0.01.png", false), 0)}
#[test] fn resvg_filters_feTurbulence_baseFrequency_0_05_0_01() {assert_eq!(run_test("svg/resvg/filters/feTurbulence/baseFrequency=0.05-0.01.svg", "ref/resvg/filters/feTurbulence/baseFrequency=0.05-0.01.png", "diff/resvg/filters/feTurbulence/baseFrequency=0.05-0.01.png", false), 0)}
#[test] fn resvg_filters_feTurbulence_baseFrequency_0_05__0_01() {assert_eq!(run_test("svg/resvg/filters/feTurbulence/baseFrequency=0.05--0.01.svg", "ref/resvg/filters/feTurbulence/baseFrequency=0.05--0.01.png", "diff/resvg/filters/feTurbulence/baseFrequency=0.05--0.01.png", false), 0)}
#[ignore] #[test] fn resvg_filters_enable_background_with_filter() {assert_eq!(run_test("svg/resvg/filters/enable-background/with-filter.svg", "ref/resvg/filters/enable-background/with-filter.png", "diff/resvg/filters/enable-background/with-filter.png", false), 0)}
#[ignore] #[test] fn resvg_filters_enable_background_with_filter_on_the_same_element() {assert_eq!(run_test("svg/resvg/filters/enable-background/with-filter-on-the-same-element.svg", "ref/resvg/filters/enable-background/with-filter-on-the-same-element.png", "diff/resvg/filters/enable-background/with-filter-on-the-same-element.png", false), 0)}
#[ignore] #[test] fn resvg_filters_enable_background_with_opacity_1() {assert_eq!(run_test("svg/resvg/filters/enable-background/with-opacity-1.svg", "ref/resvg/filters/enable-background/with-opacity-1.png", "diff/resvg/filters/enable-background/with-opacity-1.png", false), 0)}
#[ignore] #[test] fn resvg_filters_enable_background_accumulate() {assert_eq!(run_test("svg/resvg/filters/enable-background/accumulate.svg", "ref/resvg/filters/enable-background/accumulate.png", "diff/resvg/filters/enable-background/accumulate.png", false), 0)}
#[ignore] #[test] fn resvg_filters_enable_background_with_opacity_2() {assert_eq!(run_test("svg/resvg/filters/enable-background/with-opacity-2.svg", "ref/resvg/filters/enable-background/with-opacity-2.png", "diff/resvg/filters/enable-background/with-opacity-2.png", false), 0)}
#[ignore] #[test] fn resvg_filters_enable_background_with_opacity_3() {assert_eq!(run_test("svg/resvg/filters/enable-background/with-opacity-3.svg", "ref/resvg/filters/enable-background/with-opacity-3.png", "diff/resvg/filters/enable-background/with-opacity-3.png", false), 0)}
#[ignore] #[test] fn resvg_filters_enable_background_stop_on_the_first_new_1() {assert_eq!(run_test("svg/resvg/filters/enable-background/stop-on-the-first-new-1.svg", "ref/resvg/filters/enable-background/stop-on-the-first-new-1.png", "diff/resvg/filters/enable-background/stop-on-the-first-new-1.png", false), 0)}
#[ignore] #[test] fn resvg_filters_enable_background_stop_on_the_first_new_2() {assert_eq!(run_test("svg/resvg/filters/enable-background/stop-on-the-first-new-2.svg", "ref/resvg/filters/enable-background/stop-on-the-first-new-2.png", "diff/resvg/filters/enable-background/stop-on-the-first-new-2.png", false), 0)}
#[ignore] #[test] fn resvg_filters_enable_background_with_opacity_4() {assert_eq!(run_test("svg/resvg/filters/enable-background/with-opacity-4.svg", "ref/resvg/filters/enable-background/with-opacity-4.png", "diff/resvg/filters/enable-background/with-opacity-4.png", false), 0)}
#[ignore] #[test] fn resvg_filters_enable_background_accumulate_with_new() {assert_eq!(run_test("svg/resvg/filters/enable-background/accumulate-with-new.svg", "ref/resvg/filters/enable-background/accumulate-with-new.png", "diff/resvg/filters/enable-background/accumulate-with-new.png", false), 0)}
#[ignore] #[test] fn resvg_filters_enable_background_new_with_invalid_region_1() {assert_eq!(run_test("svg/resvg/filters/enable-background/new-with-invalid-region-1.svg", "ref/resvg/filters/enable-background/new-with-invalid-region-1.png", "diff/resvg/filters/enable-background/new-with-invalid-region-1.png", false), 0)}
#[ignore] #[test] fn resvg_filters_enable_background_new_with_invalid_region_2() {assert_eq!(run_test("svg/resvg/filters/enable-background/new-with-invalid-region-2.svg", "ref/resvg/filters/enable-background/new-with-invalid-region-2.png", "diff/resvg/filters/enable-background/new-with-invalid-region-2.png", false), 0)}
#[ignore] #[test] fn resvg_filters_enable_background_new_with_invalid_region_3() {assert_eq!(run_test("svg/resvg/filters/enable-background/new-with-invalid-region-3.svg", "ref/resvg/filters/enable-background/new-with-invalid-region-3.png", "diff/resvg/filters/enable-background/new-with-invalid-region-3.png", false), 0)}
#[ignore] #[test] fn resvg_filters_enable_background_with_mask() {assert_eq!(run_test("svg/resvg/filters/enable-background/with-mask.svg", "ref/resvg/filters/enable-background/with-mask.png", "diff/resvg/filters/enable-background/with-mask.png", false), 0)}
#[ignore] #[test] fn resvg_filters_enable_background_inherit() {assert_eq!(run_test("svg/resvg/filters/enable-background/inherit.svg", "ref/resvg/filters/enable-background/inherit.png", "diff/resvg/filters/enable-background/inherit.png", false), 0)}
#[ignore] #[test] fn resvg_filters_enable_background_with_clip_path() {assert_eq!(run_test("svg/resvg/filters/enable-background/with-clip-path.svg", "ref/resvg/filters/enable-background/with-clip-path.png", "diff/resvg/filters/enable-background/with-clip-path.png", false), 0)}
#[ignore] #[test] fn resvg_filters_enable_background_new() {assert_eq!(run_test("svg/resvg/filters/enable-background/new.svg", "ref/resvg/filters/enable-background/new.png", "diff/resvg/filters/enable-background/new.png", false), 0)}
#[ignore] #[test] fn resvg_filters_enable_background_filter_on_shape() {assert_eq!(run_test("svg/resvg/filters/enable-background/filter-on-shape.svg", "ref/resvg/filters/enable-background/filter-on-shape.png", "diff/resvg/filters/enable-background/filter-on-shape.png", false), 0)}
#[ignore] #[test] fn resvg_filters_enable_background_shapes_after_filter() {assert_eq!(run_test("svg/resvg/filters/enable-background/shapes-after-filter.svg", "ref/resvg/filters/enable-background/shapes-after-filter.png", "diff/resvg/filters/enable-background/shapes-after-filter.png", false), 0)}
#[ignore] #[test] fn resvg_filters_enable_background_with_transform() {assert_eq!(run_test("svg/resvg/filters/enable-background/with-transform.svg", "ref/resvg/filters/enable-background/with-transform.png", "diff/resvg/filters/enable-background/with-transform.png", false), 0)}
#[ignore] #[test] fn resvg_filters_enable_background_new_with_region() {assert_eq!(run_test("svg/resvg/filters/enable-background/new-with-region.svg", "ref/resvg/filters/enable-background/new-with-region.png", "diff/resvg/filters/enable-background/new-with-region.png", false), 0)}
#[test] fn resvg_filters_feMorphology_radius_10_1() {assert_eq!(run_test("svg/resvg/filters/feMorphology/radius=10-1.svg", "ref/resvg/filters/feMorphology/radius=10-1.png", "diff/resvg/filters/feMorphology/radius=10-1.png", false), 0)}
#[test] fn resvg_filters_feMorphology_source_with_opacity() {assert_eq!(run_test("svg/resvg/filters/feMorphology/source-with-opacity.svg", "ref/resvg/filters/feMorphology/source-with-opacity.png", "diff/resvg/filters/feMorphology/source-with-opacity.png", false), 0)}
#[test] fn resvg_filters_feMorphology_radius_10_0() {assert_eq!(run_test("svg/resvg/filters/feMorphology/radius=10-0.svg", "ref/resvg/filters/feMorphology/radius=10-0.png", "diff/resvg/filters/feMorphology/radius=10-0.png", false), 0)}
#[test] fn resvg_filters_feMorphology_empty_radius() {assert_eq!(run_test("svg/resvg/filters/feMorphology/empty-radius.svg", "ref/resvg/filters/feMorphology/empty-radius.png", "diff/resvg/filters/feMorphology/empty-radius.png", false), 0)}
#[test] fn resvg_filters_feMorphology_radius_0_5_with_objectBoundingBox() {assert_eq!(run_test("svg/resvg/filters/feMorphology/radius=0.5-with-objectBoundingBox.svg", "ref/resvg/filters/feMorphology/radius=0.5-with-objectBoundingBox.png", "diff/resvg/filters/feMorphology/radius=0.5-with-objectBoundingBox.png", false), 0)}
#[ignore] #[test] fn resvg_filters_feMorphology_huge_radius() {assert_eq!(run_test("svg/resvg/filters/feMorphology/huge-radius.svg", "ref/resvg/filters/feMorphology/huge-radius.png", "diff/resvg/filters/feMorphology/huge-radius.png", false), 0)}
#[test] fn resvg_filters_feMorphology_operator_dilate() {assert_eq!(run_test("svg/resvg/filters/feMorphology/operator=dilate.svg", "ref/resvg/filters/feMorphology/operator=dilate.png", "diff/resvg/filters/feMorphology/operator=dilate.png", false), 0)}
#[test] fn resvg_filters_feMorphology_simple_case() {assert_eq!(run_test("svg/resvg/filters/feMorphology/simple-case.svg", "ref/resvg/filters/feMorphology/simple-case.png", "diff/resvg/filters/feMorphology/simple-case.png", false), 0)}
#[test] fn resvg_filters_feMorphology_radius_1_10() {assert_eq!(run_test("svg/resvg/filters/feMorphology/radius=1-10.svg", "ref/resvg/filters/feMorphology/radius=1-10.png", "diff/resvg/filters/feMorphology/radius=1-10.png", false), 0)}
#[test] fn resvg_filters_feMorphology_no_radius() {assert_eq!(run_test("svg/resvg/filters/feMorphology/no-radius.svg", "ref/resvg/filters/feMorphology/no-radius.png", "diff/resvg/filters/feMorphology/no-radius.png", false), 0)}
#[test] fn resvg_filters_feMorphology_radius_0_5() {assert_eq!(run_test("svg/resvg/filters/feMorphology/radius=0.5.svg", "ref/resvg/filters/feMorphology/radius=0.5.png", "diff/resvg/filters/feMorphology/radius=0.5.png", false), 0)}
#[test] fn resvg_filters_feMorphology_radius_with_too_many_values() {assert_eq!(run_test("svg/resvg/filters/feMorphology/radius-with-too-many-values.svg", "ref/resvg/filters/feMorphology/radius-with-too-many-values.png", "diff/resvg/filters/feMorphology/radius-with-too-many-values.png", false), 0)}
#[test] fn resvg_filters_feMorphology_negative_radius() {assert_eq!(run_test("svg/resvg/filters/feMorphology/negative-radius.svg", "ref/resvg/filters/feMorphology/negative-radius.png", "diff/resvg/filters/feMorphology/negative-radius.png", false), 0)}
#[test] fn resvg_filters_feMorphology_zero_radius() {assert_eq!(run_test("svg/resvg/filters/feMorphology/zero-radius.svg", "ref/resvg/filters/feMorphology/zero-radius.png", "diff/resvg/filters/feMorphology/zero-radius.png", false), 0)}
#[ignore] #[test] fn resvg_filters_feMerge_complex_transform() {assert_eq!(run_test("svg/resvg/filters/feMerge/complex-transform.svg", "ref/resvg/filters/feMerge/complex-transform.png", "diff/resvg/filters/feMerge/complex-transform.png", false), 0)}
#[test] fn resvg_filters_feMerge_color_interpolation_filters_linearRGB() {assert_eq!(run_test("svg/resvg/filters/feMerge/color-interpolation-filters=linearRGB.svg", "ref/resvg/filters/feMerge/color-interpolation-filters=linearRGB.png", "diff/resvg/filters/feMerge/color-interpolation-filters=linearRGB.png", false), 0)}
#[test] fn resvg_filters_feMerge_color_interpolation_filters_sRGB() {assert_eq!(run_test("svg/resvg/filters/feMerge/color-interpolation-filters=sRGB.svg", "ref/resvg/filters/feMerge/color-interpolation-filters=sRGB.png", "diff/resvg/filters/feMerge/color-interpolation-filters=sRGB.png", false), 0)}
#[test] fn resvg_filters_feDropShadow_hsla_color() {assert_eq!(run_test("svg/resvg/filters/feDropShadow/hsla-color.svg", "ref/resvg/filters/feDropShadow/hsla-color.png", "diff/resvg/filters/feDropShadow/hsla-color.png", false), 0)}
#[test] fn resvg_filters_feDropShadow_with_offset_clipped() {assert_eq!(run_test("svg/resvg/filters/feDropShadow/with-offset-clipped.svg", "ref/resvg/filters/feDropShadow/with-offset-clipped.png", "diff/resvg/filters/feDropShadow/with-offset-clipped.png", false), 0)}
#[test] fn resvg_filters_feDropShadow_with_flood_opacity() {assert_eq!(run_test("svg/resvg/filters/feDropShadow/with-flood-opacity.svg", "ref/resvg/filters/feDropShadow/with-flood-opacity.png", "diff/resvg/filters/feDropShadow/with-flood-opacity.png", false), 0)}
#[test] fn resvg_filters_feDropShadow_with_offset() {assert_eq!(run_test("svg/resvg/filters/feDropShadow/with-offset.svg", "ref/resvg/filters/feDropShadow/with-offset.png", "diff/resvg/filters/feDropShadow/with-offset.png", false), 0)}
#[test] fn resvg_filters_feDropShadow_stdDeviation_0() {assert_eq!(run_test("svg/resvg/filters/feDropShadow/stdDeviation=0.svg", "ref/resvg/filters/feDropShadow/stdDeviation=0.png", "diff/resvg/filters/feDropShadow/stdDeviation=0.png", false), 0)}
#[test] fn resvg_filters_feDropShadow_only_stdDeviation() {assert_eq!(run_test("svg/resvg/filters/feDropShadow/only-stdDeviation.svg", "ref/resvg/filters/feDropShadow/only-stdDeviation.png", "diff/resvg/filters/feDropShadow/only-stdDeviation.png", false), 0)}
#[test] fn resvg_filters_feDropShadow_with_flood_color() {assert_eq!(run_test("svg/resvg/filters/feDropShadow/with-flood-color.svg", "ref/resvg/filters/feDropShadow/with-flood-color.png", "diff/resvg/filters/feDropShadow/with-flood-color.png", false), 0)}
#[test] fn resvg_filters_feDropShadow_with_percent_offset() {assert_eq!(run_test("svg/resvg/filters/feDropShadow/with-percent-offset.svg", "ref/resvg/filters/feDropShadow/with-percent-offset.png", "diff/resvg/filters/feDropShadow/with-percent-offset.png", false), 0)}
#[test] fn resvg_filters_feConvolveMatrix_order_4() {assert_eq!(run_test("svg/resvg/filters/feConvolveMatrix/order=4.svg", "ref/resvg/filters/feConvolveMatrix/order=4.png", "diff/resvg/filters/feConvolveMatrix/order=4.png", false), 0)}
#[test] fn resvg_filters_feConvolveMatrix_order_with_a_negative_value_1() {assert_eq!(run_test("svg/resvg/filters/feConvolveMatrix/order-with-a-negative-value-1.svg", "ref/resvg/filters/feConvolveMatrix/order-with-a-negative-value-1.png", "diff/resvg/filters/feConvolveMatrix/order-with-a-negative-value-1.png", false), 0)}
#[test] fn resvg_filters_feConvolveMatrix_edgeMode_none() {assert_eq!(run_test("svg/resvg/filters/feConvolveMatrix/edgeMode=none.svg", "ref/resvg/filters/feConvolveMatrix/edgeMode=none.png", "diff/resvg/filters/feConvolveMatrix/edgeMode=none.png", false), 0)}
#[test] fn resvg_filters_feConvolveMatrix_kernelMatrix_with_not_enough_values() {assert_eq!(run_test("svg/resvg/filters/feConvolveMatrix/kernelMatrix-with-not-enough-values.svg", "ref/resvg/filters/feConvolveMatrix/kernelMatrix-with-not-enough-values.png", "diff/resvg/filters/feConvolveMatrix/kernelMatrix-with-not-enough-values.png", false), 0)}
#[test] fn resvg_filters_feConvolveMatrix_order_with_a_negative_value_2() {assert_eq!(run_test("svg/resvg/filters/feConvolveMatrix/order-with-a-negative-value-2.svg", "ref/resvg/filters/feConvolveMatrix/order-with-a-negative-value-2.png", "diff/resvg/filters/feConvolveMatrix/order-with-a-negative-value-2.png", false), 0)}
#[test] fn resvg_filters_feConvolveMatrix_order_0() {assert_eq!(run_test("svg/resvg/filters/feConvolveMatrix/order=0.svg", "ref/resvg/filters/feConvolveMatrix/order=0.png", "diff/resvg/filters/feConvolveMatrix/order=0.png", false), 0)}
#[test] fn resvg_filters_feConvolveMatrix_edgeMode_wrap() {assert_eq!(run_test("svg/resvg/filters/feConvolveMatrix/edgeMode=wrap.svg", "ref/resvg/filters/feConvolveMatrix/edgeMode=wrap.png", "diff/resvg/filters/feConvolveMatrix/edgeMode=wrap.png", false), 0)}
#[ignore] #[test] fn resvg_filters_feConvolveMatrix_edgeMode_wrap_with_matrix_larger_than_target() {assert_eq!(run_test("svg/resvg/filters/feConvolveMatrix/edgeMode=wrap-with-matrix-larger-than-target.svg", "ref/resvg/filters/feConvolveMatrix/edgeMode=wrap-with-matrix-larger-than-target.png", "diff/resvg/filters/feConvolveMatrix/edgeMode=wrap-with-matrix-larger-than-target.png", false), 0)}
#[test] fn resvg_filters_feConvolveMatrix_divisor_0() {assert_eq!(run_test("svg/resvg/filters/feConvolveMatrix/divisor=0.svg", "ref/resvg/filters/feConvolveMatrix/divisor=0.png", "diff/resvg/filters/feConvolveMatrix/divisor=0.png", false), 0)}
#[test] fn resvg_filters_feConvolveMatrix_targetX_2() {assert_eq!(run_test("svg/resvg/filters/feConvolveMatrix/targetX=2.svg", "ref/resvg/filters/feConvolveMatrix/targetX=2.png", "diff/resvg/filters/feConvolveMatrix/targetX=2.png", false), 0)}
#[test] fn resvg_filters_feConvolveMatrix_kernelMatrix_with_zero_sum_and_no_divisor() {assert_eq!(run_test("svg/resvg/filters/feConvolveMatrix/kernelMatrix-with-zero-sum-and-no-divisor.svg", "ref/resvg/filters/feConvolveMatrix/kernelMatrix-with-zero-sum-and-no-divisor.png", "diff/resvg/filters/feConvolveMatrix/kernelMatrix-with-zero-sum-and-no-divisor.png", false), 0)}
#[test] fn resvg_filters_feConvolveMatrix_targetX_3() {assert_eq!(run_test("svg/resvg/filters/feConvolveMatrix/targetX=3.svg", "ref/resvg/filters/feConvolveMatrix/targetX=3.png", "diff/resvg/filters/feConvolveMatrix/targetX=3.png", false), 0)}
#[test] fn resvg_filters_feConvolveMatrix_empty_kernelMatrix() {assert_eq!(run_test("svg/resvg/filters/feConvolveMatrix/empty-kernelMatrix.svg", "ref/resvg/filters/feConvolveMatrix/empty-kernelMatrix.png", "diff/resvg/filters/feConvolveMatrix/empty-kernelMatrix.png", false), 0)}
#[test] fn resvg_filters_feConvolveMatrix_unset_order() {assert_eq!(run_test("svg/resvg/filters/feConvolveMatrix/unset-order.svg", "ref/resvg/filters/feConvolveMatrix/unset-order.png", "diff/resvg/filters/feConvolveMatrix/unset-order.png", false), 0)}
#[test] fn resvg_filters_feConvolveMatrix_targetX_0() {assert_eq!(run_test("svg/resvg/filters/feConvolveMatrix/targetX=0.svg", "ref/resvg/filters/feConvolveMatrix/targetX=0.png", "diff/resvg/filters/feConvolveMatrix/targetX=0.png", false), 0)}
#[ignore] #[test] fn resvg_filters_feConvolveMatrix_bias_0_5() {assert_eq!(run_test("svg/resvg/filters/feConvolveMatrix/bias=0.5.svg", "ref/resvg/filters/feConvolveMatrix/bias=0.5.png", "diff/resvg/filters/feConvolveMatrix/bias=0.5.png", false), 0)}
#[test] fn resvg_filters_feConvolveMatrix_targetX__1() {assert_eq!(run_test("svg/resvg/filters/feConvolveMatrix/targetX=-1.svg", "ref/resvg/filters/feConvolveMatrix/targetX=-1.png", "diff/resvg/filters/feConvolveMatrix/targetX=-1.png", false), 0)}
#[test] fn resvg_filters_feConvolveMatrix_order_4_4() {assert_eq!(run_test("svg/resvg/filters/feConvolveMatrix/order=4-4.svg", "ref/resvg/filters/feConvolveMatrix/order=4-4.png", "diff/resvg/filters/feConvolveMatrix/order=4-4.png", false), 0)}
#[test] fn resvg_filters_feConvolveMatrix_custom_divisor() {assert_eq!(run_test("svg/resvg/filters/feConvolveMatrix/custom-divisor.svg", "ref/resvg/filters/feConvolveMatrix/custom-divisor.png", "diff/resvg/filters/feConvolveMatrix/custom-divisor.png", false), 0)}
#[test] fn resvg_filters_feConvolveMatrix_no_kernelMatrix() {assert_eq!(run_test("svg/resvg/filters/feConvolveMatrix/no-kernelMatrix.svg", "ref/resvg/filters/feConvolveMatrix/no-kernelMatrix.png", "diff/resvg/filters/feConvolveMatrix/no-kernelMatrix.png", false), 0)}
#[test] fn resvg_filters_feConvolveMatrix_preserveAlpha_true() {assert_eq!(run_test("svg/resvg/filters/feConvolveMatrix/preserveAlpha=true.svg", "ref/resvg/filters/feConvolveMatrix/preserveAlpha=true.png", "diff/resvg/filters/feConvolveMatrix/preserveAlpha=true.png", false), 0)}
#[ignore] #[test] fn resvg_filters_feConvolveMatrix_bias__0_5() {assert_eq!(run_test("svg/resvg/filters/feConvolveMatrix/bias=-0.5.svg", "ref/resvg/filters/feConvolveMatrix/bias=-0.5.png", "diff/resvg/filters/feConvolveMatrix/bias=-0.5.png", false), 0)}
#[test] fn resvg_filters_feConvolveMatrix_kernelMatrix_with_too_many_values() {assert_eq!(run_test("svg/resvg/filters/feConvolveMatrix/kernelMatrix-with-too-many-values.svg", "ref/resvg/filters/feConvolveMatrix/kernelMatrix-with-too-many-values.png", "diff/resvg/filters/feConvolveMatrix/kernelMatrix-with-too-many-values.png", false), 0)}
#[test] fn resvg_filters_feConvolveMatrix_order_4_2() {assert_eq!(run_test("svg/resvg/filters/feConvolveMatrix/order=4-2.svg", "ref/resvg/filters/feConvolveMatrix/order=4-2.png", "diff/resvg/filters/feConvolveMatrix/order=4-2.png", false), 0)}
#[test] fn resvg_filters_flood_opacity_simple_case() {assert_eq!(run_test("svg/resvg/filters/flood-opacity/simple-case.svg", "ref/resvg/filters/flood-opacity/simple-case.png", "diff/resvg/filters/flood-opacity/simple-case.png", false), 0)}
#[test] fn resvg_filters_flood_opacity_50percent() {assert_eq!(run_test("svg/resvg/filters/flood-opacity/50percent.svg", "ref/resvg/filters/flood-opacity/50percent.png", "diff/resvg/filters/flood-opacity/50percent.png", false), 0)}
#[test] fn resvg_filters_feDistantLight_negative_azimuth_and_elevation() {assert_eq!(run_test("svg/resvg/filters/feDistantLight/negative-azimuth-and-elevation.svg", "ref/resvg/filters/feDistantLight/negative-azimuth-and-elevation.png", "diff/resvg/filters/feDistantLight/negative-azimuth-and-elevation.png", false), 0)}
#[test] fn resvg_filters_feDistantLight_only_azimuth() {assert_eq!(run_test("svg/resvg/filters/feDistantLight/only-azimuth.svg", "ref/resvg/filters/feDistantLight/only-azimuth.png", "diff/resvg/filters/feDistantLight/only-azimuth.png", false), 0)}
#[test] fn resvg_filters_feDistantLight_only_elevation() {assert_eq!(run_test("svg/resvg/filters/feDistantLight/only-elevation.svg", "ref/resvg/filters/feDistantLight/only-elevation.png", "diff/resvg/filters/feDistantLight/only-elevation.png", false), 0)}
#[test] fn resvg_filters_feDistantLight_default_attributes() {assert_eq!(run_test("svg/resvg/filters/feDistantLight/default-attributes.svg", "ref/resvg/filters/feDistantLight/default-attributes.png", "diff/resvg/filters/feDistantLight/default-attributes.png", false), 0)}
#[ignore] #[test] fn resvg_filters_fePointLight_complex_transform() {assert_eq!(run_test("svg/resvg/filters/fePointLight/complex-transform.svg", "ref/resvg/filters/fePointLight/complex-transform.png", "diff/resvg/filters/fePointLight/complex-transform.png", false), 0)}
#[ignore] #[test] fn resvg_filters_fePointLight_primitiveUnits_objectBoundingBox() {assert_eq!(run_test("svg/resvg/filters/fePointLight/primitiveUnits=objectBoundingBox.svg", "ref/resvg/filters/fePointLight/primitiveUnits=objectBoundingBox.png", "diff/resvg/filters/fePointLight/primitiveUnits=objectBoundingBox.png", false), 0)}
#[test] fn resvg_filters_fePointLight_custom_attributes() {assert_eq!(run_test("svg/resvg/filters/fePointLight/custom-attributes.svg", "ref/resvg/filters/fePointLight/custom-attributes.png", "diff/resvg/filters/fePointLight/custom-attributes.png", false), 0)}
#[test] fn resvg_filters_fePointLight_default_attributes() {assert_eq!(run_test("svg/resvg/filters/fePointLight/default-attributes.svg", "ref/resvg/filters/fePointLight/default-attributes.png", "diff/resvg/filters/fePointLight/default-attributes.png", false), 0)}
#[test] fn resvg_filters_filter_in_to_invalid_1() {assert_eq!(run_test("svg/resvg/filters/filter/in-to-invalid-1.svg", "ref/resvg/filters/filter/in-to-invalid-1.png", "diff/resvg/filters/filter/in-to-invalid-1.png", false), 0)}
#[test] fn resvg_filters_filter_invalid_primitive_2() {assert_eq!(run_test("svg/resvg/filters/filter/invalid-primitive-2.svg", "ref/resvg/filters/filter/invalid-primitive-2.png", "diff/resvg/filters/filter/invalid-primitive-2.png", false), 0)}
#[ignore] #[test] fn resvg_filters_filter_transform_on_shape_with_filter_region() {assert_eq!(run_test("svg/resvg/filters/filter/transform-on-shape-with-filter-region.svg", "ref/resvg/filters/filter/transform-on-shape-with-filter-region.png", "diff/resvg/filters/filter/transform-on-shape-with-filter-region.png", false), 0)}
#[test] fn resvg_filters_filter_region_with_stroke() {assert_eq!(run_test("svg/resvg/filters/filter/region-with-stroke.svg", "ref/resvg/filters/filter/region-with-stroke.png", "diff/resvg/filters/filter/region-with-stroke.png", false), 0)}
#[test] fn resvg_filters_filter_in_SourceAlpha() {assert_eq!(run_test("svg/resvg/filters/filter/in=SourceAlpha.svg", "ref/resvg/filters/filter/in=SourceAlpha.png", "diff/resvg/filters/filter/in=SourceAlpha.png", false), 0)}
#[test] fn resvg_filters_filter_on_a_vertical_line() {assert_eq!(run_test("svg/resvg/filters/filter/on-a-vertical-line.svg", "ref/resvg/filters/filter/on-a-vertical-line.png", "diff/resvg/filters/filter/on-a-vertical-line.png", false), 0)}
#[ignore] #[test] fn resvg_filters_filter_huge_region() {assert_eq!(run_test("svg/resvg/filters/filter/huge-region.svg", "ref/resvg/filters/filter/huge-region.png", "diff/resvg/filters/filter/huge-region.png", false), 0)}
#[test] fn resvg_filters_filter_invalid_primitive_1() {assert_eq!(run_test("svg/resvg/filters/filter/invalid-primitive-1.svg", "ref/resvg/filters/filter/invalid-primitive-1.png", "diff/resvg/filters/filter/invalid-primitive-1.png", false), 0)}
#[test] fn resvg_filters_filter_in_to_invalid_2() {assert_eq!(run_test("svg/resvg/filters/filter/in-to-invalid-2.svg", "ref/resvg/filters/filter/in-to-invalid-2.png", "diff/resvg/filters/filter/in-to-invalid-2.png", false), 0)}
#[test] fn resvg_filters_filter_content_outside_the_canvas() {assert_eq!(run_test("svg/resvg/filters/filter/content-outside-the-canvas.svg", "ref/resvg/filters/filter/content-outside-the-canvas.png", "diff/resvg/filters/filter/content-outside-the-canvas.png", false), 0)}
#[test] fn resvg_filters_filter_transform_on_filter() {assert_eq!(run_test("svg/resvg/filters/filter/transform-on-filter.svg", "ref/resvg/filters/filter/transform-on-filter.png", "diff/resvg/filters/filter/transform-on-filter.png", false), 0)}
#[test] fn resvg_filters_filter_with_region_and_subregion() {assert_eq!(run_test("svg/resvg/filters/filter/with-region-and-subregion.svg", "ref/resvg/filters/filter/with-region-and-subregion.png", "diff/resvg/filters/filter/with-region-and-subregion.png", false), 0)}
#[test] fn resvg_filters_filter_with_region_and_filterUnits_userSpaceOnUse() {assert_eq!(run_test("svg/resvg/filters/filter/with-region-and-filterUnits=userSpaceOnUse.svg", "ref/resvg/filters/filter/with-region-and-filterUnits=userSpaceOnUse.png", "diff/resvg/filters/filter/with-region-and-filterUnits=userSpaceOnUse.png", false), 0)}
#[ignore] #[test] fn resvg_filters_filter_in_BackgroundAlpha_with_enable_background() {assert_eq!(run_test("svg/resvg/filters/filter/in=BackgroundAlpha-with-enable-background.svg", "ref/resvg/filters/filter/in=BackgroundAlpha-with-enable-background.png", "diff/resvg/filters/filter/in=BackgroundAlpha-with-enable-background.png", false), 0)}
#[ignore] #[test] fn resvg_filters_filter_in_StrokePaint() {assert_eq!(run_test("svg/resvg/filters/filter/in=StrokePaint.svg", "ref/resvg/filters/filter/in=StrokePaint.png", "diff/resvg/filters/filter/in=StrokePaint.png", false), 0)}
#[test] fn resvg_filters_filter_no_children() {assert_eq!(run_test("svg/resvg/filters/filter/no-children.svg", "ref/resvg/filters/filter/no-children.png", "diff/resvg/filters/filter/no-children.png", false), 0)}
#[ignore] #[test] fn resvg_filters_filter_on_an_empty_group_1() {assert_eq!(run_test("svg/resvg/filters/filter/on-an-empty-group-1.svg", "ref/resvg/filters/filter/on-an-empty-group-1.png", "diff/resvg/filters/filter/on-an-empty-group-1.png", false), 0)}
#[test] fn resvg_filters_filter_invalid_subregion() {assert_eq!(run_test("svg/resvg/filters/filter/invalid-subregion.svg", "ref/resvg/filters/filter/invalid-subregion.png", "diff/resvg/filters/filter/invalid-subregion.png", false), 0)}
#[test] fn resvg_filters_filter_everything_via_xlink_href() {assert_eq!(run_test("svg/resvg/filters/filter/everything-via-xlink-href.svg", "ref/resvg/filters/filter/everything-via-xlink-href.png", "diff/resvg/filters/filter/everything-via-xlink-href.png", false), 0)}
#[test] fn resvg_filters_filter_zero_sized_subregion() {assert_eq!(run_test("svg/resvg/filters/filter/zero-sized-subregion.svg", "ref/resvg/filters/filter/zero-sized-subregion.png", "diff/resvg/filters/filter/zero-sized-subregion.png", false), 0)}
#[test] fn resvg_filters_filter_on_zero_sized_shape() {assert_eq!(run_test("svg/resvg/filters/filter/on-zero-sized-shape.svg", "ref/resvg/filters/filter/on-zero-sized-shape.png", "diff/resvg/filters/filter/on-zero-sized-shape.png", false), 0)}
#[test] fn resvg_filters_filter_with_region_outside_the_viewbox() {assert_eq!(run_test("svg/resvg/filters/filter/with-region-outside-the-viewbox.svg", "ref/resvg/filters/filter/with-region-outside-the-viewbox.png", "diff/resvg/filters/filter/with-region-outside-the-viewbox.png", false), 0)}
#[test] fn resvg_filters_filter_on_an_empty_group_2() {assert_eq!(run_test("svg/resvg/filters/filter/on-an-empty-group-2.svg", "ref/resvg/filters/filter/on-an-empty-group-2.png", "diff/resvg/filters/filter/on-an-empty-group-2.png", false), 0)}
#[test] fn resvg_filters_filter_in_BackgroundAlpha() {assert_eq!(run_test("svg/resvg/filters/filter/in=BackgroundAlpha.svg", "ref/resvg/filters/filter/in=BackgroundAlpha.png", "diff/resvg/filters/filter/in=BackgroundAlpha.png", false), 0)}
#[test] fn resvg_filters_filter_with_clip_path_and_mask() {assert_eq!(run_test("svg/resvg/filters/filter/with-clip-path-and-mask.svg", "ref/resvg/filters/filter/with-clip-path-and-mask.png", "diff/resvg/filters/filter/with-clip-path-and-mask.png", false), 0)}
#[ignore] #[test] fn resvg_filters_filter_with_mask_on_parent() {assert_eq!(run_test("svg/resvg/filters/filter/with-mask-on-parent.svg", "ref/resvg/filters/filter/with-mask-on-parent.png", "diff/resvg/filters/filter/with-mask-on-parent.png", false), 0)}
#[test] fn resvg_filters_filter_with_region_outside_the_canvas() {assert_eq!(run_test("svg/resvg/filters/filter/with-region-outside-the-canvas.svg", "ref/resvg/filters/filter/with-region-outside-the-canvas.png", "diff/resvg/filters/filter/with-region-outside-the-canvas.png", false), 0)}
#[test] fn resvg_filters_filter_transform_on_shape() {assert_eq!(run_test("svg/resvg/filters/filter/transform-on-shape.svg", "ref/resvg/filters/filter/transform-on-shape.png", "diff/resvg/filters/filter/transform-on-shape.png", false), 0)}
#[ignore] #[test] fn resvg_filters_filter_in_BackgroundImage_with_enable_background() {assert_eq!(run_test("svg/resvg/filters/filter/in=BackgroundImage-with-enable-background.svg", "ref/resvg/filters/filter/in=BackgroundImage-with-enable-background.png", "diff/resvg/filters/filter/in=BackgroundImage-with-enable-background.png", false), 0)}
#[test] fn resvg_filters_filter_subregion_bigger_that_region() {assert_eq!(run_test("svg/resvg/filters/filter/subregion-bigger-that-region.svg", "ref/resvg/filters/filter/subregion-bigger-that-region.png", "diff/resvg/filters/filter/subregion-bigger-that-region.png", false), 0)}
#[test] fn resvg_filters_filter_global_transform() {assert_eq!(run_test("svg/resvg/filters/filter/global-transform.svg", "ref/resvg/filters/filter/global-transform.png", "diff/resvg/filters/filter/global-transform.png", false), 0)}
#[ignore] #[test] fn resvg_filters_filter_in_FillPaint_with_pattern() {assert_eq!(run_test("svg/resvg/filters/filter/in=FillPaint-with-pattern.svg", "ref/resvg/filters/filter/in=FillPaint-with-pattern.png", "diff/resvg/filters/filter/in=FillPaint-with-pattern.png", false), 0)}
#[test] fn resvg_filters_filter_simple_case() {assert_eq!(run_test("svg/resvg/filters/filter/simple-case.svg", "ref/resvg/filters/filter/simple-case.png", "diff/resvg/filters/filter/simple-case.png", false), 0)}
#[ignore] #[test] fn resvg_filters_filter_on_the_root_svg() {assert_eq!(run_test("svg/resvg/filters/filter/on-the-root-svg.svg", "ref/resvg/filters/filter/on-the-root-svg.png", "diff/resvg/filters/filter/on-the-root-svg.png", false), 0)}
#[test] fn resvg_filters_filter_some_attributes_via_xlink_href() {assert_eq!(run_test("svg/resvg/filters/filter/some-attributes-via-xlink-href.svg", "ref/resvg/filters/filter/some-attributes-via-xlink-href.png", "diff/resvg/filters/filter/some-attributes-via-xlink-href.png", false), 0)}
#[test] fn resvg_filters_filter_invalid_region() {assert_eq!(run_test("svg/resvg/filters/filter/invalid-region.svg", "ref/resvg/filters/filter/invalid-region.png", "diff/resvg/filters/filter/invalid-region.png", false), 0)}
#[ignore] #[test] fn resvg_filters_filter_subregion_and_primitiveUnits_objectBoundingBox_2() {assert_eq!(run_test("svg/resvg/filters/filter/subregion-and-primitiveUnits=objectBoundingBox-2.svg", "ref/resvg/filters/filter/subregion-and-primitiveUnits=objectBoundingBox-2.png", "diff/resvg/filters/filter/subregion-and-primitiveUnits=objectBoundingBox-2.png", false), 0)}
#[test] fn resvg_filters_filter_content_outside_the_canvas_2() {assert_eq!(run_test("svg/resvg/filters/filter/content-outside-the-canvas-2.svg", "ref/resvg/filters/filter/content-outside-the-canvas-2.png", "diff/resvg/filters/filter/content-outside-the-canvas-2.png", false), 0)}
#[test] fn resvg_filters_filter_primitiveUnits_objectBoundingBox() {assert_eq!(run_test("svg/resvg/filters/filter/primitiveUnits=objectBoundingBox.svg", "ref/resvg/filters/filter/primitiveUnits=objectBoundingBox.png", "diff/resvg/filters/filter/primitiveUnits=objectBoundingBox.png", false), 0)}
#[test] fn resvg_filters_filter_color_interpolation_filters_sRGB() {assert_eq!(run_test("svg/resvg/filters/filter/color-interpolation-filters=sRGB.svg", "ref/resvg/filters/filter/color-interpolation-filters=sRGB.png", "diff/resvg/filters/filter/color-interpolation-filters=sRGB.png", false), 0)}
#[test] fn resvg_filters_filter_with_region() {assert_eq!(run_test("svg/resvg/filters/filter/with-region.svg", "ref/resvg/filters/filter/with-region.png", "diff/resvg/filters/filter/with-region.png", false), 0)}
#[ignore] #[test] fn resvg_filters_filter_subregion_and_primitiveUnits_objectBoundingBox_1() {assert_eq!(run_test("svg/resvg/filters/filter/subregion-and-primitiveUnits=objectBoundingBox-1.svg", "ref/resvg/filters/filter/subregion-and-primitiveUnits=objectBoundingBox-1.png", "diff/resvg/filters/filter/subregion-and-primitiveUnits=objectBoundingBox-1.png", false), 0)}
#[ignore] #[test] fn resvg_filters_filter_in_FillPaint_with_target_on_g() {assert_eq!(run_test("svg/resvg/filters/filter/in=FillPaint-with-target-on-g.svg", "ref/resvg/filters/filter/in=FillPaint-with-target-on-g.png", "diff/resvg/filters/filter/in=FillPaint-with-target-on-g.png", false), 0)}
#[ignore] #[test] fn resvg_filters_filter_in_FillPaint() {assert_eq!(run_test("svg/resvg/filters/filter/in=FillPaint.svg", "ref/resvg/filters/filter/in=FillPaint.png", "diff/resvg/filters/filter/in=FillPaint.png", false), 0)}
#[test] fn resvg_filters_filter_negative_subregion() {assert_eq!(run_test("svg/resvg/filters/filter/negative-subregion.svg", "ref/resvg/filters/filter/negative-subregion.png", "diff/resvg/filters/filter/negative-subregion.png", false), 0)}
#[ignore] #[test] fn resvg_filters_filter_in_FillPaint_on_g_without_children() {assert_eq!(run_test("svg/resvg/filters/filter/in=FillPaint-on-g-without-children.svg", "ref/resvg/filters/filter/in=FillPaint-on-g-without-children.png", "diff/resvg/filters/filter/in=FillPaint-on-g-without-children.png", false), 0)}
#[ignore] #[test] fn resvg_filters_filter_with_mask() {assert_eq!(run_test("svg/resvg/filters/filter/with-mask.svg", "ref/resvg/filters/filter/with-mask.png", "diff/resvg/filters/filter/with-mask.png", false), 0)}
#[test] fn resvg_filters_filter_invalid_filterUnits() {assert_eq!(run_test("svg/resvg/filters/filter/invalid-filterUnits.svg", "ref/resvg/filters/filter/invalid-filterUnits.png", "diff/resvg/filters/filter/invalid-filterUnits.png", false), 0)}
#[test] fn resvg_filters_filter_with_multiple_transforms_1() {assert_eq!(run_test("svg/resvg/filters/filter/with-multiple-transforms-1.svg", "ref/resvg/filters/filter/with-multiple-transforms-1.png", "diff/resvg/filters/filter/with-multiple-transforms-1.png", false), 0)}
#[test] fn resvg_filters_filter_with_subregion_1() {assert_eq!(run_test("svg/resvg/filters/filter/with-subregion-1.svg", "ref/resvg/filters/filter/with-subregion-1.png", "diff/resvg/filters/filter/with-subregion-1.png", false), 0)}
#[ignore] #[test] fn resvg_filters_filter_on_a_thin_rect() {assert_eq!(run_test("svg/resvg/filters/filter/on-a-thin-rect.svg", "ref/resvg/filters/filter/on-a-thin-rect.png", "diff/resvg/filters/filter/on-a-thin-rect.png", false), 0)}
#[test] fn resvg_filters_filter_default_color_interpolation_filters() {assert_eq!(run_test("svg/resvg/filters/filter/default-color-interpolation-filters.svg", "ref/resvg/filters/filter/default-color-interpolation-filters.png", "diff/resvg/filters/filter/default-color-interpolation-filters.png", false), 0)}
#[test] fn resvg_filters_filter_with_clip_path() {assert_eq!(run_test("svg/resvg/filters/filter/with-clip-path.svg", "ref/resvg/filters/filter/with-clip-path.png", "diff/resvg/filters/filter/with-clip-path.png", false), 0)}
#[test] fn resvg_filters_filter_with_subregion_3() {assert_eq!(run_test("svg/resvg/filters/filter/with-subregion-3.svg", "ref/resvg/filters/filter/with-subregion-3.png", "diff/resvg/filters/filter/with-subregion-3.png", false), 0)}
#[test] fn resvg_filters_filter_none() {assert_eq!(run_test("svg/resvg/filters/filter/none.svg", "ref/resvg/filters/filter/none.png", "diff/resvg/filters/filter/none.png", false), 0)}
#[test] fn resvg_filters_filter_recursive_xlink_href() {assert_eq!(run_test("svg/resvg/filters/filter/recursive-xlink-href.svg", "ref/resvg/filters/filter/recursive-xlink-href.png", "diff/resvg/filters/filter/recursive-xlink-href.png", false), 0)}
#[test] fn resvg_filters_filter_with_multiple_transforms_2() {assert_eq!(run_test("svg/resvg/filters/filter/with-multiple-transforms-2.svg", "ref/resvg/filters/filter/with-multiple-transforms-2.png", "diff/resvg/filters/filter/with-multiple-transforms-2.png", false), 0)}
#[test] fn resvg_filters_filter_with_subregion_2() {assert_eq!(run_test("svg/resvg/filters/filter/with-subregion-2.svg", "ref/resvg/filters/filter/with-subregion-2.png", "diff/resvg/filters/filter/with-subregion-2.png", false), 0)}
#[test] fn resvg_filters_filter_complex_order_and_xlink_href() {assert_eq!(run_test("svg/resvg/filters/filter/complex-order-and-xlink-href.svg", "ref/resvg/filters/filter/complex-order-and-xlink-href.png", "diff/resvg/filters/filter/complex-order-and-xlink-href.png", false), 0)}
#[test] fn resvg_filters_filter_initial_transform() {assert_eq!(run_test("svg/resvg/filters/filter/initial-transform.svg", "ref/resvg/filters/filter/initial-transform.png", "diff/resvg/filters/filter/initial-transform.png", false), 0)}
#[test] fn resvg_filters_filter_unresolved_xlink_href() {assert_eq!(run_test("svg/resvg/filters/filter/unresolved-xlink-href.svg", "ref/resvg/filters/filter/unresolved-xlink-href.png", "diff/resvg/filters/filter/unresolved-xlink-href.png", false), 0)}
#[test] fn resvg_filters_filter_invalid_xlink_href() {assert_eq!(run_test("svg/resvg/filters/filter/invalid-xlink-href.svg", "ref/resvg/filters/filter/invalid-xlink-href.png", "diff/resvg/filters/filter/invalid-xlink-href.png", false), 0)}
#[test] fn resvg_filters_filter_invalid_FuncIRI() {assert_eq!(run_test("svg/resvg/filters/filter/invalid-FuncIRI.svg", "ref/resvg/filters/filter/invalid-FuncIRI.png", "diff/resvg/filters/filter/invalid-FuncIRI.png", false), 0)}
#[test] fn resvg_filters_filter_multiple_primitives_4() {assert_eq!(run_test("svg/resvg/filters/filter/multiple-primitives-4.svg", "ref/resvg/filters/filter/multiple-primitives-4.png", "diff/resvg/filters/filter/multiple-primitives-4.png", false), 0)}
#[test] fn resvg_filters_filter_in_BackgroundImage() {assert_eq!(run_test("svg/resvg/filters/filter/in=BackgroundImage.svg", "ref/resvg/filters/filter/in=BackgroundImage.png", "diff/resvg/filters/filter/in=BackgroundImage.png", false), 0)}
#[test] fn resvg_filters_filter_self_recursive_xlink_href() {assert_eq!(run_test("svg/resvg/filters/filter/self-recursive-xlink-href.svg", "ref/resvg/filters/filter/self-recursive-xlink-href.png", "diff/resvg/filters/filter/self-recursive-xlink-href.png", false), 0)}
#[test] fn resvg_filters_filter_multiple_primitives_1() {assert_eq!(run_test("svg/resvg/filters/filter/multiple-primitives-1.svg", "ref/resvg/filters/filter/multiple-primitives-1.png", "diff/resvg/filters/filter/multiple-primitives-1.png", false), 0)}
#[test] fn resvg_filters_filter_multiple_primitives_3() {assert_eq!(run_test("svg/resvg/filters/filter/multiple-primitives-3.svg", "ref/resvg/filters/filter/multiple-primitives-3.png", "diff/resvg/filters/filter/multiple-primitives-3.png", false), 0)}
#[test] fn resvg_filters_filter_without_region_and_filterUnits_userSpaceOnUse() {assert_eq!(run_test("svg/resvg/filters/filter/without-region-and-filterUnits=userSpaceOnUse.svg", "ref/resvg/filters/filter/without-region-and-filterUnits=userSpaceOnUse.png", "diff/resvg/filters/filter/without-region-and-filterUnits=userSpaceOnUse.png", false), 0)}
#[test] fn resvg_filters_filter_multiple_primitives_2() {assert_eq!(run_test("svg/resvg/filters/filter/multiple-primitives-2.svg", "ref/resvg/filters/filter/multiple-primitives-2.png", "diff/resvg/filters/filter/multiple-primitives-2.png", false), 0)}
#[test] fn resvg_filters_feImage_link_to_use() {assert_eq!(run_test("svg/resvg/filters/feImage/link-to-use.svg", "ref/resvg/filters/feImage/link-to-use.png", "diff/resvg/filters/feImage/link-to-use.png", false), 0)}
#[test] fn resvg_filters_feImage_link_to_g() {assert_eq!(run_test("svg/resvg/filters/feImage/link-to-g.svg", "ref/resvg/filters/feImage/link-to-g.png", "diff/resvg/filters/feImage/link-to-g.png", false), 0)}
#[test] fn resvg_filters_feImage_empty() {assert_eq!(run_test("svg/resvg/filters/feImage/empty.svg", "ref/resvg/filters/feImage/empty.png", "diff/resvg/filters/feImage/empty.png", false), 0)}
#[test] fn resvg_filters_feImage_link_to_an_element_with_transform() {assert_eq!(run_test("svg/resvg/filters/feImage/link-to-an-element-with-transform.svg", "ref/resvg/filters/feImage/link-to-an-element-with-transform.png", "diff/resvg/filters/feImage/link-to-an-element-with-transform.png", false), 0)}
#[ignore] #[test] fn resvg_filters_feImage_with_x_y() {assert_eq!(run_test("svg/resvg/filters/feImage/with-x-y.svg", "ref/resvg/filters/feImage/with-x-y.png", "diff/resvg/filters/feImage/with-x-y.png", false), 0)}
#[test] fn resvg_filters_feImage_link_to_an_invalid_element() {assert_eq!(run_test("svg/resvg/filters/feImage/link-to-an-invalid-element.svg", "ref/resvg/filters/feImage/link-to-an-invalid-element.png", "diff/resvg/filters/feImage/link-to-an-invalid-element.png", false), 0)}
#[test] fn resvg_filters_feImage_link_on_an_element_with_transform() {assert_eq!(run_test("svg/resvg/filters/feImage/link-on-an-element-with-transform.svg", "ref/resvg/filters/feImage/link-on-an-element-with-transform.png", "diff/resvg/filters/feImage/link-on-an-element-with-transform.png", false), 0)}
#[test] fn resvg_filters_feImage_embedded_png() {assert_eq!(run_test("svg/resvg/filters/feImage/embedded-png.svg", "ref/resvg/filters/feImage/embedded-png.png", "diff/resvg/filters/feImage/embedded-png.png", false), 0)}
#[ignore] #[test] fn resvg_filters_feImage_simple_case() {assert_eq!(run_test("svg/resvg/filters/feImage/simple-case.svg", "ref/resvg/filters/feImage/simple-case.png", "diff/resvg/filters/feImage/simple-case.png", false), 0)}
#[ignore] #[test] fn resvg_filters_feImage_with_x_y_and_protruding_subregion_2() {assert_eq!(run_test("svg/resvg/filters/feImage/with-x-y-and-protruding-subregion-2.svg", "ref/resvg/filters/feImage/with-x-y-and-protruding-subregion-2.png", "diff/resvg/filters/feImage/with-x-y-and-protruding-subregion-2.png", false), 0)}
#[ignore] #[test] fn resvg_filters_feImage_with_x_y_and_protruding_subregion_1() {assert_eq!(run_test("svg/resvg/filters/feImage/with-x-y-and-protruding-subregion-1.svg", "ref/resvg/filters/feImage/with-x-y-and-protruding-subregion-1.png", "diff/resvg/filters/feImage/with-x-y-and-protruding-subregion-1.png", false), 0)}
#[ignore] #[test] fn resvg_filters_feImage_with_subregion_5() {assert_eq!(run_test("svg/resvg/filters/feImage/with-subregion-5.svg", "ref/resvg/filters/feImage/with-subregion-5.png", "diff/resvg/filters/feImage/with-subregion-5.png", false), 0)}
#[test] fn resvg_filters_feImage_link_to_an_element_with_opacity() {assert_eq!(run_test("svg/resvg/filters/feImage/link-to-an-element-with-opacity.svg", "ref/resvg/filters/feImage/link-to-an-element-with-opacity.png", "diff/resvg/filters/feImage/link-to-an-element-with-opacity.png", false), 0)}
#[test] fn resvg_filters_feImage_preserveAspectRatio_none() {assert_eq!(run_test("svg/resvg/filters/feImage/preserveAspectRatio=none.svg", "ref/resvg/filters/feImage/preserveAspectRatio=none.png", "diff/resvg/filters/feImage/preserveAspectRatio=none.png", false), 0)}
#[test] fn resvg_filters_feImage_with_subregion_4() {assert_eq!(run_test("svg/resvg/filters/feImage/with-subregion-4.svg", "ref/resvg/filters/feImage/with-subregion-4.png", "diff/resvg/filters/feImage/with-subregion-4.png", false), 0)}
#[test] fn resvg_filters_feImage_svg() {assert_eq!(run_test("svg/resvg/filters/feImage/svg.svg", "ref/resvg/filters/feImage/svg.png", "diff/resvg/filters/feImage/svg.png", false), 0)}
#[test] fn resvg_filters_feImage_with_subregion_1() {assert_eq!(run_test("svg/resvg/filters/feImage/with-subregion-1.svg", "ref/resvg/filters/feImage/with-subregion-1.png", "diff/resvg/filters/feImage/with-subregion-1.png", false), 0)}
#[ignore] #[test] fn resvg_filters_feImage_link_on_an_element_with_complex_transform() {assert_eq!(run_test("svg/resvg/filters/feImage/link-on-an-element-with-complex-transform.svg", "ref/resvg/filters/feImage/link-on-an-element-with-complex-transform.png", "diff/resvg/filters/feImage/link-on-an-element-with-complex-transform.png", false), 0)}
#[test] fn resvg_filters_feImage_with_subregion_3() {assert_eq!(run_test("svg/resvg/filters/feImage/with-subregion-3.svg", "ref/resvg/filters/feImage/with-subregion-3.png", "diff/resvg/filters/feImage/with-subregion-3.png", false), 0)}
#[test] fn resvg_filters_feImage_link_to_an_element() {assert_eq!(run_test("svg/resvg/filters/feImage/link-to-an-element.svg", "ref/resvg/filters/feImage/link-to-an-element.png", "diff/resvg/filters/feImage/link-to-an-element.png", false), 0)}
#[test] fn resvg_filters_feImage_with_subregion_2() {assert_eq!(run_test("svg/resvg/filters/feImage/with-subregion-2.svg", "ref/resvg/filters/feImage/with-subregion-2.png", "diff/resvg/filters/feImage/with-subregion-2.png", false), 0)}
#[test] fn resvg_filters_feImage_chained_feImage() {assert_eq!(run_test("svg/resvg/filters/feImage/chained-feImage.svg", "ref/resvg/filters/feImage/chained-feImage.png", "diff/resvg/filters/feImage/chained-feImage.png", false), 0)}
#[test] fn resvg_filters_feImage_self_recursive() {assert_eq!(run_test("svg/resvg/filters/feImage/self-recursive.svg", "ref/resvg/filters/feImage/self-recursive.png", "diff/resvg/filters/feImage/self-recursive.png", false), 0)}
#[test] fn resvg_filters_feImage_link_to_an_element_outside_defs_1() {assert_eq!(run_test("svg/resvg/filters/feImage/link-to-an-element-outside-defs-1.svg", "ref/resvg/filters/feImage/link-to-an-element-outside-defs-1.png", "diff/resvg/filters/feImage/link-to-an-element-outside-defs-1.png", false), 0)}
#[test] fn resvg_filters_feImage_recursive_links_2() {assert_eq!(run_test("svg/resvg/filters/feImage/recursive-links-2.svg", "ref/resvg/filters/feImage/recursive-links-2.png", "diff/resvg/filters/feImage/recursive-links-2.png", false), 0)}
#[test] fn resvg_filters_feImage_link_to_an_element_outside_defs_2() {assert_eq!(run_test("svg/resvg/filters/feImage/link-to-an-element-outside-defs-2.svg", "ref/resvg/filters/feImage/link-to-an-element-outside-defs-2.png", "diff/resvg/filters/feImage/link-to-an-element-outside-defs-2.png", false), 0)}
#[test] fn resvg_filters_feImage_recursive_links_1() {assert_eq!(run_test("svg/resvg/filters/feImage/recursive-links-1.svg", "ref/resvg/filters/feImage/recursive-links-1.png", "diff/resvg/filters/feImage/recursive-links-1.png", false), 0)}
#[test] fn resvg_filters_feDiffuseLighting_single_light_source() {assert_eq!(run_test("svg/resvg/filters/feDiffuseLighting/single-light-source.svg", "ref/resvg/filters/feDiffuseLighting/single-light-source.png", "diff/resvg/filters/feDiffuseLighting/single-light-source.png", false), 0)}
#[test] fn resvg_filters_feDiffuseLighting_single_light_source_with_desc() {assert_eq!(run_test("svg/resvg/filters/feDiffuseLighting/single-light-source-with-desc.svg", "ref/resvg/filters/feDiffuseLighting/single-light-source-with-desc.png", "diff/resvg/filters/feDiffuseLighting/single-light-source-with-desc.png", false), 0)}
#[test] fn resvg_filters_feDiffuseLighting_lighting_color_inherit() {assert_eq!(run_test("svg/resvg/filters/feDiffuseLighting/lighting-color=inherit.svg", "ref/resvg/filters/feDiffuseLighting/lighting-color=inherit.png", "diff/resvg/filters/feDiffuseLighting/lighting-color=inherit.png", false), 0)}
#[test] fn resvg_filters_feDiffuseLighting_lighting_color_hsla() {assert_eq!(run_test("svg/resvg/filters/feDiffuseLighting/lighting-color=hsla.svg", "ref/resvg/filters/feDiffuseLighting/lighting-color=hsla.png", "diff/resvg/filters/feDiffuseLighting/lighting-color=hsla.png", false), 0)}
#[test] fn resvg_filters_feDiffuseLighting_single_light_source_with_title_and_desc() {assert_eq!(run_test("svg/resvg/filters/feDiffuseLighting/single-light-source-with-title-and-desc.svg", "ref/resvg/filters/feDiffuseLighting/single-light-source-with-title-and-desc.png", "diff/resvg/filters/feDiffuseLighting/single-light-source-with-title-and-desc.png", false), 0)}
#[test] fn resvg_filters_feDiffuseLighting_single_light_source_with_invalid_child() {assert_eq!(run_test("svg/resvg/filters/feDiffuseLighting/single-light-source-with-invalid-child.svg", "ref/resvg/filters/feDiffuseLighting/single-light-source-with-invalid-child.png", "diff/resvg/filters/feDiffuseLighting/single-light-source-with-invalid-child.png", false), 0)}
#[ignore] #[test] fn resvg_filters_feDiffuseLighting_complex_transform() {assert_eq!(run_test("svg/resvg/filters/feDiffuseLighting/complex-transform.svg", "ref/resvg/filters/feDiffuseLighting/complex-transform.png", "diff/resvg/filters/feDiffuseLighting/complex-transform.png", false), 0)}
#[test] fn resvg_filters_feDiffuseLighting_lighting_color_currentColor() {assert_eq!(run_test("svg/resvg/filters/feDiffuseLighting/lighting-color=currentColor.svg", "ref/resvg/filters/feDiffuseLighting/lighting-color=currentColor.png", "diff/resvg/filters/feDiffuseLighting/lighting-color=currentColor.png", false), 0)}
#[test] fn resvg_filters_feDiffuseLighting_surfaceScale_1_33() {assert_eq!(run_test("svg/resvg/filters/feDiffuseLighting/surfaceScale=1.33.svg", "ref/resvg/filters/feDiffuseLighting/surfaceScale=1.33.png", "diff/resvg/filters/feDiffuseLighting/surfaceScale=1.33.png", false), 0)}
#[test] fn resvg_filters_feDiffuseLighting_no_light_source() {assert_eq!(run_test("svg/resvg/filters/feDiffuseLighting/no-light-source.svg", "ref/resvg/filters/feDiffuseLighting/no-light-source.png", "diff/resvg/filters/feDiffuseLighting/no-light-source.png", false), 0)}
#[test] fn resvg_filters_feDiffuseLighting_diffuseConstant__1() {assert_eq!(run_test("svg/resvg/filters/feDiffuseLighting/diffuseConstant=-1.svg", "ref/resvg/filters/feDiffuseLighting/diffuseConstant=-1.png", "diff/resvg/filters/feDiffuseLighting/diffuseConstant=-1.png", false), 0)}
#[test] fn resvg_filters_feDiffuseLighting_surfaceScale_5() {assert_eq!(run_test("svg/resvg/filters/feDiffuseLighting/surfaceScale=5.svg", "ref/resvg/filters/feDiffuseLighting/surfaceScale=5.png", "diff/resvg/filters/feDiffuseLighting/surfaceScale=5.png", false), 0)}
#[test] fn resvg_filters_feDiffuseLighting_surfaceScale__10() {assert_eq!(run_test("svg/resvg/filters/feDiffuseLighting/surfaceScale=-10.svg", "ref/resvg/filters/feDiffuseLighting/surfaceScale=-10.png", "diff/resvg/filters/feDiffuseLighting/surfaceScale=-10.png", false), 0)}
#[test] fn resvg_filters_feDiffuseLighting_single_light_source_with_title() {assert_eq!(run_test("svg/resvg/filters/feDiffuseLighting/single-light-source-with-title.svg", "ref/resvg/filters/feDiffuseLighting/single-light-source-with-title.png", "diff/resvg/filters/feDiffuseLighting/single-light-source-with-title.png", false), 0)}
#[test] fn resvg_filters_feDiffuseLighting_surfaceScale_0() {assert_eq!(run_test("svg/resvg/filters/feDiffuseLighting/surfaceScale=0.svg", "ref/resvg/filters/feDiffuseLighting/surfaceScale=0.png", "diff/resvg/filters/feDiffuseLighting/surfaceScale=0.png", false), 0)}
#[test] fn resvg_filters_feDiffuseLighting_lighting_color_seagreen() {assert_eq!(run_test("svg/resvg/filters/feDiffuseLighting/lighting-color=seagreen.svg", "ref/resvg/filters/feDiffuseLighting/lighting-color=seagreen.png", "diff/resvg/filters/feDiffuseLighting/lighting-color=seagreen.png", false), 0)}
#[test] fn resvg_filters_feDiffuseLighting_linearRGB_color_interpolation() {assert_eq!(run_test("svg/resvg/filters/feDiffuseLighting/linearRGB-color-interpolation.svg", "ref/resvg/filters/feDiffuseLighting/linearRGB-color-interpolation.png", "diff/resvg/filters/feDiffuseLighting/linearRGB-color-interpolation.png", false), 0)}
#[test] fn resvg_filters_feDiffuseLighting_diffuseConstant_0() {assert_eq!(run_test("svg/resvg/filters/feDiffuseLighting/diffuseConstant=0.svg", "ref/resvg/filters/feDiffuseLighting/diffuseConstant=0.png", "diff/resvg/filters/feDiffuseLighting/diffuseConstant=0.png", false), 0)}
#[test] fn resvg_filters_feDiffuseLighting_single_light_source_with_comment() {assert_eq!(run_test("svg/resvg/filters/feDiffuseLighting/single-light-source-with-comment.svg", "ref/resvg/filters/feDiffuseLighting/single-light-source-with-comment.png", "diff/resvg/filters/feDiffuseLighting/single-light-source-with-comment.png", false), 0)}
#[test] fn resvg_filters_feDiffuseLighting_lighting_color_currentColor_without_color() {assert_eq!(run_test("svg/resvg/filters/feDiffuseLighting/lighting-color=currentColor-without-color.svg", "ref/resvg/filters/feDiffuseLighting/lighting-color=currentColor-without-color.png", "diff/resvg/filters/feDiffuseLighting/lighting-color=currentColor-without-color.png", false), 0)}
#[test] fn resvg_filters_feDiffuseLighting_multiple_light_sources() {assert_eq!(run_test("svg/resvg/filters/feDiffuseLighting/multiple-light-sources.svg", "ref/resvg/filters/feDiffuseLighting/multiple-light-sources.png", "diff/resvg/filters/feDiffuseLighting/multiple-light-sources.png", false), 0)}
#[test] fn resvg_filters_feDiffuseLighting_diffuseConstant_5() {assert_eq!(run_test("svg/resvg/filters/feDiffuseLighting/diffuseConstant=5.svg", "ref/resvg/filters/feDiffuseLighting/diffuseConstant=5.png", "diff/resvg/filters/feDiffuseLighting/diffuseConstant=5.png", false), 0)}
#[ignore] #[test] fn resvg_filters_feFlood_complex_transform() {assert_eq!(run_test("svg/resvg/filters/feFlood/complex-transform.svg", "ref/resvg/filters/feFlood/complex-transform.png", "diff/resvg/filters/feFlood/complex-transform.png", false), 0)}
#[test] fn resvg_filters_feFlood_with_opacity_on_target_element() {assert_eq!(run_test("svg/resvg/filters/feFlood/with-opacity-on-target-element.svg", "ref/resvg/filters/feFlood/with-opacity-on-target-element.png", "diff/resvg/filters/feFlood/with-opacity-on-target-element.png", false), 0)}
#[test] fn resvg_filters_feFlood_with_opacity() {assert_eq!(run_test("svg/resvg/filters/feFlood/with-opacity.svg", "ref/resvg/filters/feFlood/with-opacity.png", "diff/resvg/filters/feFlood/with-opacity.png", false), 0)}
#[test] fn resvg_filters_feFlood_subregion_with_primitiveUnits_objectBoundingBox() {assert_eq!(run_test("svg/resvg/filters/feFlood/subregion-with-primitiveUnits=objectBoundingBox.svg", "ref/resvg/filters/feFlood/subregion-with-primitiveUnits=objectBoundingBox.png", "diff/resvg/filters/feFlood/subregion-with-primitiveUnits=objectBoundingBox.png", false), 0)}
#[test] fn resvg_filters_feFlood_default_values() {assert_eq!(run_test("svg/resvg/filters/feFlood/default-values.svg", "ref/resvg/filters/feFlood/default-values.png", "diff/resvg/filters/feFlood/default-values.png", false), 0)}
#[ignore] #[test] fn resvg_filters_feFlood_partial_subregion() {assert_eq!(run_test("svg/resvg/filters/feFlood/partial-subregion.svg", "ref/resvg/filters/feFlood/partial-subregion.png", "diff/resvg/filters/feFlood/partial-subregion.png", false), 0)}
#[test] fn resvg_filters_feFlood_seagreen() {assert_eq!(run_test("svg/resvg/filters/feFlood/seagreen.svg", "ref/resvg/filters/feFlood/seagreen.png", "diff/resvg/filters/feFlood/seagreen.png", false), 0)}
#[test] fn resvg_filters_feFlood_subregion_inheritance() {assert_eq!(run_test("svg/resvg/filters/feFlood/subregion-inheritance.svg", "ref/resvg/filters/feFlood/subregion-inheritance.png", "diff/resvg/filters/feFlood/subregion-inheritance.png", false), 0)}
#[test] fn resvg_filters_feSpotLight_with_all_pointsAt() {assert_eq!(run_test("svg/resvg/filters/feSpotLight/with-all-pointsAt.svg", "ref/resvg/filters/feSpotLight/with-all-pointsAt.png", "diff/resvg/filters/feSpotLight/with-all-pointsAt.png", false), 0)}
#[ignore] #[test] fn resvg_filters_feSpotLight_complex_transform() {assert_eq!(run_test("svg/resvg/filters/feSpotLight/complex-transform.svg", "ref/resvg/filters/feSpotLight/complex-transform.png", "diff/resvg/filters/feSpotLight/complex-transform.png", false), 0)}
#[ignore] #[test] fn resvg_filters_feSpotLight_limitingConeAngle_0() {assert_eq!(run_test("svg/resvg/filters/feSpotLight/limitingConeAngle=0.svg", "ref/resvg/filters/feSpotLight/limitingConeAngle=0.png", "diff/resvg/filters/feSpotLight/limitingConeAngle=0.png", false), 0)}
#[ignore] #[test] fn resvg_filters_feSpotLight_primitiveUnits_objectBoundingBox() {assert_eq!(run_test("svg/resvg/filters/feSpotLight/primitiveUnits=objectBoundingBox.svg", "ref/resvg/filters/feSpotLight/primitiveUnits=objectBoundingBox.png", "diff/resvg/filters/feSpotLight/primitiveUnits=objectBoundingBox.png", false), 0)}
#[test] fn resvg_filters_feSpotLight_limitingConeAngle_anti_aliasing() {assert_eq!(run_test("svg/resvg/filters/feSpotLight/limitingConeAngle-anti-aliasing.svg", "ref/resvg/filters/feSpotLight/limitingConeAngle-anti-aliasing.png", "diff/resvg/filters/feSpotLight/limitingConeAngle-anti-aliasing.png", false), 0)}
#[test] fn resvg_filters_feSpotLight_specularExponent_10() {assert_eq!(run_test("svg/resvg/filters/feSpotLight/specularExponent=10.svg", "ref/resvg/filters/feSpotLight/specularExponent=10.png", "diff/resvg/filters/feSpotLight/specularExponent=10.png", false), 0)}
#[test] fn resvg_filters_feSpotLight_specularExponent__10() {assert_eq!(run_test("svg/resvg/filters/feSpotLight/specularExponent=-10.svg", "ref/resvg/filters/feSpotLight/specularExponent=-10.png", "diff/resvg/filters/feSpotLight/specularExponent=-10.png", false), 0)}
#[test] fn resvg_filters_feSpotLight_custom_attributes() {assert_eq!(run_test("svg/resvg/filters/feSpotLight/custom-attributes.svg", "ref/resvg/filters/feSpotLight/custom-attributes.png", "diff/resvg/filters/feSpotLight/custom-attributes.png", false), 0)}
#[test] fn resvg_filters_feSpotLight_specularExponent_0_5() {assert_eq!(run_test("svg/resvg/filters/feSpotLight/specularExponent=0.5.svg", "ref/resvg/filters/feSpotLight/specularExponent=0.5.png", "diff/resvg/filters/feSpotLight/specularExponent=0.5.png", false), 0)}
#[test] fn resvg_filters_feSpotLight_limitingConeAngle_30() {assert_eq!(run_test("svg/resvg/filters/feSpotLight/limitingConeAngle=30.svg", "ref/resvg/filters/feSpotLight/limitingConeAngle=30.png", "diff/resvg/filters/feSpotLight/limitingConeAngle=30.png", false), 0)}
#[test] fn resvg_filters_feSpotLight_limitingConeAngle__30() {assert_eq!(run_test("svg/resvg/filters/feSpotLight/limitingConeAngle=-30.svg", "ref/resvg/filters/feSpotLight/limitingConeAngle=-30.png", "diff/resvg/filters/feSpotLight/limitingConeAngle=-30.png", false), 0)}
#[test] fn resvg_filters_feSpotLight_default_attributes() {assert_eq!(run_test("svg/resvg/filters/feSpotLight/default-attributes.svg", "ref/resvg/filters/feSpotLight/default-attributes.png", "diff/resvg/filters/feSpotLight/default-attributes.png", false), 0)}
#[test] fn resvg_paint_servers_radialGradient_fy_resolving_1() {assert_eq!(run_test("svg/resvg/paint-servers/radialGradient/fy-resolving-1.svg", "ref/resvg/paint-servers/radialGradient/fy-resolving-1.png", "diff/resvg/paint-servers/radialGradient/fy-resolving-1.png", false), 0)}
#[test] fn resvg_paint_servers_radialGradient_fy_resolving_2() {assert_eq!(run_test("svg/resvg/paint-servers/radialGradient/fy-resolving-2.svg", "ref/resvg/paint-servers/radialGradient/fy-resolving-2.png", "diff/resvg/paint-servers/radialGradient/fy-resolving-2.png", false), 0)}
#[test] fn resvg_paint_servers_radialGradient_fy_resolving_3() {assert_eq!(run_test("svg/resvg/paint-servers/radialGradient/fy-resolving-3.svg", "ref/resvg/paint-servers/radialGradient/fy-resolving-3.png", "diff/resvg/paint-servers/radialGradient/fy-resolving-3.png", false), 0)}
#[test] fn resvg_paint_servers_radialGradient_hsla_color() {assert_eq!(run_test("svg/resvg/paint-servers/radialGradient/hsla-color.svg", "ref/resvg/paint-servers/radialGradient/hsla-color.png", "diff/resvg/paint-servers/radialGradient/hsla-color.png", false), 0)}
#[test] fn resvg_paint_servers_radialGradient_attributes_via_xlink_href_only_required() {assert_eq!(run_test("svg/resvg/paint-servers/radialGradient/attributes-via-xlink-href-only-required.svg", "ref/resvg/paint-servers/radialGradient/attributes-via-xlink-href-only-required.png", "diff/resvg/paint-servers/radialGradient/attributes-via-xlink-href-only-required.png", false), 0)}
#[test] fn resvg_paint_servers_radialGradient_attributes_via_xlink_href() {assert_eq!(run_test("svg/resvg/paint-servers/radialGradient/attributes-via-xlink-href.svg", "ref/resvg/paint-servers/radialGradient/attributes-via-xlink-href.png", "diff/resvg/paint-servers/radialGradient/attributes-via-xlink-href.png", false), 0)}
#[test] fn resvg_paint_servers_radialGradient_gradientTransform_and_transform() {assert_eq!(run_test("svg/resvg/paint-servers/radialGradient/gradientTransform-and-transform.svg", "ref/resvg/paint-servers/radialGradient/gradientTransform-and-transform.png", "diff/resvg/paint-servers/radialGradient/gradientTransform-and-transform.png", false), 0)}
#[test] fn resvg_paint_servers_radialGradient_stops_via_xlink_href() {assert_eq!(run_test("svg/resvg/paint-servers/radialGradient/stops-via-xlink-href.svg", "ref/resvg/paint-servers/radialGradient/stops-via-xlink-href.png", "diff/resvg/paint-servers/radialGradient/stops-via-xlink-href.png", false), 0)}
#[ignore] #[test] fn resvg_paint_servers_radialGradient_fr__1() {assert_eq!(run_test("svg/resvg/paint-servers/radialGradient/fr=-1.svg", "ref/resvg/paint-servers/radialGradient/fr=-1.png", "diff/resvg/paint-servers/radialGradient/fr=-1.png", false), 0)}
#[test] fn resvg_paint_servers_radialGradient_no_stops() {assert_eq!(run_test("svg/resvg/paint-servers/radialGradient/no-stops.svg", "ref/resvg/paint-servers/radialGradient/no-stops.png", "diff/resvg/paint-servers/radialGradient/no-stops.png", false), 0)}
#[ignore] #[test] fn resvg_paint_servers_radialGradient_fr_0_2() {assert_eq!(run_test("svg/resvg/paint-servers/radialGradient/fr=0.2.svg", "ref/resvg/paint-servers/radialGradient/fr=0.2.png", "diff/resvg/paint-servers/radialGradient/fr=0.2.png", false), 0)}
#[test] fn resvg_paint_servers_radialGradient_spreadMethod_pad() {assert_eq!(run_test("svg/resvg/paint-servers/radialGradient/spreadMethod=pad.svg", "ref/resvg/paint-servers/radialGradient/spreadMethod=pad.png", "diff/resvg/paint-servers/radialGradient/spreadMethod=pad.png", false), 0)}
#[ignore] #[test] fn resvg_paint_servers_radialGradient_invalid_gradientUnits() {assert_eq!(run_test("svg/resvg/paint-servers/radialGradient/invalid-gradientUnits.svg", "ref/resvg/paint-servers/radialGradient/invalid-gradientUnits.png", "diff/resvg/paint-servers/radialGradient/invalid-gradientUnits.png", false), 0)}
#[test] fn resvg_paint_servers_radialGradient_gradientUnits_objectBoundingBox_with_percent() {assert_eq!(run_test("svg/resvg/paint-servers/radialGradient/gradientUnits=objectBoundingBox-with-percent.svg", "ref/resvg/paint-servers/radialGradient/gradientUnits=objectBoundingBox-with-percent.png", "diff/resvg/paint-servers/radialGradient/gradientUnits=objectBoundingBox-with-percent.png", false), 0)}
#[test] fn resvg_paint_servers_radialGradient_invalid_spreadMethod() {assert_eq!(run_test("svg/resvg/paint-servers/radialGradient/invalid-spreadMethod.svg", "ref/resvg/paint-servers/radialGradient/invalid-spreadMethod.png", "diff/resvg/paint-servers/radialGradient/invalid-spreadMethod.png", false), 0)}
#[ignore] #[test] fn resvg_paint_servers_radialGradient_fr_0_5() {assert_eq!(run_test("svg/resvg/paint-servers/radialGradient/fr=0.5.svg", "ref/resvg/paint-servers/radialGradient/fr=0.5.png", "diff/resvg/paint-servers/radialGradient/fr=0.5.png", false), 0)}
#[test] fn resvg_paint_servers_radialGradient_fx_resolving_1() {assert_eq!(run_test("svg/resvg/paint-servers/radialGradient/fx-resolving-1.svg", "ref/resvg/paint-servers/radialGradient/fx-resolving-1.png", "diff/resvg/paint-servers/radialGradient/fx-resolving-1.png", false), 0)}
#[test] fn resvg_paint_servers_radialGradient_stops_via_xlink_href_from_linearGradient() {assert_eq!(run_test("svg/resvg/paint-servers/radialGradient/stops-via-xlink-href-from-linearGradient.svg", "ref/resvg/paint-servers/radialGradient/stops-via-xlink-href-from-linearGradient.png", "diff/resvg/paint-servers/radialGradient/stops-via-xlink-href-from-linearGradient.png", false), 0)}
#[test] fn resvg_paint_servers_radialGradient_many_stops() {assert_eq!(run_test("svg/resvg/paint-servers/radialGradient/many-stops.svg", "ref/resvg/paint-servers/radialGradient/many-stops.png", "diff/resvg/paint-servers/radialGradient/many-stops.png", false), 0)}
#[test] fn resvg_paint_servers_radialGradient_fx_resolving_2() {assert_eq!(run_test("svg/resvg/paint-servers/radialGradient/fx-resolving-2.svg", "ref/resvg/paint-servers/radialGradient/fx-resolving-2.png", "diff/resvg/paint-servers/radialGradient/fx-resolving-2.png", false), 0)}
#[test] fn resvg_paint_servers_radialGradient_fx_resolving_3() {assert_eq!(run_test("svg/resvg/paint-servers/radialGradient/fx-resolving-3.svg", "ref/resvg/paint-servers/radialGradient/fx-resolving-3.png", "diff/resvg/paint-servers/radialGradient/fx-resolving-3.png", false), 0)}
#[ignore] #[test] fn resvg_paint_servers_radialGradient_fr_0_7() {assert_eq!(run_test("svg/resvg/paint-servers/radialGradient/fr=0.7.svg", "ref/resvg/paint-servers/radialGradient/fr=0.7.png", "diff/resvg/paint-servers/radialGradient/fr=0.7.png", false), 0)}
#[test] fn resvg_paint_servers_radialGradient_gradientTransform() {assert_eq!(run_test("svg/resvg/paint-servers/radialGradient/gradientTransform.svg", "ref/resvg/paint-servers/radialGradient/gradientTransform.png", "diff/resvg/paint-servers/radialGradient/gradientTransform.png", false), 0)}
#[test] fn resvg_paint_servers_radialGradient_gradientUnits_userSpaceOnUse() {assert_eq!(run_test("svg/resvg/paint-servers/radialGradient/gradientUnits=userSpaceOnUse.svg", "ref/resvg/paint-servers/radialGradient/gradientUnits=userSpaceOnUse.png", "diff/resvg/paint-servers/radialGradient/gradientUnits=userSpaceOnUse.png", false), 0)}
#[test] fn resvg_paint_servers_radialGradient_zero_r_with_stop_opacity_2() {assert_eq!(run_test("svg/resvg/paint-servers/radialGradient/zero-r-with-stop-opacity-2.svg", "ref/resvg/paint-servers/radialGradient/zero-r-with-stop-opacity-2.png", "diff/resvg/paint-servers/radialGradient/zero-r-with-stop-opacity-2.png", false), 0)}
#[ignore] #[test] fn resvg_paint_servers_radialGradient_attributes_via_xlink_href_from_linearGradient() {assert_eq!(run_test("svg/resvg/paint-servers/radialGradient/attributes-via-xlink-href-from-linearGradient.svg", "ref/resvg/paint-servers/radialGradient/attributes-via-xlink-href-from-linearGradient.png", "diff/resvg/paint-servers/radialGradient/attributes-via-xlink-href-from-linearGradient.png", false), 0)}
#[test] fn resvg_paint_servers_radialGradient_zero_r_with_stop_opacity_1() {assert_eq!(run_test("svg/resvg/paint-servers/radialGradient/zero-r-with-stop-opacity-1.svg", "ref/resvg/paint-servers/radialGradient/zero-r-with-stop-opacity-1.png", "diff/resvg/paint-servers/radialGradient/zero-r-with-stop-opacity-1.png", false), 0)}
#[test] fn resvg_paint_servers_radialGradient_stops_via_xlink_href_complex_order() {assert_eq!(run_test("svg/resvg/paint-servers/radialGradient/stops-via-xlink-href-complex-order.svg", "ref/resvg/paint-servers/radialGradient/stops-via-xlink-href-complex-order.png", "diff/resvg/paint-servers/radialGradient/stops-via-xlink-href-complex-order.png", false), 0)}
#[test] fn resvg_paint_servers_radialGradient_single_stop() {assert_eq!(run_test("svg/resvg/paint-servers/radialGradient/single-stop.svg", "ref/resvg/paint-servers/radialGradient/single-stop.png", "diff/resvg/paint-servers/radialGradient/single-stop.png", false), 0)}
#[ignore] #[test] fn resvg_paint_servers_radialGradient_invalid_gradientTransform() {assert_eq!(run_test("svg/resvg/paint-servers/radialGradient/invalid-gradientTransform.svg", "ref/resvg/paint-servers/radialGradient/invalid-gradientTransform.png", "diff/resvg/paint-servers/radialGradient/invalid-gradientTransform.png", false), 0)}
#[test] fn resvg_paint_servers_radialGradient_stops_via_xlink_href_from_rect() {assert_eq!(run_test("svg/resvg/paint-servers/radialGradient/stops-via-xlink-href-from-rect.svg", "ref/resvg/paint-servers/radialGradient/stops-via-xlink-href-from-rect.png", "diff/resvg/paint-servers/radialGradient/stops-via-xlink-href-from-rect.png", false), 0)}
#[test] fn resvg_paint_servers_radialGradient_zero_r() {assert_eq!(run_test("svg/resvg/paint-servers/radialGradient/zero-r.svg", "ref/resvg/paint-servers/radialGradient/zero-r.png", "diff/resvg/paint-servers/radialGradient/zero-r.png", false), 0)}
#[test] fn resvg_paint_servers_radialGradient_recursive_xlink_href() {assert_eq!(run_test("svg/resvg/paint-servers/radialGradient/recursive-xlink-href.svg", "ref/resvg/paint-servers/radialGradient/recursive-xlink-href.png", "diff/resvg/paint-servers/radialGradient/recursive-xlink-href.png", false), 0)}
#[test] fn resvg_paint_servers_radialGradient_focal_point_correction() {assert_eq!(run_test("svg/resvg/paint-servers/radialGradient/focal-point-correction.svg", "ref/resvg/paint-servers/radialGradient/focal-point-correction.png", "diff/resvg/paint-servers/radialGradient/focal-point-correction.png", false), 0)}
#[ignore] #[test] fn resvg_paint_servers_radialGradient_spreadMethod_repeat() {assert_eq!(run_test("svg/resvg/paint-servers/radialGradient/spreadMethod=repeat.svg", "ref/resvg/paint-servers/radialGradient/spreadMethod=repeat.png", "diff/resvg/paint-servers/radialGradient/spreadMethod=repeat.png", false), 0)}
#[test] fn resvg_paint_servers_radialGradient_unresolved_xlink_href() {assert_eq!(run_test("svg/resvg/paint-servers/radialGradient/unresolved-xlink-href.svg", "ref/resvg/paint-servers/radialGradient/unresolved-xlink-href.png", "diff/resvg/paint-servers/radialGradient/unresolved-xlink-href.png", false), 0)}
#[test] fn resvg_paint_servers_radialGradient_invalid_xlink_href() {assert_eq!(run_test("svg/resvg/paint-servers/radialGradient/invalid-xlink-href.svg", "ref/resvg/paint-servers/radialGradient/invalid-xlink-href.png", "diff/resvg/paint-servers/radialGradient/invalid-xlink-href.png", false), 0)}
#[test] fn resvg_paint_servers_radialGradient_attributes_via_xlink_href_from_rect() {assert_eq!(run_test("svg/resvg/paint-servers/radialGradient/attributes-via-xlink-href-from-rect.svg", "ref/resvg/paint-servers/radialGradient/attributes-via-xlink-href-from-rect.png", "diff/resvg/paint-servers/radialGradient/attributes-via-xlink-href-from-rect.png", false), 0)}
#[ignore] #[test] fn resvg_paint_servers_radialGradient_attributes_via_xlink_href_complex_order() {assert_eq!(run_test("svg/resvg/paint-servers/radialGradient/attributes-via-xlink-href-complex-order.svg", "ref/resvg/paint-servers/radialGradient/attributes-via-xlink-href-complex-order.png", "diff/resvg/paint-servers/radialGradient/attributes-via-xlink-href-complex-order.png", false), 0)}
#[test] fn resvg_paint_servers_radialGradient_xlink_href_not_to_gradient() {assert_eq!(run_test("svg/resvg/paint-servers/radialGradient/xlink-href-not-to-gradient.svg", "ref/resvg/paint-servers/radialGradient/xlink-href-not-to-gradient.png", "diff/resvg/paint-servers/radialGradient/xlink-href-not-to-gradient.png", false), 0)}
#[test] fn resvg_paint_servers_radialGradient_gradientUnits_userSpaceOnUse_with_percent() {assert_eq!(run_test("svg/resvg/paint-servers/radialGradient/gradientUnits=userSpaceOnUse-with-percent.svg", "ref/resvg/paint-servers/radialGradient/gradientUnits=userSpaceOnUse-with-percent.png", "diff/resvg/paint-servers/radialGradient/gradientUnits=userSpaceOnUse-with-percent.png", false), 0)}
#[test] fn resvg_paint_servers_radialGradient_self_recursive_xlink_href() {assert_eq!(run_test("svg/resvg/paint-servers/radialGradient/self-recursive-xlink-href.svg", "ref/resvg/paint-servers/radialGradient/self-recursive-xlink-href.png", "diff/resvg/paint-servers/radialGradient/self-recursive-xlink-href.png", false), 0)}
#[ignore] #[test] fn resvg_paint_servers_radialGradient_spreadMethod_reflect() {assert_eq!(run_test("svg/resvg/paint-servers/radialGradient/spreadMethod=reflect.svg", "ref/resvg/paint-servers/radialGradient/spreadMethod=reflect.png", "diff/resvg/paint-servers/radialGradient/spreadMethod=reflect.png", false), 0)}
#[test] fn resvg_paint_servers_radialGradient_default_attributes() {assert_eq!(run_test("svg/resvg/paint-servers/radialGradient/default-attributes.svg", "ref/resvg/paint-servers/radialGradient/default-attributes.png", "diff/resvg/paint-servers/radialGradient/default-attributes.png", false), 0)}
#[test] fn resvg_paint_servers_stop_opacity_simple_case() {assert_eq!(run_test("svg/resvg/paint-servers/stop-opacity/simple-case.svg", "ref/resvg/paint-servers/stop-opacity/simple-case.png", "diff/resvg/paint-servers/stop-opacity/simple-case.png", false), 0)}
#[test] fn resvg_paint_servers_stop_opacity_50percent() {assert_eq!(run_test("svg/resvg/paint-servers/stop-opacity/50percent.svg", "ref/resvg/paint-servers/stop-opacity/50percent.png", "diff/resvg/paint-servers/stop-opacity/50percent.png", false), 0)}
#[test] fn resvg_paint_servers_stop_zero_offset_in_the_middle() {assert_eq!(run_test("svg/resvg/paint-servers/stop/zero-offset-in-the-middle.svg", "ref/resvg/paint-servers/stop/zero-offset-in-the-middle.png", "diff/resvg/paint-servers/stop/zero-offset-in-the-middle.png", false), 0)}
#[test] fn resvg_paint_servers_stop_stop_with_smaller_offset() {assert_eq!(run_test("svg/resvg/paint-servers/stop/stop-with-smaller-offset.svg", "ref/resvg/paint-servers/stop/stop-with-smaller-offset.png", "diff/resvg/paint-servers/stop/stop-with-smaller-offset.png", false), 0)}
#[test] fn resvg_paint_servers_stop_stops_with_equal_offset_3() {assert_eq!(run_test("svg/resvg/paint-servers/stop/stops-with-equal-offset-3.svg", "ref/resvg/paint-servers/stop/stops-with-equal-offset-3.png", "diff/resvg/paint-servers/stop/stops-with-equal-offset-3.png", false), 0)}
#[test] fn resvg_paint_servers_stop_stops_with_equal_offset_2() {assert_eq!(run_test("svg/resvg/paint-servers/stop/stops-with-equal-offset-2.svg", "ref/resvg/paint-servers/stop/stops-with-equal-offset-2.png", "diff/resvg/paint-servers/stop/stops-with-equal-offset-2.png", false), 0)}
#[test] fn resvg_paint_servers_stop_stops_with_equal_offset_1() {assert_eq!(run_test("svg/resvg/paint-servers/stop/stops-with-equal-offset-1.svg", "ref/resvg/paint-servers/stop/stops-with-equal-offset-1.png", "diff/resvg/paint-servers/stop/stops-with-equal-offset-1.png", false), 0)}
#[test] fn resvg_paint_servers_stop_stops_with_equal_offset_5() {assert_eq!(run_test("svg/resvg/paint-servers/stop/stops-with-equal-offset-5.svg", "ref/resvg/paint-servers/stop/stops-with-equal-offset-5.png", "diff/resvg/paint-servers/stop/stops-with-equal-offset-5.png", false), 0)}
#[test] fn resvg_paint_servers_stop_stops_with_equal_offset_4() {assert_eq!(run_test("svg/resvg/paint-servers/stop/stops-with-equal-offset-4.svg", "ref/resvg/paint-servers/stop/stops-with-equal-offset-4.png", "diff/resvg/paint-servers/stop/stops-with-equal-offset-4.png", false), 0)}
#[test] fn resvg_paint_servers_stop_offset_clamping_with_percent() {assert_eq!(run_test("svg/resvg/paint-servers/stop/offset-clamping-with-percent.svg", "ref/resvg/paint-servers/stop/offset-clamping-with-percent.png", "diff/resvg/paint-servers/stop/offset-clamping-with-percent.png", false), 0)}
#[test] fn resvg_paint_servers_stop_stops_with_equal_offset_6() {assert_eq!(run_test("svg/resvg/paint-servers/stop/stops-with-equal-offset-6.svg", "ref/resvg/paint-servers/stop/stops-with-equal-offset-6.png", "diff/resvg/paint-servers/stop/stops-with-equal-offset-6.png", false), 0)}
#[test] fn resvg_paint_servers_stop_offset_clamping() {assert_eq!(run_test("svg/resvg/paint-servers/stop/offset-clamping.svg", "ref/resvg/paint-servers/stop/offset-clamping.png", "diff/resvg/paint-servers/stop/offset-clamping.png", false), 0)}
#[test] fn resvg_paint_servers_stop_missing_offset_1() {assert_eq!(run_test("svg/resvg/paint-servers/stop/missing-offset-1.svg", "ref/resvg/paint-servers/stop/missing-offset-1.png", "diff/resvg/paint-servers/stop/missing-offset-1.png", false), 0)}
#[test] fn resvg_paint_servers_stop_stop_color_with_currentColor_2() {assert_eq!(run_test("svg/resvg/paint-servers/stop/stop-color-with-currentColor-2.svg", "ref/resvg/paint-servers/stop/stop-color-with-currentColor-2.png", "diff/resvg/paint-servers/stop/stop-color-with-currentColor-2.png", false), 0)}
#[test] fn resvg_paint_servers_stop_stop_color_with_currentColor_3() {assert_eq!(run_test("svg/resvg/paint-servers/stop/stop-color-with-currentColor-3.svg", "ref/resvg/paint-servers/stop/stop-color-with-currentColor-3.png", "diff/resvg/paint-servers/stop/stop-color-with-currentColor-3.png", false), 0)}
#[test] fn resvg_paint_servers_stop_missing_offset_2() {assert_eq!(run_test("svg/resvg/paint-servers/stop/missing-offset-2.svg", "ref/resvg/paint-servers/stop/missing-offset-2.png", "diff/resvg/paint-servers/stop/missing-offset-2.png", false), 0)}
#[test] fn resvg_paint_servers_stop_stop_color_with_currentColor_1() {assert_eq!(run_test("svg/resvg/paint-servers/stop/stop-color-with-currentColor-1.svg", "ref/resvg/paint-servers/stop/stop-color-with-currentColor-1.png", "diff/resvg/paint-servers/stop/stop-color-with-currentColor-1.png", false), 0)}
#[test] fn resvg_paint_servers_stop_missing_offset_3() {assert_eq!(run_test("svg/resvg/paint-servers/stop/missing-offset-3.svg", "ref/resvg/paint-servers/stop/missing-offset-3.png", "diff/resvg/paint-servers/stop/missing-offset-3.png", false), 0)}
#[test] fn resvg_paint_servers_stop_invalid_offset_1() {assert_eq!(run_test("svg/resvg/paint-servers/stop/invalid-offset-1.svg", "ref/resvg/paint-servers/stop/invalid-offset-1.png", "diff/resvg/paint-servers/stop/invalid-offset-1.png", false), 0)}
#[test] fn resvg_paint_servers_stop_missing_offset_7() {assert_eq!(run_test("svg/resvg/paint-servers/stop/missing-offset-7.svg", "ref/resvg/paint-servers/stop/missing-offset-7.png", "diff/resvg/paint-servers/stop/missing-offset-7.png", false), 0)}
#[test] fn resvg_paint_servers_stop_stop_color_with_currentColor_4() {assert_eq!(run_test("svg/resvg/paint-servers/stop/stop-color-with-currentColor-4.svg", "ref/resvg/paint-servers/stop/stop-color-with-currentColor-4.png", "diff/resvg/paint-servers/stop/stop-color-with-currentColor-4.png", false), 0)}
#[test] fn resvg_paint_servers_stop_no_stop_color() {assert_eq!(run_test("svg/resvg/paint-servers/stop/no-stop-color.svg", "ref/resvg/paint-servers/stop/no-stop-color.png", "diff/resvg/paint-servers/stop/no-stop-color.png", false), 0)}
#[test] fn resvg_paint_servers_stop_missing_offset_6() {assert_eq!(run_test("svg/resvg/paint-servers/stop/missing-offset-6.svg", "ref/resvg/paint-servers/stop/missing-offset-6.png", "diff/resvg/paint-servers/stop/missing-offset-6.png", false), 0)}
#[test] fn resvg_paint_servers_stop_invalid_offset_2() {assert_eq!(run_test("svg/resvg/paint-servers/stop/invalid-offset-2.svg", "ref/resvg/paint-servers/stop/invalid-offset-2.png", "diff/resvg/paint-servers/stop/invalid-offset-2.png", false), 0)}
#[test] fn resvg_paint_servers_stop_missing_offset_4() {assert_eq!(run_test("svg/resvg/paint-servers/stop/missing-offset-4.svg", "ref/resvg/paint-servers/stop/missing-offset-4.png", "diff/resvg/paint-servers/stop/missing-offset-4.png", false), 0)}
#[test] fn resvg_paint_servers_stop_missing_offset_5() {assert_eq!(run_test("svg/resvg/paint-servers/stop/missing-offset-5.svg", "ref/resvg/paint-servers/stop/missing-offset-5.png", "diff/resvg/paint-servers/stop/missing-offset-5.png", false), 0)}
#[test] fn resvg_paint_servers_stop_stop_color_with_inherit_4() {assert_eq!(run_test("svg/resvg/paint-servers/stop/stop-color-with-inherit-4.svg", "ref/resvg/paint-servers/stop/stop-color-with-inherit-4.png", "diff/resvg/paint-servers/stop/stop-color-with-inherit-4.png", false), 0)}
#[test] fn resvg_paint_servers_stop_offset_with_percent() {assert_eq!(run_test("svg/resvg/paint-servers/stop/offset-with-percent.svg", "ref/resvg/paint-servers/stop/offset-with-percent.png", "diff/resvg/paint-servers/stop/offset-with-percent.png", false), 0)}
#[test] fn resvg_paint_servers_stop_stop_color_with_inherit_5() {assert_eq!(run_test("svg/resvg/paint-servers/stop/stop-color-with-inherit-5.svg", "ref/resvg/paint-servers/stop/stop-color-with-inherit-5.png", "diff/resvg/paint-servers/stop/stop-color-with-inherit-5.png", false), 0)}
#[ignore] #[test] fn resvg_paint_servers_stop_equal_stop_color() {assert_eq!(run_test("svg/resvg/paint-servers/stop/equal-stop-color.svg", "ref/resvg/paint-servers/stop/equal-stop-color.png", "diff/resvg/paint-servers/stop/equal-stop-color.png", false), 0)}
#[test] fn resvg_paint_servers_stop_stop_color_with_inherit_2() {assert_eq!(run_test("svg/resvg/paint-servers/stop/stop-color-with-inherit-2.svg", "ref/resvg/paint-servers/stop/stop-color-with-inherit-2.png", "diff/resvg/paint-servers/stop/stop-color-with-inherit-2.png", false), 0)}
#[test] fn resvg_paint_servers_stop_stop_color_with_inherit_3() {assert_eq!(run_test("svg/resvg/paint-servers/stop/stop-color-with-inherit-3.svg", "ref/resvg/paint-servers/stop/stop-color-with-inherit-3.png", "diff/resvg/paint-servers/stop/stop-color-with-inherit-3.png", false), 0)}
#[test] fn resvg_paint_servers_stop_stop_color_with_inherit_1() {assert_eq!(run_test("svg/resvg/paint-servers/stop/stop-color-with-inherit-1.svg", "ref/resvg/paint-servers/stop/stop-color-with-inherit-1.png", "diff/resvg/paint-servers/stop/stop-color-with-inherit-1.png", false), 0)}
#[test] fn resvg_paint_servers_linearGradient_hsla_color() {assert_eq!(run_test("svg/resvg/paint-servers/linearGradient/hsla-color.svg", "ref/resvg/paint-servers/linearGradient/hsla-color.png", "diff/resvg/paint-servers/linearGradient/hsla-color.png", false), 0)}
#[test] fn resvg_paint_servers_linearGradient_attributes_via_xlink_href_only_required() {assert_eq!(run_test("svg/resvg/paint-servers/linearGradient/attributes-via-xlink-href-only-required.svg", "ref/resvg/paint-servers/linearGradient/attributes-via-xlink-href-only-required.png", "diff/resvg/paint-servers/linearGradient/attributes-via-xlink-href-only-required.png", false), 0)}
#[test] fn resvg_paint_servers_linearGradient_attributes_via_xlink_href() {assert_eq!(run_test("svg/resvg/paint-servers/linearGradient/attributes-via-xlink-href.svg", "ref/resvg/paint-servers/linearGradient/attributes-via-xlink-href.png", "diff/resvg/paint-servers/linearGradient/attributes-via-xlink-href.png", false), 0)}
#[test] fn resvg_paint_servers_linearGradient_gradientTransform_and_transform() {assert_eq!(run_test("svg/resvg/paint-servers/linearGradient/gradientTransform-and-transform.svg", "ref/resvg/paint-servers/linearGradient/gradientTransform-and-transform.png", "diff/resvg/paint-servers/linearGradient/gradientTransform-and-transform.png", false), 0)}
#[test] fn resvg_paint_servers_linearGradient_stops_via_xlink_href() {assert_eq!(run_test("svg/resvg/paint-servers/linearGradient/stops-via-xlink-href.svg", "ref/resvg/paint-servers/linearGradient/stops-via-xlink-href.png", "diff/resvg/paint-servers/linearGradient/stops-via-xlink-href.png", false), 0)}
#[test] fn resvg_paint_servers_linearGradient_no_stops() {assert_eq!(run_test("svg/resvg/paint-servers/linearGradient/no-stops.svg", "ref/resvg/paint-servers/linearGradient/no-stops.png", "diff/resvg/paint-servers/linearGradient/no-stops.png", false), 0)}
#[test] fn resvg_paint_servers_linearGradient_invalid_child_3() {assert_eq!(run_test("svg/resvg/paint-servers/linearGradient/invalid-child-3.svg", "ref/resvg/paint-servers/linearGradient/invalid-child-3.png", "diff/resvg/paint-servers/linearGradient/invalid-child-3.png", false), 0)}
#[test] fn resvg_paint_servers_linearGradient_invalid_child_2() {assert_eq!(run_test("svg/resvg/paint-servers/linearGradient/invalid-child-2.svg", "ref/resvg/paint-servers/linearGradient/invalid-child-2.png", "diff/resvg/paint-servers/linearGradient/invalid-child-2.png", false), 0)}
#[test] fn resvg_paint_servers_linearGradient_spreadMethod_pad() {assert_eq!(run_test("svg/resvg/paint-servers/linearGradient/spreadMethod=pad.svg", "ref/resvg/paint-servers/linearGradient/spreadMethod=pad.png", "diff/resvg/paint-servers/linearGradient/spreadMethod=pad.png", false), 0)}
#[test] fn resvg_paint_servers_linearGradient_invalid_gradientUnits() {assert_eq!(run_test("svg/resvg/paint-servers/linearGradient/invalid-gradientUnits.svg", "ref/resvg/paint-servers/linearGradient/invalid-gradientUnits.png", "diff/resvg/paint-servers/linearGradient/invalid-gradientUnits.png", false), 0)}
#[test] fn resvg_paint_servers_linearGradient_stops_via_xlink_href_complex_order_2() {assert_eq!(run_test("svg/resvg/paint-servers/linearGradient/stops-via-xlink-href-complex-order-2.svg", "ref/resvg/paint-servers/linearGradient/stops-via-xlink-href-complex-order-2.png", "diff/resvg/paint-servers/linearGradient/stops-via-xlink-href-complex-order-2.png", false), 0)}
#[test] fn resvg_paint_servers_linearGradient_invalid_child_1() {assert_eq!(run_test("svg/resvg/paint-servers/linearGradient/invalid-child-1.svg", "ref/resvg/paint-servers/linearGradient/invalid-child-1.png", "diff/resvg/paint-servers/linearGradient/invalid-child-1.png", false), 0)}
#[test] fn resvg_paint_servers_linearGradient_gradientUnits_objectBoundingBox_with_percent() {assert_eq!(run_test("svg/resvg/paint-servers/linearGradient/gradientUnits=objectBoundingBox-with-percent.svg", "ref/resvg/paint-servers/linearGradient/gradientUnits=objectBoundingBox-with-percent.png", "diff/resvg/paint-servers/linearGradient/gradientUnits=objectBoundingBox-with-percent.png", false), 0)}
#[test] fn resvg_paint_servers_linearGradient_invalid_spreadMethod() {assert_eq!(run_test("svg/resvg/paint-servers/linearGradient/invalid-spreadMethod.svg", "ref/resvg/paint-servers/linearGradient/invalid-spreadMethod.png", "diff/resvg/paint-servers/linearGradient/invalid-spreadMethod.png", false), 0)}
#[test] fn resvg_paint_servers_linearGradient_stops_via_xlink_href_complex_order_1() {assert_eq!(run_test("svg/resvg/paint-servers/linearGradient/stops-via-xlink-href-complex-order-1.svg", "ref/resvg/paint-servers/linearGradient/stops-via-xlink-href-complex-order-1.png", "diff/resvg/paint-servers/linearGradient/stops-via-xlink-href-complex-order-1.png", false), 0)}
#[test] fn resvg_paint_servers_linearGradient_many_stops() {assert_eq!(run_test("svg/resvg/paint-servers/linearGradient/many-stops.svg", "ref/resvg/paint-servers/linearGradient/many-stops.png", "diff/resvg/paint-servers/linearGradient/many-stops.png", false), 0)}
#[test] fn resvg_paint_servers_linearGradient_single_stop_with_opacity_used_by_fill() {assert_eq!(run_test("svg/resvg/paint-servers/linearGradient/single-stop-with-opacity-used-by-fill.svg", "ref/resvg/paint-servers/linearGradient/single-stop-with-opacity-used-by-fill.png", "diff/resvg/paint-servers/linearGradient/single-stop-with-opacity-used-by-fill.png", false), 0)}
#[test] fn resvg_paint_servers_linearGradient_stops_via_xlink_href_from_radialGradient() {assert_eq!(run_test("svg/resvg/paint-servers/linearGradient/stops-via-xlink-href-from-radialGradient.svg", "ref/resvg/paint-servers/linearGradient/stops-via-xlink-href-from-radialGradient.png", "diff/resvg/paint-servers/linearGradient/stops-via-xlink-href-from-radialGradient.png", false), 0)}
#[test] fn resvg_paint_servers_linearGradient_gradientTransform() {assert_eq!(run_test("svg/resvg/paint-servers/linearGradient/gradientTransform.svg", "ref/resvg/paint-servers/linearGradient/gradientTransform.png", "diff/resvg/paint-servers/linearGradient/gradientTransform.png", false), 0)}
#[test] fn resvg_paint_servers_linearGradient_gradientUnits_userSpaceOnUse() {assert_eq!(run_test("svg/resvg/paint-servers/linearGradient/gradientUnits=userSpaceOnUse.svg", "ref/resvg/paint-servers/linearGradient/gradientUnits=userSpaceOnUse.png", "diff/resvg/paint-servers/linearGradient/gradientUnits=userSpaceOnUse.png", false), 0)}
#[test] fn resvg_paint_servers_linearGradient_recursive_xlink_href_3() {assert_eq!(run_test("svg/resvg/paint-servers/linearGradient/recursive-xlink-href-3.svg", "ref/resvg/paint-servers/linearGradient/recursive-xlink-href-3.png", "diff/resvg/paint-servers/linearGradient/recursive-xlink-href-3.png", false), 0)}
#[ignore] #[test] fn resvg_paint_servers_linearGradient_attributes_via_xlink_href_from_radialGradient() {assert_eq!(run_test("svg/resvg/paint-servers/linearGradient/attributes-via-xlink-href-from-radialGradient.svg", "ref/resvg/paint-servers/linearGradient/attributes-via-xlink-href-from-radialGradient.png", "diff/resvg/paint-servers/linearGradient/attributes-via-xlink-href-from-radialGradient.png", false), 0)}
#[test] fn resvg_paint_servers_linearGradient_recursive_xlink_href_2() {assert_eq!(run_test("svg/resvg/paint-servers/linearGradient/recursive-xlink-href-2.svg", "ref/resvg/paint-servers/linearGradient/recursive-xlink-href-2.png", "diff/resvg/paint-servers/linearGradient/recursive-xlink-href-2.png", false), 0)}
#[test] fn resvg_paint_servers_linearGradient_recursive_xlink_href_1() {assert_eq!(run_test("svg/resvg/paint-servers/linearGradient/recursive-xlink-href-1.svg", "ref/resvg/paint-servers/linearGradient/recursive-xlink-href-1.png", "diff/resvg/paint-servers/linearGradient/recursive-xlink-href-1.png", false), 0)}
#[test] fn resvg_paint_servers_linearGradient_single_stop_with_opacity_used_by_stroke() {assert_eq!(run_test("svg/resvg/paint-servers/linearGradient/single-stop-with-opacity-used-by-stroke.svg", "ref/resvg/paint-servers/linearGradient/single-stop-with-opacity-used-by-stroke.png", "diff/resvg/paint-servers/linearGradient/single-stop-with-opacity-used-by-stroke.png", false), 0)}
#[test] fn resvg_paint_servers_linearGradient_single_stop() {assert_eq!(run_test("svg/resvg/paint-servers/linearGradient/single-stop.svg", "ref/resvg/paint-servers/linearGradient/single-stop.png", "diff/resvg/paint-servers/linearGradient/single-stop.png", false), 0)}
#[ignore] #[test] fn resvg_paint_servers_linearGradient_invalid_gradientTransform() {assert_eq!(run_test("svg/resvg/paint-servers/linearGradient/invalid-gradientTransform.svg", "ref/resvg/paint-servers/linearGradient/invalid-gradientTransform.png", "diff/resvg/paint-servers/linearGradient/invalid-gradientTransform.png", false), 0)}
#[test] fn resvg_paint_servers_linearGradient_stops_via_xlink_href_from_rect() {assert_eq!(run_test("svg/resvg/paint-servers/linearGradient/stops-via-xlink-href-from-rect.svg", "ref/resvg/paint-servers/linearGradient/stops-via-xlink-href-from-rect.png", "diff/resvg/paint-servers/linearGradient/stops-via-xlink-href-from-rect.png", false), 0)}
#[ignore] #[test] fn resvg_paint_servers_linearGradient_spreadMethod_repeat() {assert_eq!(run_test("svg/resvg/paint-servers/linearGradient/spreadMethod=repeat.svg", "ref/resvg/paint-servers/linearGradient/spreadMethod=repeat.png", "diff/resvg/paint-servers/linearGradient/spreadMethod=repeat.png", false), 0)}
#[test] fn resvg_paint_servers_linearGradient_unresolved_xlink_href() {assert_eq!(run_test("svg/resvg/paint-servers/linearGradient/unresolved-xlink-href.svg", "ref/resvg/paint-servers/linearGradient/unresolved-xlink-href.png", "diff/resvg/paint-servers/linearGradient/unresolved-xlink-href.png", false), 0)}
#[test] fn resvg_paint_servers_linearGradient_invalid_xlink_href() {assert_eq!(run_test("svg/resvg/paint-servers/linearGradient/invalid-xlink-href.svg", "ref/resvg/paint-servers/linearGradient/invalid-xlink-href.png", "diff/resvg/paint-servers/linearGradient/invalid-xlink-href.png", false), 0)}
#[test] fn resvg_paint_servers_linearGradient_attributes_via_xlink_href_from_rect() {assert_eq!(run_test("svg/resvg/paint-servers/linearGradient/attributes-via-xlink-href-from-rect.svg", "ref/resvg/paint-servers/linearGradient/attributes-via-xlink-href-from-rect.png", "diff/resvg/paint-servers/linearGradient/attributes-via-xlink-href-from-rect.png", false), 0)}
#[ignore] #[test] fn resvg_paint_servers_linearGradient_single_stop_with_opacity_used_by_fill_and_stroke() {assert_eq!(run_test("svg/resvg/paint-servers/linearGradient/single-stop-with-opacity-used-by-fill-and-stroke.svg", "ref/resvg/paint-servers/linearGradient/single-stop-with-opacity-used-by-fill-and-stroke.png", "diff/resvg/paint-servers/linearGradient/single-stop-with-opacity-used-by-fill-and-stroke.png", false), 0)}
#[ignore] #[test] fn resvg_paint_servers_linearGradient_attributes_via_xlink_href_complex_order() {assert_eq!(run_test("svg/resvg/paint-servers/linearGradient/attributes-via-xlink-href-complex-order.svg", "ref/resvg/paint-servers/linearGradient/attributes-via-xlink-href-complex-order.png", "diff/resvg/paint-servers/linearGradient/attributes-via-xlink-href-complex-order.png", false), 0)}
#[test] fn resvg_paint_servers_linearGradient_gradientUnits_userSpaceOnUse_with_percent() {assert_eq!(run_test("svg/resvg/paint-servers/linearGradient/gradientUnits=userSpaceOnUse-with-percent.svg", "ref/resvg/paint-servers/linearGradient/gradientUnits=userSpaceOnUse-with-percent.png", "diff/resvg/paint-servers/linearGradient/gradientUnits=userSpaceOnUse-with-percent.png", false), 0)}
#[test] fn resvg_paint_servers_linearGradient_self_recursive_xlink_href() {assert_eq!(run_test("svg/resvg/paint-servers/linearGradient/self-recursive-xlink-href.svg", "ref/resvg/paint-servers/linearGradient/self-recursive-xlink-href.png", "diff/resvg/paint-servers/linearGradient/self-recursive-xlink-href.png", false), 0)}
#[ignore] #[test] fn resvg_paint_servers_linearGradient_spreadMethod_reflect() {assert_eq!(run_test("svg/resvg/paint-servers/linearGradient/spreadMethod=reflect.svg", "ref/resvg/paint-servers/linearGradient/spreadMethod=reflect.png", "diff/resvg/paint-servers/linearGradient/spreadMethod=reflect.png", false), 0)}
#[test] fn resvg_paint_servers_linearGradient_default_attributes() {assert_eq!(run_test("svg/resvg/paint-servers/linearGradient/default-attributes.svg", "ref/resvg/paint-servers/linearGradient/default-attributes.png", "diff/resvg/paint-servers/linearGradient/default-attributes.png", false), 0)}
#[test] fn resvg_paint_servers_stop_color_simple_case() {assert_eq!(run_test("svg/resvg/paint-servers/stop-color/simple-case.svg", "ref/resvg/paint-servers/stop-color/simple-case.png", "diff/resvg/paint-servers/stop-color/simple-case.png", false), 0)}
#[test] fn resvg_paint_servers_pattern_display_none_on_child() {assert_eq!(run_test("svg/resvg/paint-servers/pattern/display=none-on-child.svg", "ref/resvg/paint-servers/pattern/display=none-on-child.png", "diff/resvg/paint-servers/pattern/display=none-on-child.png", false), 0)}
#[test] fn resvg_paint_servers_pattern_transform_and_patternTransform() {assert_eq!(run_test("svg/resvg/paint-servers/pattern/transform-and-patternTransform.svg", "ref/resvg/paint-servers/pattern/transform-and-patternTransform.png", "diff/resvg/paint-servers/pattern/transform-and-patternTransform.png", false), 0)}
#[test] fn resvg_paint_servers_pattern_recursive_on_child() {assert_eq!(run_test("svg/resvg/paint-servers/pattern/recursive-on-child.svg", "ref/resvg/paint-servers/pattern/recursive-on-child.png", "diff/resvg/paint-servers/pattern/recursive-on-child.png", false), 0)}
#[test] fn resvg_paint_servers_pattern_patternUnits_userSpaceOnUse_with_percent() {assert_eq!(run_test("svg/resvg/paint-servers/pattern/patternUnits=userSpaceOnUse-with-percent.svg", "ref/resvg/paint-servers/pattern/patternUnits=userSpaceOnUse-with-percent.png", "diff/resvg/paint-servers/pattern/patternUnits=userSpaceOnUse-with-percent.png", false), 0)}
#[test] fn resvg_paint_servers_pattern_with_viewBox() {assert_eq!(run_test("svg/resvg/paint-servers/pattern/with-viewBox.svg", "ref/resvg/paint-servers/pattern/with-viewBox.png", "diff/resvg/paint-servers/pattern/with-viewBox.png", false), 0)}
#[test] fn resvg_paint_servers_pattern_no_children() {assert_eq!(run_test("svg/resvg/paint-servers/pattern/no-children.svg", "ref/resvg/paint-servers/pattern/no-children.png", "diff/resvg/paint-servers/pattern/no-children.png", false), 0)}
#[test] fn resvg_paint_servers_pattern_attributes_via_xlink_href() {assert_eq!(run_test("svg/resvg/paint-servers/pattern/attributes-via-xlink-href.svg", "ref/resvg/paint-servers/pattern/attributes-via-xlink-href.png", "diff/resvg/paint-servers/pattern/attributes-via-xlink-href.png", false), 0)}
#[test] fn resvg_paint_servers_pattern_tiny_pattern_upscaled() {assert_eq!(run_test("svg/resvg/paint-servers/pattern/tiny-pattern-upscaled.svg", "ref/resvg/paint-servers/pattern/tiny-pattern-upscaled.png", "diff/resvg/paint-servers/pattern/tiny-pattern-upscaled.png", false), 0)}
#[test] fn resvg_paint_servers_pattern_patternContentUnits_objectBoundingBox() {assert_eq!(run_test("svg/resvg/paint-servers/pattern/patternContentUnits=objectBoundingBox.svg", "ref/resvg/paint-servers/pattern/patternContentUnits=objectBoundingBox.png", "diff/resvg/paint-servers/pattern/patternContentUnits=objectBoundingBox.png", false), 0)}
#[test] fn resvg_paint_servers_pattern_patternUnits_objectBoundingBox_with_percent() {assert_eq!(run_test("svg/resvg/paint-servers/pattern/patternUnits=objectBoundingBox-with-percent.svg", "ref/resvg/paint-servers/pattern/patternUnits=objectBoundingBox-with-percent.png", "diff/resvg/paint-servers/pattern/patternUnits=objectBoundingBox-with-percent.png", false), 0)}
#[test] fn resvg_paint_servers_pattern_patternContentUnits_with_viewBox() {assert_eq!(run_test("svg/resvg/paint-servers/pattern/patternContentUnits-with-viewBox.svg", "ref/resvg/paint-servers/pattern/patternContentUnits-with-viewBox.png", "diff/resvg/paint-servers/pattern/patternContentUnits-with-viewBox.png", false), 0)}
#[test] fn resvg_paint_servers_pattern_everything_via_xlink_href() {assert_eq!(run_test("svg/resvg/paint-servers/pattern/everything-via-xlink-href.svg", "ref/resvg/paint-servers/pattern/everything-via-xlink-href.png", "diff/resvg/paint-servers/pattern/everything-via-xlink-href.png", false), 0)}
#[test] fn resvg_paint_servers_pattern_out_of_order_referencing() {assert_eq!(run_test("svg/resvg/paint-servers/pattern/out-of-order-referencing.svg", "ref/resvg/paint-servers/pattern/out-of-order-referencing.png", "diff/resvg/paint-servers/pattern/out-of-order-referencing.png", false), 0)}
#[test] fn resvg_paint_servers_pattern_with_patternTransform() {assert_eq!(run_test("svg/resvg/paint-servers/pattern/with-patternTransform.svg", "ref/resvg/paint-servers/pattern/with-patternTransform.png", "diff/resvg/paint-servers/pattern/with-patternTransform.png", false), 0)}
#[test] fn resvg_paint_servers_pattern_with_x_and_y() {assert_eq!(run_test("svg/resvg/paint-servers/pattern/with-x-and-y.svg", "ref/resvg/paint-servers/pattern/with-x-and-y.png", "diff/resvg/paint-servers/pattern/with-x-and-y.png", false), 0)}
#[ignore] #[test] fn resvg_paint_servers_pattern_nested_objectBoundingBox() {assert_eq!(run_test("svg/resvg/paint-servers/pattern/nested-objectBoundingBox.svg", "ref/resvg/paint-servers/pattern/nested-objectBoundingBox.png", "diff/resvg/paint-servers/pattern/nested-objectBoundingBox.png", false), 0)}
#[test] fn resvg_paint_servers_pattern_preserveAspectRatio() {assert_eq!(run_test("svg/resvg/paint-servers/pattern/preserveAspectRatio.svg", "ref/resvg/paint-servers/pattern/preserveAspectRatio.png", "diff/resvg/paint-servers/pattern/preserveAspectRatio.png", false), 0)}
#[test] fn resvg_paint_servers_pattern_simple_case() {assert_eq!(run_test("svg/resvg/paint-servers/pattern/simple-case.svg", "ref/resvg/paint-servers/pattern/simple-case.png", "diff/resvg/paint-servers/pattern/simple-case.png", false), 0)}
#[test] fn resvg_paint_servers_pattern_missing_width() {assert_eq!(run_test("svg/resvg/paint-servers/pattern/missing-width.svg", "ref/resvg/paint-servers/pattern/missing-width.png", "diff/resvg/paint-servers/pattern/missing-width.png", false), 0)}
#[test] fn resvg_paint_servers_pattern_missing_height() {assert_eq!(run_test("svg/resvg/paint-servers/pattern/missing-height.svg", "ref/resvg/paint-servers/pattern/missing-height.png", "diff/resvg/paint-servers/pattern/missing-height.png", false), 0)}
#[test] fn resvg_paint_servers_pattern_patternUnits_objectBoundingBox() {assert_eq!(run_test("svg/resvg/paint-servers/pattern/patternUnits=objectBoundingBox.svg", "ref/resvg/paint-servers/pattern/patternUnits=objectBoundingBox.png", "diff/resvg/paint-servers/pattern/patternUnits=objectBoundingBox.png", false), 0)}
#[test] fn resvg_paint_servers_pattern_children_via_xlink_href() {assert_eq!(run_test("svg/resvg/paint-servers/pattern/children-via-xlink-href.svg", "ref/resvg/paint-servers/pattern/children-via-xlink-href.png", "diff/resvg/paint-servers/pattern/children-via-xlink-href.png", false), 0)}
#[test] fn resvg_paint_servers_pattern_invalid_patternUnits_and_patternContentUnits() {assert_eq!(run_test("svg/resvg/paint-servers/pattern/invalid-patternUnits-and-patternContentUnits.svg", "ref/resvg/paint-servers/pattern/invalid-patternUnits-and-patternContentUnits.png", "diff/resvg/paint-servers/pattern/invalid-patternUnits-and-patternContentUnits.png", false), 0)}
#[test] fn resvg_paint_servers_pattern_pattern_on_child() {assert_eq!(run_test("svg/resvg/paint-servers/pattern/pattern-on-child.svg", "ref/resvg/paint-servers/pattern/pattern-on-child.png", "diff/resvg/paint-servers/pattern/pattern-on-child.png", false), 0)}
#[ignore] #[test] fn resvg_paint_servers_pattern_overflow_visible() {assert_eq!(run_test("svg/resvg/paint-servers/pattern/overflow=visible.svg", "ref/resvg/paint-servers/pattern/overflow=visible.png", "diff/resvg/paint-servers/pattern/overflow=visible.png", false), 0)}
#[test] fn resvg_paint_servers_pattern_child_with_invalid_FuncIRI() {assert_eq!(run_test("svg/resvg/paint-servers/pattern/child-with-invalid-FuncIRI.svg", "ref/resvg/paint-servers/pattern/child-with-invalid-FuncIRI.png", "diff/resvg/paint-servers/pattern/child-with-invalid-FuncIRI.png", false), 0)}
#[test] fn resvg_paint_servers_pattern_self_recursive() {assert_eq!(run_test("svg/resvg/paint-servers/pattern/self-recursive.svg", "ref/resvg/paint-servers/pattern/self-recursive.png", "diff/resvg/paint-servers/pattern/self-recursive.png", false), 0)}
#[test] fn resvg_paint_servers_pattern_text_child() {assert_eq!(run_test("svg/resvg/paint-servers/pattern/text-child.svg", "ref/resvg/paint-servers/pattern/text-child.png", "diff/resvg/paint-servers/pattern/text-child.png", false), 0)}
#[test] fn resvg_paint_servers_pattern_viewBox_via_xlink_href() {assert_eq!(run_test("svg/resvg/paint-servers/pattern/viewBox-via-xlink-href.svg", "ref/resvg/paint-servers/pattern/viewBox-via-xlink-href.png", "diff/resvg/paint-servers/pattern/viewBox-via-xlink-href.png", false), 0)}
#[test] fn resvg_paint_servers_pattern_self_recursive_on_child() {assert_eq!(run_test("svg/resvg/paint-servers/pattern/self-recursive-on-child.svg", "ref/resvg/paint-servers/pattern/self-recursive-on-child.png", "diff/resvg/paint-servers/pattern/self-recursive-on-child.png", false), 0)}
#[test] fn resvg_shapes_rect_with_child() {assert_eq!(run_test("svg/resvg/shapes/rect/with-child.svg", "ref/resvg/shapes/rect/with-child.png", "diff/resvg/shapes/rect/with-child.png", false), 0)}
#[test] fn resvg_shapes_rect_y_attribute_resolving() {assert_eq!(run_test("svg/resvg/shapes/rect/y-attribute-resolving.svg", "ref/resvg/shapes/rect/y-attribute-resolving.png", "diff/resvg/shapes/rect/y-attribute-resolving.png", false), 0)}
#[ignore] #[test] fn resvg_shapes_rect_vi_and_vb_values() {assert_eq!(run_test("svg/resvg/shapes/rect/vi-and-vb-values.svg", "ref/resvg/shapes/rect/vi-and-vb-values.png", "diff/resvg/shapes/rect/vi-and-vb-values.png", false), 0)}
#[test] fn resvg_shapes_rect_ry_attribute_resolving() {assert_eq!(run_test("svg/resvg/shapes/rect/ry-attribute-resolving.svg", "ref/resvg/shapes/rect/ry-attribute-resolving.png", "diff/resvg/shapes/rect/ry-attribute-resolving.png", false), 0)}
#[test] fn resvg_shapes_rect_ry_attribute_clamping() {assert_eq!(run_test("svg/resvg/shapes/rect/ry-attribute-clamping.svg", "ref/resvg/shapes/rect/ry-attribute-clamping.png", "diff/resvg/shapes/rect/ry-attribute-clamping.png", false), 0)}
#[ignore] #[test] fn resvg_shapes_rect_ch_values() {assert_eq!(run_test("svg/resvg/shapes/rect/ch-values.svg", "ref/resvg/shapes/rect/ch-values.png", "diff/resvg/shapes/rect/ch-values.png", false), 0)}
#[ignore] #[test] fn resvg_shapes_rect_cap_values() {assert_eq!(run_test("svg/resvg/shapes/rect/cap-values.svg", "ref/resvg/shapes/rect/cap-values.png", "diff/resvg/shapes/rect/cap-values.png", false), 0)}
#[test] fn resvg_shapes_rect_zero_width_attribute_processing() {assert_eq!(run_test("svg/resvg/shapes/rect/zero-width-attribute-processing.svg", "ref/resvg/shapes/rect/zero-width-attribute-processing.png", "diff/resvg/shapes/rect/zero-width-attribute-processing.png", false), 0)}
#[test] fn resvg_shapes_rect_zero_rx_attribute_resolving() {assert_eq!(run_test("svg/resvg/shapes/rect/zero-rx-attribute-resolving.svg", "ref/resvg/shapes/rect/zero-rx-attribute-resolving.png", "diff/resvg/shapes/rect/zero-rx-attribute-resolving.png", false), 0)}
#[test] fn resvg_shapes_rect_em_values() {assert_eq!(run_test("svg/resvg/shapes/rect/em-values.svg", "ref/resvg/shapes/rect/em-values.png", "diff/resvg/shapes/rect/em-values.png", false), 0)}
#[test] fn resvg_shapes_rect_invalid_length() {assert_eq!(run_test("svg/resvg/shapes/rect/invalid-length.svg", "ref/resvg/shapes/rect/invalid-length.png", "diff/resvg/shapes/rect/invalid-length.png", false), 0)}
#[test] fn resvg_shapes_rect_rx_attribute_clamping() {assert_eq!(run_test("svg/resvg/shapes/rect/rx-attribute-clamping.svg", "ref/resvg/shapes/rect/rx-attribute-clamping.png", "diff/resvg/shapes/rect/rx-attribute-clamping.png", false), 0)}
#[test] fn resvg_shapes_rect_negative_rx_attribute_resolving() {assert_eq!(run_test("svg/resvg/shapes/rect/negative-rx-attribute-resolving.svg", "ref/resvg/shapes/rect/negative-rx-attribute-resolving.png", "diff/resvg/shapes/rect/negative-rx-attribute-resolving.png", false), 0)}
#[ignore] #[test] fn resvg_shapes_rect_lh_values() {assert_eq!(run_test("svg/resvg/shapes/rect/lh-values.svg", "ref/resvg/shapes/rect/lh-values.png", "diff/resvg/shapes/rect/lh-values.png", false), 0)}
#[ignore] #[test] fn resvg_shapes_rect_vw_and_vh_values() {assert_eq!(run_test("svg/resvg/shapes/rect/vw-and-vh-values.svg", "ref/resvg/shapes/rect/vw-and-vh-values.png", "diff/resvg/shapes/rect/vw-and-vh-values.png", false), 0)}
#[test] fn resvg_shapes_rect_simple_case() {assert_eq!(run_test("svg/resvg/shapes/rect/simple-case.svg", "ref/resvg/shapes/rect/simple-case.png", "diff/resvg/shapes/rect/simple-case.png", false), 0)}
#[test] fn resvg_shapes_rect_negative_width_attribute_processing() {assert_eq!(run_test("svg/resvg/shapes/rect/negative-width-attribute-processing.svg", "ref/resvg/shapes/rect/negative-width-attribute-processing.png", "diff/resvg/shapes/rect/negative-width-attribute-processing.png", false), 0)}
#[test] fn resvg_shapes_rect_rounded_rect() {assert_eq!(run_test("svg/resvg/shapes/rect/rounded-rect.svg", "ref/resvg/shapes/rect/rounded-rect.png", "diff/resvg/shapes/rect/rounded-rect.png", false), 0)}
#[test] fn resvg_shapes_rect_missing_height_attribute_processing() {assert_eq!(run_test("svg/resvg/shapes/rect/missing-height-attribute-processing.svg", "ref/resvg/shapes/rect/missing-height-attribute-processing.png", "diff/resvg/shapes/rect/missing-height-attribute-processing.png", false), 0)}
#[test] fn resvg_shapes_rect_ex_values() {assert_eq!(run_test("svg/resvg/shapes/rect/ex-values.svg", "ref/resvg/shapes/rect/ex-values.png", "diff/resvg/shapes/rect/ex-values.png", false), 0)}
#[test] fn resvg_shapes_rect_negative_rx_and_ry_attributes_resolving() {assert_eq!(run_test("svg/resvg/shapes/rect/negative-rx-and-ry-attributes-resolving.svg", "ref/resvg/shapes/rect/negative-rx-and-ry-attributes-resolving.png", "diff/resvg/shapes/rect/negative-rx-and-ry-attributes-resolving.png", false), 0)}
#[test] fn resvg_shapes_rect_negative_height_attribute_processing() {assert_eq!(run_test("svg/resvg/shapes/rect/negative-height-attribute-processing.svg", "ref/resvg/shapes/rect/negative-height-attribute-processing.png", "diff/resvg/shapes/rect/negative-height-attribute-processing.png", false), 0)}
#[test] fn resvg_shapes_rect_rx_attribute_resolving() {assert_eq!(run_test("svg/resvg/shapes/rect/rx-attribute-resolving.svg", "ref/resvg/shapes/rect/rx-attribute-resolving.png", "diff/resvg/shapes/rect/rx-attribute-resolving.png", false), 0)}
#[test] fn resvg_shapes_rect_x_attribute_resolving() {assert_eq!(run_test("svg/resvg/shapes/rect/x-attribute-resolving.svg", "ref/resvg/shapes/rect/x-attribute-resolving.png", "diff/resvg/shapes/rect/x-attribute-resolving.png", false), 0)}
#[ignore] #[test] fn resvg_shapes_rect_rlh_values() {assert_eq!(run_test("svg/resvg/shapes/rect/rlh-values.svg", "ref/resvg/shapes/rect/rlh-values.png", "diff/resvg/shapes/rect/rlh-values.png", false), 0)}
#[ignore] #[test] fn resvg_shapes_rect_vmin_and_vmax_values() {assert_eq!(run_test("svg/resvg/shapes/rect/vmin-and-vmax-values.svg", "ref/resvg/shapes/rect/vmin-and-vmax-values.png", "diff/resvg/shapes/rect/vmin-and-vmax-values.png", false), 0)}
#[test] fn resvg_shapes_rect_percentage_values_2() {assert_eq!(run_test("svg/resvg/shapes/rect/percentage-values-2.svg", "ref/resvg/shapes/rect/percentage-values-2.png", "diff/resvg/shapes/rect/percentage-values-2.png", false), 0)}
#[test] fn resvg_shapes_rect_negative_ry_attribute_resolving() {assert_eq!(run_test("svg/resvg/shapes/rect/negative-ry-attribute-resolving.svg", "ref/resvg/shapes/rect/negative-ry-attribute-resolving.png", "diff/resvg/shapes/rect/negative-ry-attribute-resolving.png", false), 0)}
#[test] fn resvg_shapes_rect_zero_height_attribute_processing() {assert_eq!(run_test("svg/resvg/shapes/rect/zero-height-attribute-processing.svg", "ref/resvg/shapes/rect/zero-height-attribute-processing.png", "diff/resvg/shapes/rect/zero-height-attribute-processing.png", false), 0)}
#[ignore] #[test] fn resvg_shapes_rect_q_values() {assert_eq!(run_test("svg/resvg/shapes/rect/q-values.svg", "ref/resvg/shapes/rect/q-values.png", "diff/resvg/shapes/rect/q-values.png", false), 0)}
#[test] fn resvg_shapes_rect_rx_and_ry_attributes_clamping_order() {assert_eq!(run_test("svg/resvg/shapes/rect/rx-and-ry-attributes-clamping-order.svg", "ref/resvg/shapes/rect/rx-and-ry-attributes-clamping-order.png", "diff/resvg/shapes/rect/rx-and-ry-attributes-clamping-order.png", false), 0)}
#[test] fn resvg_shapes_rect_missing_width_attribute_processing() {assert_eq!(run_test("svg/resvg/shapes/rect/missing-width-attribute-processing.svg", "ref/resvg/shapes/rect/missing-width-attribute-processing.png", "diff/resvg/shapes/rect/missing-width-attribute-processing.png", false), 0)}
#[test] fn resvg_shapes_rect_percentage_values_1() {assert_eq!(run_test("svg/resvg/shapes/rect/percentage-values-1.svg", "ref/resvg/shapes/rect/percentage-values-1.png", "diff/resvg/shapes/rect/percentage-values-1.png", false), 0)}
#[ignore] #[test] fn resvg_shapes_rect_rem_values() {assert_eq!(run_test("svg/resvg/shapes/rect/rem-values.svg", "ref/resvg/shapes/rect/rem-values.png", "diff/resvg/shapes/rect/rem-values.png", false), 0)}
#[test] fn resvg_shapes_rect_zero_ry_attribute_resolving() {assert_eq!(run_test("svg/resvg/shapes/rect/zero-ry-attribute-resolving.svg", "ref/resvg/shapes/rect/zero-ry-attribute-resolving.png", "diff/resvg/shapes/rect/zero-ry-attribute-resolving.png", false), 0)}
#[test] fn resvg_shapes_rect_mm_values() {assert_eq!(run_test("svg/resvg/shapes/rect/mm-values.svg", "ref/resvg/shapes/rect/mm-values.png", "diff/resvg/shapes/rect/mm-values.png", false), 0)}
#[test] fn resvg_shapes_rect_invalid_coordinates() {assert_eq!(run_test("svg/resvg/shapes/rect/invalid-coordinates.svg", "ref/resvg/shapes/rect/invalid-coordinates.png", "diff/resvg/shapes/rect/invalid-coordinates.png", false), 0)}
#[test] fn resvg_shapes_polyline_not_enough_points() {assert_eq!(run_test("svg/resvg/shapes/polyline/not-enough-points.svg", "ref/resvg/shapes/polyline/not-enough-points.png", "diff/resvg/shapes/polyline/not-enough-points.png", false), 0)}
#[test] fn resvg_shapes_polyline_missing_points_attribute() {assert_eq!(run_test("svg/resvg/shapes/polyline/missing-points-attribute.svg", "ref/resvg/shapes/polyline/missing-points-attribute.png", "diff/resvg/shapes/polyline/missing-points-attribute.png", false), 0)}
#[test] fn resvg_shapes_polyline_stop_processing_on_invalid_data() {assert_eq!(run_test("svg/resvg/shapes/polyline/stop-processing-on-invalid-data.svg", "ref/resvg/shapes/polyline/stop-processing-on-invalid-data.png", "diff/resvg/shapes/polyline/stop-processing-on-invalid-data.png", false), 0)}
#[test] fn resvg_shapes_polyline_ignore_odd_points() {assert_eq!(run_test("svg/resvg/shapes/polyline/ignore-odd-points.svg", "ref/resvg/shapes/polyline/ignore-odd-points.png", "diff/resvg/shapes/polyline/ignore-odd-points.png", false), 0)}
#[test] fn resvg_shapes_polyline_simple_case() {assert_eq!(run_test("svg/resvg/shapes/polyline/simple-case.svg", "ref/resvg/shapes/polyline/simple-case.png", "diff/resvg/shapes/polyline/simple-case.png", false), 0)}
#[test] fn resvg_shapes_path_M_V_V_implicit() {assert_eq!(run_test("svg/resvg/shapes/path/M-V-V-implicit.svg", "ref/resvg/shapes/path/M-V-V-implicit.png", "diff/resvg/shapes/path/M-V-V-implicit.png", false), 0)}
#[test] fn resvg_shapes_path_M_S_S() {assert_eq!(run_test("svg/resvg/shapes/path/M-S-S.svg", "ref/resvg/shapes/path/M-S-S.png", "diff/resvg/shapes/path/M-S-S.png", false), 0)}
#[test] fn resvg_shapes_path_no_commawsp_between_arc_flags() {assert_eq!(run_test("svg/resvg/shapes/path/no-commawsp-between-arc-flags.svg", "ref/resvg/shapes/path/no-commawsp-between-arc-flags.png", "diff/resvg/shapes/path/no-commawsp-between-arc-flags.png", false), 0)}
#[test] fn resvg_shapes_path_M_L_L_Z_rel() {assert_eq!(run_test("svg/resvg/shapes/path/M-L-L-Z-rel.svg", "ref/resvg/shapes/path/M-L-L-Z-rel.png", "diff/resvg/shapes/path/M-L-L-Z-rel.png", false), 0)}
#[test] fn resvg_shapes_path_M_H() {assert_eq!(run_test("svg/resvg/shapes/path/M-H.svg", "ref/resvg/shapes/path/M-H.png", "diff/resvg/shapes/path/M-H.png", false), 0)}
#[test] fn resvg_shapes_path_M_L_Z_L_L() {assert_eq!(run_test("svg/resvg/shapes/path/M-L-Z-L-L.svg", "ref/resvg/shapes/path/M-L-Z-L-L.png", "diff/resvg/shapes/path/M-L-Z-L-L.png", false), 0)}
#[test] fn resvg_shapes_path_extra_spaces() {assert_eq!(run_test("svg/resvg/shapes/path/extra-spaces.svg", "ref/resvg/shapes/path/extra-spaces.png", "diff/resvg/shapes/path/extra-spaces.png", false), 0)}
#[test] fn resvg_shapes_path_missing_coordinate_in_L() {assert_eq!(run_test("svg/resvg/shapes/path/missing-coordinate-in-L.svg", "ref/resvg/shapes/path/missing-coordinate-in-L.png", "diff/resvg/shapes/path/missing-coordinate-in-L.png", false), 0)}
#[test] fn resvg_shapes_path_M_Z() {assert_eq!(run_test("svg/resvg/shapes/path/M-Z.svg", "ref/resvg/shapes/path/M-Z.png", "diff/resvg/shapes/path/M-Z.png", false), 0)}
#[test] fn resvg_shapes_path_M_M() {assert_eq!(run_test("svg/resvg/shapes/path/M-M.svg", "ref/resvg/shapes/path/M-M.png", "diff/resvg/shapes/path/M-M.png", false), 0)}
#[test] fn resvg_shapes_path_M_L_L_implicit() {assert_eq!(run_test("svg/resvg/shapes/path/M-L-L-implicit.svg", "ref/resvg/shapes/path/M-L-L-implicit.png", "diff/resvg/shapes/path/M-L-L-implicit.png", false), 0)}
#[test] fn resvg_shapes_path_M_T_S_rel() {assert_eq!(run_test("svg/resvg/shapes/path/M-T-S-rel.svg", "ref/resvg/shapes/path/M-T-S-rel.png", "diff/resvg/shapes/path/M-T-S-rel.png", false), 0)}
#[test] fn resvg_shapes_path_M_L() {assert_eq!(run_test("svg/resvg/shapes/path/M-L.svg", "ref/resvg/shapes/path/M-L.png", "diff/resvg/shapes/path/M-L.png", false), 0)}
#[test] fn resvg_shapes_path_M_Q_T() {assert_eq!(run_test("svg/resvg/shapes/path/M-Q-T.svg", "ref/resvg/shapes/path/M-Q-T.png", "diff/resvg/shapes/path/M-Q-T.png", false), 0)}
#[test] fn resvg_shapes_path_empty() {assert_eq!(run_test("svg/resvg/shapes/path/empty.svg", "ref/resvg/shapes/path/empty.png", "diff/resvg/shapes/path/empty.png", false), 0)}
#[test] fn resvg_shapes_path_M_T_Q_rel() {assert_eq!(run_test("svg/resvg/shapes/path/M-T-Q-rel.svg", "ref/resvg/shapes/path/M-T-Q-rel.png", "diff/resvg/shapes/path/M-T-Q-rel.png", false), 0)}
#[test] fn resvg_shapes_path_numeric_character_references() {assert_eq!(run_test("svg/resvg/shapes/path/numeric-character-references.svg", "ref/resvg/shapes/path/numeric-character-references.png", "diff/resvg/shapes/path/numeric-character-references.png", false), 0)}
#[test] fn resvg_shapes_path_M_Q_T_rel() {assert_eq!(run_test("svg/resvg/shapes/path/M-Q-T-rel.svg", "ref/resvg/shapes/path/M-Q-T-rel.png", "diff/resvg/shapes/path/M-Q-T-rel.png", false), 0)}
#[test] fn resvg_shapes_path_M_V_V() {assert_eq!(run_test("svg/resvg/shapes/path/M-V-V.svg", "ref/resvg/shapes/path/M-V-V.png", "diff/resvg/shapes/path/M-V-V.png", false), 0)}
#[test] fn resvg_shapes_path_M_T_T() {assert_eq!(run_test("svg/resvg/shapes/path/M-T-T.svg", "ref/resvg/shapes/path/M-T-T.png", "diff/resvg/shapes/path/M-T-T.png", false), 0)}
#[test] fn resvg_shapes_path_M() {assert_eq!(run_test("svg/resvg/shapes/path/M.svg", "ref/resvg/shapes/path/M.png", "diff/resvg/shapes/path/M.png", false), 0)}
#[test] fn resvg_shapes_path_M_T_Q() {assert_eq!(run_test("svg/resvg/shapes/path/M-T-Q.svg", "ref/resvg/shapes/path/M-T-Q.png", "diff/resvg/shapes/path/M-T-Q.png", false), 0)}
#[test] fn resvg_shapes_path_M_T_S() {assert_eq!(run_test("svg/resvg/shapes/path/M-T-S.svg", "ref/resvg/shapes/path/M-T-S.png", "diff/resvg/shapes/path/M-T-S.png", false), 0)}
#[test] fn resvg_shapes_path_no_commawsp_between_and_after_arc_flags() {assert_eq!(run_test("svg/resvg/shapes/path/no-commawsp-between-and-after-arc-flags.svg", "ref/resvg/shapes/path/no-commawsp-between-and-after-arc-flags.png", "diff/resvg/shapes/path/no-commawsp-between-and-after-arc-flags.png", false), 0)}
#[test] fn resvg_shapes_path_M_A_trimmed() {assert_eq!(run_test("svg/resvg/shapes/path/M-A-trimmed.svg", "ref/resvg/shapes/path/M-A-trimmed.png", "diff/resvg/shapes/path/M-A-trimmed.png", false), 0)}
#[test] fn resvg_shapes_path_no_commawsp_before_arc_flags() {assert_eq!(run_test("svg/resvg/shapes/path/no-commawsp-before-arc-flags.svg", "ref/resvg/shapes/path/no-commawsp-before-arc-flags.png", "diff/resvg/shapes/path/no-commawsp-before-arc-flags.png", false), 0)}
#[test] fn resvg_shapes_path_M_rel_M_rel_implicit_M_rel_implicit() {assert_eq!(run_test("svg/resvg/shapes/path/M-rel-M-rel-implicit-M-rel-implicit.svg", "ref/resvg/shapes/path/M-rel-M-rel-implicit-M-rel-implicit.png", "diff/resvg/shapes/path/M-rel-M-rel-implicit-M-rel-implicit.png", false), 0)}
#[test] fn resvg_shapes_path_M_C_S() {assert_eq!(run_test("svg/resvg/shapes/path/M-C-S.svg", "ref/resvg/shapes/path/M-C-S.png", "diff/resvg/shapes/path/M-C-S.png", false), 0)}
#[test] fn resvg_shapes_path_M_M_implicit_M_implicit() {assert_eq!(run_test("svg/resvg/shapes/path/M-M-implicit-M-implicit.svg", "ref/resvg/shapes/path/M-M-implicit-M-implicit.png", "diff/resvg/shapes/path/M-M-implicit-M-implicit.png", false), 0)}
#[test] fn resvg_shapes_path_no_commawsp_after_sweep_flag() {assert_eq!(run_test("svg/resvg/shapes/path/no-commawsp-after-sweep-flag.svg", "ref/resvg/shapes/path/no-commawsp-after-sweep-flag.png", "diff/resvg/shapes/path/no-commawsp-after-sweep-flag.png", false), 0)}
#[test] fn resvg_shapes_path_invalid_data_in_L() {assert_eq!(run_test("svg/resvg/shapes/path/invalid-data-in-L.svg", "ref/resvg/shapes/path/invalid-data-in-L.png", "diff/resvg/shapes/path/invalid-data-in-L.png", false), 0)}
#[test] fn resvg_shapes_path_A() {assert_eq!(run_test("svg/resvg/shapes/path/A.svg", "ref/resvg/shapes/path/A.png", "diff/resvg/shapes/path/A.png", false), 0)}
#[test] fn resvg_shapes_path_M_T_T_rel() {assert_eq!(run_test("svg/resvg/shapes/path/M-T-T-rel.svg", "ref/resvg/shapes/path/M-T-T-rel.png", "diff/resvg/shapes/path/M-T-T-rel.png", false), 0)}
#[test] fn resvg_shapes_path_M_H_H_implicit() {assert_eq!(run_test("svg/resvg/shapes/path/M-H-H-implicit.svg", "ref/resvg/shapes/path/M-H-H-implicit.png", "diff/resvg/shapes/path/M-H-H-implicit.png", false), 0)}
#[test] fn resvg_shapes_path_M_M_rel() {assert_eq!(run_test("svg/resvg/shapes/path/M-M-rel.svg", "ref/resvg/shapes/path/M-M-rel.png", "diff/resvg/shapes/path/M-M-rel.png", false), 0)}
#[test] fn resvg_shapes_path_M_L_L_Z() {assert_eq!(run_test("svg/resvg/shapes/path/M-L-L-Z.svg", "ref/resvg/shapes/path/M-L-L-Z.png", "diff/resvg/shapes/path/M-L-L-Z.png", false), 0)}
#[test] fn resvg_shapes_path_M_Q_rel_T_rel() {assert_eq!(run_test("svg/resvg/shapes/path/M-Q-rel-T-rel.svg", "ref/resvg/shapes/path/M-Q-rel-T-rel.png", "diff/resvg/shapes/path/M-Q-rel-T-rel.png", false), 0)}
#[test] fn resvg_shapes_path_multi_line_data() {assert_eq!(run_test("svg/resvg/shapes/path/multi-line-data.svg", "ref/resvg/shapes/path/multi-line-data.png", "diff/resvg/shapes/path/multi-line-data.png", false), 0)}
#[test] fn resvg_shapes_path_out_of_range_sweep_flag_value() {assert_eq!(run_test("svg/resvg/shapes/path/out-of-range-sweep-flag-value.svg", "ref/resvg/shapes/path/out-of-range-sweep-flag-value.png", "diff/resvg/shapes/path/out-of-range-sweep-flag-value.png", false), 0)}
#[test] fn resvg_shapes_path_M_C() {assert_eq!(run_test("svg/resvg/shapes/path/M-C.svg", "ref/resvg/shapes/path/M-C.png", "diff/resvg/shapes/path/M-C.png", false), 0)}
#[test] fn resvg_shapes_path_M_T() {assert_eq!(run_test("svg/resvg/shapes/path/M-T.svg", "ref/resvg/shapes/path/M-T.png", "diff/resvg/shapes/path/M-T.png", false), 0)}
#[test] fn resvg_shapes_path_M_V() {assert_eq!(run_test("svg/resvg/shapes/path/M-V.svg", "ref/resvg/shapes/path/M-V.png", "diff/resvg/shapes/path/M-V.png", false), 0)}
#[test] fn resvg_shapes_path_M_A() {assert_eq!(run_test("svg/resvg/shapes/path/M-A.svg", "ref/resvg/shapes/path/M-A.png", "diff/resvg/shapes/path/M-A.png", false), 0)}
#[test] fn resvg_shapes_path_M_S() {assert_eq!(run_test("svg/resvg/shapes/path/M-S.svg", "ref/resvg/shapes/path/M-S.png", "diff/resvg/shapes/path/M-S.png", false), 0)}
#[test] fn resvg_shapes_path_M_L_Z_A() {assert_eq!(run_test("svg/resvg/shapes/path/M-L-Z-A.svg", "ref/resvg/shapes/path/M-L-Z-A.png", "diff/resvg/shapes/path/M-L-Z-A.png", false), 0)}
#[test] fn resvg_shapes_path_out_of_range_large_arc_flag_value() {assert_eq!(run_test("svg/resvg/shapes/path/out-of-range-large-arc-flag-value.svg", "ref/resvg/shapes/path/out-of-range-large-arc-flag-value.png", "diff/resvg/shapes/path/out-of-range-large-arc-flag-value.png", false), 0)}
#[test] fn resvg_shapes_path_M_L_M_L() {assert_eq!(run_test("svg/resvg/shapes/path/M-L-M-L.svg", "ref/resvg/shapes/path/M-L-M-L.png", "diff/resvg/shapes/path/M-L-M-L.png", false), 0)}
#[test] fn resvg_shapes_path_negative_sweep_flag_value() {assert_eq!(run_test("svg/resvg/shapes/path/negative-sweep-flag-value.svg", "ref/resvg/shapes/path/negative-sweep-flag-value.png", "diff/resvg/shapes/path/negative-sweep-flag-value.png", false), 0)}
#[test] fn resvg_shapes_path_M_rel_M() {assert_eq!(run_test("svg/resvg/shapes/path/M-rel-M.svg", "ref/resvg/shapes/path/M-rel-M.png", "diff/resvg/shapes/path/M-rel-M.png", false), 0)}
#[test] fn resvg_shapes_path_M_L_M_Z() {assert_eq!(run_test("svg/resvg/shapes/path/M-L-M-Z.svg", "ref/resvg/shapes/path/M-L-M-Z.png", "diff/resvg/shapes/path/M-L-M-Z.png", false), 0)}
#[test] fn resvg_shapes_path_negative_large_arc_flag_value() {assert_eq!(run_test("svg/resvg/shapes/path/negative-large-arc-flag-value.svg", "ref/resvg/shapes/path/negative-large-arc-flag-value.png", "diff/resvg/shapes/path/negative-large-arc-flag-value.png", false), 0)}
#[test] fn resvg_shapes_path_M_H_H() {assert_eq!(run_test("svg/resvg/shapes/path/M-H-H.svg", "ref/resvg/shapes/path/M-H-H.png", "diff/resvg/shapes/path/M-H-H.png", false), 0)}
#[test] fn resvg_shapes_path_invalid_transform() {assert_eq!(run_test("svg/resvg/shapes/path/invalid-transform.svg", "ref/resvg/shapes/path/invalid-transform.png", "diff/resvg/shapes/path/invalid-transform.png", false), 0)}
#[test] fn resvg_shapes_path_M_L_M() {assert_eq!(run_test("svg/resvg/shapes/path/M-L-M.svg", "ref/resvg/shapes/path/M-L-M.png", "diff/resvg/shapes/path/M-L-M.png", false), 0)}
#[test] fn resvg_shapes_path_M_Q() {assert_eq!(run_test("svg/resvg/shapes/path/M-Q.svg", "ref/resvg/shapes/path/M-Q.png", "diff/resvg/shapes/path/M-Q.png", false), 0)}
#[test] fn resvg_shapes_polygon_not_enough_points() {assert_eq!(run_test("svg/resvg/shapes/polygon/not-enough-points.svg", "ref/resvg/shapes/polygon/not-enough-points.png", "diff/resvg/shapes/polygon/not-enough-points.png", false), 0)}
#[test] fn resvg_shapes_polygon_missing_points_attribute() {assert_eq!(run_test("svg/resvg/shapes/polygon/missing-points-attribute.svg", "ref/resvg/shapes/polygon/missing-points-attribute.png", "diff/resvg/shapes/polygon/missing-points-attribute.png", false), 0)}
#[test] fn resvg_shapes_polygon_stop_processing_on_invalid_data() {assert_eq!(run_test("svg/resvg/shapes/polygon/stop-processing-on-invalid-data.svg", "ref/resvg/shapes/polygon/stop-processing-on-invalid-data.png", "diff/resvg/shapes/polygon/stop-processing-on-invalid-data.png", false), 0)}
#[test] fn resvg_shapes_polygon_ignore_odd_points() {assert_eq!(run_test("svg/resvg/shapes/polygon/ignore-odd-points.svg", "ref/resvg/shapes/polygon/ignore-odd-points.png", "diff/resvg/shapes/polygon/ignore-odd-points.png", false), 0)}
#[test] fn resvg_shapes_polygon_simple_case() {assert_eq!(run_test("svg/resvg/shapes/polygon/simple-case.svg", "ref/resvg/shapes/polygon/simple-case.png", "diff/resvg/shapes/polygon/simple-case.png", false), 0)}
#[test] fn resvg_shapes_line_no_x1_coordinate() {assert_eq!(run_test("svg/resvg/shapes/line/no-x1-coordinate.svg", "ref/resvg/shapes/line/no-x1-coordinate.png", "diff/resvg/shapes/line/no-x1-coordinate.png", false), 0)}
#[test] fn resvg_shapes_line_no_y2_coordinate() {assert_eq!(run_test("svg/resvg/shapes/line/no-y2-coordinate.svg", "ref/resvg/shapes/line/no-y2-coordinate.png", "diff/resvg/shapes/line/no-y2-coordinate.png", false), 0)}
#[test] fn resvg_shapes_line_no_x2_coordinate() {assert_eq!(run_test("svg/resvg/shapes/line/no-x2-coordinate.svg", "ref/resvg/shapes/line/no-x2-coordinate.png", "diff/resvg/shapes/line/no-x2-coordinate.png", false), 0)}
#[test] fn resvg_shapes_line_percent_units() {assert_eq!(run_test("svg/resvg/shapes/line/percent-units.svg", "ref/resvg/shapes/line/percent-units.png", "diff/resvg/shapes/line/percent-units.png", false), 0)}
#[test] fn resvg_shapes_line_no_x1_and_y1_coordinates() {assert_eq!(run_test("svg/resvg/shapes/line/no-x1-and-y1-coordinates.svg", "ref/resvg/shapes/line/no-x1-and-y1-coordinates.png", "diff/resvg/shapes/line/no-x1-and-y1-coordinates.png", false), 0)}
#[test] fn resvg_shapes_line_no_y1_coordinate() {assert_eq!(run_test("svg/resvg/shapes/line/no-y1-coordinate.svg", "ref/resvg/shapes/line/no-y1-coordinate.png", "diff/resvg/shapes/line/no-y1-coordinate.png", false), 0)}
#[test] fn resvg_shapes_line_simple_case() {assert_eq!(run_test("svg/resvg/shapes/line/simple-case.svg", "ref/resvg/shapes/line/simple-case.png", "diff/resvg/shapes/line/simple-case.png", false), 0)}
#[test] fn resvg_shapes_line_no_coordinates() {assert_eq!(run_test("svg/resvg/shapes/line/no-coordinates.svg", "ref/resvg/shapes/line/no-coordinates.png", "diff/resvg/shapes/line/no-coordinates.png", false), 0)}
#[test] fn resvg_shapes_line_with_transform() {assert_eq!(run_test("svg/resvg/shapes/line/with-transform.svg", "ref/resvg/shapes/line/with-transform.png", "diff/resvg/shapes/line/with-transform.png", false), 0)}
#[test] fn resvg_shapes_line_no_x2_and_y2_coordinates() {assert_eq!(run_test("svg/resvg/shapes/line/no-x2-and-y2-coordinates.svg", "ref/resvg/shapes/line/no-x2-and-y2-coordinates.png", "diff/resvg/shapes/line/no-x2-and-y2-coordinates.png", false), 0)}
#[test] fn resvg_shapes_circle_missing_cx_and_cy_attributes() {assert_eq!(run_test("svg/resvg/shapes/circle/missing-cx-and-cy-attributes.svg", "ref/resvg/shapes/circle/missing-cx-and-cy-attributes.png", "diff/resvg/shapes/circle/missing-cx-and-cy-attributes.png", false), 0)}
#[test] fn resvg_shapes_circle_missing_cx_attribute() {assert_eq!(run_test("svg/resvg/shapes/circle/missing-cx-attribute.svg", "ref/resvg/shapes/circle/missing-cx-attribute.png", "diff/resvg/shapes/circle/missing-cx-attribute.png", false), 0)}
#[test] fn resvg_shapes_circle_simple_case() {assert_eq!(run_test("svg/resvg/shapes/circle/simple-case.svg", "ref/resvg/shapes/circle/simple-case.png", "diff/resvg/shapes/circle/simple-case.png", false), 0)}
#[test] fn resvg_shapes_circle_negative_r_attribute() {assert_eq!(run_test("svg/resvg/shapes/circle/negative-r-attribute.svg", "ref/resvg/shapes/circle/negative-r-attribute.png", "diff/resvg/shapes/circle/negative-r-attribute.png", false), 0)}
#[test] fn resvg_shapes_circle_missing_r_attribute() {assert_eq!(run_test("svg/resvg/shapes/circle/missing-r-attribute.svg", "ref/resvg/shapes/circle/missing-r-attribute.png", "diff/resvg/shapes/circle/missing-r-attribute.png", false), 0)}
#[test] fn resvg_shapes_circle_missing_cy_attribute() {assert_eq!(run_test("svg/resvg/shapes/circle/missing-cy-attribute.svg", "ref/resvg/shapes/circle/missing-cy-attribute.png", "diff/resvg/shapes/circle/missing-cy-attribute.png", false), 0)}
#[test] fn resvg_shapes_ellipse_missing_cx_and_cy_attributes() {assert_eq!(run_test("svg/resvg/shapes/ellipse/missing-cx-and-cy-attributes.svg", "ref/resvg/shapes/ellipse/missing-cx-and-cy-attributes.png", "diff/resvg/shapes/ellipse/missing-cx-and-cy-attributes.png", false), 0)}
#[test] fn resvg_shapes_ellipse_missing_cx_attribute() {assert_eq!(run_test("svg/resvg/shapes/ellipse/missing-cx-attribute.svg", "ref/resvg/shapes/ellipse/missing-cx-attribute.png", "diff/resvg/shapes/ellipse/missing-cx-attribute.png", false), 0)}
#[test] fn resvg_shapes_ellipse_negative_rx_and_ry_attributes() {assert_eq!(run_test("svg/resvg/shapes/ellipse/negative-rx-and-ry-attributes.svg", "ref/resvg/shapes/ellipse/negative-rx-and-ry-attributes.png", "diff/resvg/shapes/ellipse/negative-rx-and-ry-attributes.png", false), 0)}
#[test] fn resvg_shapes_ellipse_negative_ry_attribute() {assert_eq!(run_test("svg/resvg/shapes/ellipse/negative-ry-attribute.svg", "ref/resvg/shapes/ellipse/negative-ry-attribute.png", "diff/resvg/shapes/ellipse/negative-ry-attribute.png", false), 0)}
#[test] fn resvg_shapes_ellipse_percent_values_missing_ry() {assert_eq!(run_test("svg/resvg/shapes/ellipse/percent-values-missing-ry.svg", "ref/resvg/shapes/ellipse/percent-values-missing-ry.png", "diff/resvg/shapes/ellipse/percent-values-missing-ry.png", false), 0)}
#[test] fn resvg_shapes_ellipse_missing_ry_attribute() {assert_eq!(run_test("svg/resvg/shapes/ellipse/missing-ry-attribute.svg", "ref/resvg/shapes/ellipse/missing-ry-attribute.png", "diff/resvg/shapes/ellipse/missing-ry-attribute.png", false), 0)}
#[test] fn resvg_shapes_ellipse_missing_rx_and_ry_attributes() {assert_eq!(run_test("svg/resvg/shapes/ellipse/missing-rx-and-ry-attributes.svg", "ref/resvg/shapes/ellipse/missing-rx-and-ry-attributes.png", "diff/resvg/shapes/ellipse/missing-rx-and-ry-attributes.png", false), 0)}
#[test] fn resvg_shapes_ellipse_simple_case() {assert_eq!(run_test("svg/resvg/shapes/ellipse/simple-case.svg", "ref/resvg/shapes/ellipse/simple-case.png", "diff/resvg/shapes/ellipse/simple-case.png", false), 0)}
#[test] fn resvg_shapes_ellipse_missing_rx_attribute() {assert_eq!(run_test("svg/resvg/shapes/ellipse/missing-rx-attribute.svg", "ref/resvg/shapes/ellipse/missing-rx-attribute.png", "diff/resvg/shapes/ellipse/missing-rx-attribute.png", false), 0)}
#[test] fn resvg_shapes_ellipse_percent_values() {assert_eq!(run_test("svg/resvg/shapes/ellipse/percent-values.svg", "ref/resvg/shapes/ellipse/percent-values.png", "diff/resvg/shapes/ellipse/percent-values.png", false), 0)}
#[test] fn resvg_shapes_ellipse_negative_rx_attribute() {assert_eq!(run_test("svg/resvg/shapes/ellipse/negative-rx-attribute.svg", "ref/resvg/shapes/ellipse/negative-rx-attribute.png", "diff/resvg/shapes/ellipse/negative-rx-attribute.png", false), 0)}
#[test] fn resvg_shapes_ellipse_missing_cy_attribute() {assert_eq!(run_test("svg/resvg/shapes/ellipse/missing-cy-attribute.svg", "ref/resvg/shapes/ellipse/missing-cy-attribute.png", "diff/resvg/shapes/ellipse/missing-cy-attribute.png", false), 0)}
#[test] fn resvg_painting_paint_order_markers_stroke() {assert_eq!(run_test("svg/resvg/painting/paint-order/markers-stroke.svg", "ref/resvg/painting/paint-order/markers-stroke.png", "diff/resvg/painting/paint-order/markers-stroke.png", false), 0)}
#[test] fn resvg_painting_paint_order_on_text() {assert_eq!(run_test("svg/resvg/painting/paint-order/on-text.svg", "ref/resvg/painting/paint-order/on-text.png", "diff/resvg/painting/paint-order/on-text.png", false), 0)}
#[test] fn resvg_painting_paint_order_fill_markers_stroke() {assert_eq!(run_test("svg/resvg/painting/paint-order/fill-markers-stroke.svg", "ref/resvg/painting/paint-order/fill-markers-stroke.png", "diff/resvg/painting/paint-order/fill-markers-stroke.png", false), 0)}
#[test] fn resvg_painting_paint_order_markers() {assert_eq!(run_test("svg/resvg/painting/paint-order/markers.svg", "ref/resvg/painting/paint-order/markers.png", "diff/resvg/painting/paint-order/markers.png", false), 0)}
#[test] fn resvg_painting_paint_order_stroke_markers() {assert_eq!(run_test("svg/resvg/painting/paint-order/stroke-markers.svg", "ref/resvg/painting/paint-order/stroke-markers.png", "diff/resvg/painting/paint-order/stroke-markers.png", false), 0)}
#[test] fn resvg_painting_paint_order_stroke() {assert_eq!(run_test("svg/resvg/painting/paint-order/stroke.svg", "ref/resvg/painting/paint-order/stroke.png", "diff/resvg/painting/paint-order/stroke.png", false), 0)}
#[test] fn resvg_painting_paint_order_on_tspan() {assert_eq!(run_test("svg/resvg/painting/paint-order/on-tspan.svg", "ref/resvg/painting/paint-order/on-tspan.png", "diff/resvg/painting/paint-order/on-tspan.png", false), 0)}
#[test] fn resvg_painting_paint_order_duplicates() {assert_eq!(run_test("svg/resvg/painting/paint-order/duplicates.svg", "ref/resvg/painting/paint-order/duplicates.png", "diff/resvg/painting/paint-order/duplicates.png", false), 0)}
#[test] fn resvg_painting_paint_order_trailing_data() {assert_eq!(run_test("svg/resvg/painting/paint-order/trailing-data.svg", "ref/resvg/painting/paint-order/trailing-data.png", "diff/resvg/painting/paint-order/trailing-data.png", false), 0)}
#[test] fn resvg_painting_paint_order_stroke_markers_fill() {assert_eq!(run_test("svg/resvg/painting/paint-order/stroke-markers-fill.svg", "ref/resvg/painting/paint-order/stroke-markers-fill.png", "diff/resvg/painting/paint-order/stroke-markers-fill.png", false), 0)}
#[test] fn resvg_painting_paint_order_normal() {assert_eq!(run_test("svg/resvg/painting/paint-order/normal.svg", "ref/resvg/painting/paint-order/normal.png", "diff/resvg/painting/paint-order/normal.png", false), 0)}
#[test] fn resvg_painting_paint_order_invalid() {assert_eq!(run_test("svg/resvg/painting/paint-order/invalid.svg", "ref/resvg/painting/paint-order/invalid.png", "diff/resvg/painting/paint-order/invalid.png", false), 0)}
#[test] fn resvg_painting_paint_order_stroke_invalid() {assert_eq!(run_test("svg/resvg/painting/paint-order/stroke-invalid.svg", "ref/resvg/painting/paint-order/stroke-invalid.png", "diff/resvg/painting/paint-order/stroke-invalid.png", false), 0)}
#[test] fn resvg_painting_paint_order_fill() {assert_eq!(run_test("svg/resvg/painting/paint-order/fill.svg", "ref/resvg/painting/paint-order/fill.png", "diff/resvg/painting/paint-order/fill.png", false), 0)}
#[test] fn resvg_painting_shape_rendering_path_with_marker() {assert_eq!(run_test("svg/resvg/painting/shape-rendering/path-with-marker.svg", "ref/resvg/painting/shape-rendering/path-with-marker.png", "diff/resvg/painting/shape-rendering/path-with-marker.png", false), 0)}
#[test] fn resvg_painting_shape_rendering_on_horizontal_line() {assert_eq!(run_test("svg/resvg/painting/shape-rendering/on-horizontal-line.svg", "ref/resvg/painting/shape-rendering/on-horizontal-line.png", "diff/resvg/painting/shape-rendering/on-horizontal-line.png", false), 0)}
#[test] fn resvg_painting_shape_rendering_optimizeSpeed_on_text() {assert_eq!(run_test("svg/resvg/painting/shape-rendering/optimizeSpeed-on-text.svg", "ref/resvg/painting/shape-rendering/optimizeSpeed-on-text.png", "diff/resvg/painting/shape-rendering/optimizeSpeed-on-text.png", false), 0)}
#[test] fn resvg_painting_shape_rendering_inheritance() {assert_eq!(run_test("svg/resvg/painting/shape-rendering/inheritance.svg", "ref/resvg/painting/shape-rendering/inheritance.png", "diff/resvg/painting/shape-rendering/inheritance.png", false), 0)}
#[test] fn resvg_painting_shape_rendering_optimizeSpeed_on_circle() {assert_eq!(run_test("svg/resvg/painting/shape-rendering/optimizeSpeed-on-circle.svg", "ref/resvg/painting/shape-rendering/optimizeSpeed-on-circle.png", "diff/resvg/painting/shape-rendering/optimizeSpeed-on-circle.png", false), 0)}
#[test] fn resvg_painting_shape_rendering_auto_on_circle() {assert_eq!(run_test("svg/resvg/painting/shape-rendering/auto-on-circle.svg", "ref/resvg/painting/shape-rendering/auto-on-circle.png", "diff/resvg/painting/shape-rendering/auto-on-circle.png", false), 0)}
#[test] fn resvg_painting_shape_rendering_geometricPrecision_on_circle() {assert_eq!(run_test("svg/resvg/painting/shape-rendering/geometricPrecision-on-circle.svg", "ref/resvg/painting/shape-rendering/geometricPrecision-on-circle.png", "diff/resvg/painting/shape-rendering/geometricPrecision-on-circle.png", false), 0)}
#[test] fn resvg_painting_shape_rendering_crispEdges_on_circle() {assert_eq!(run_test("svg/resvg/painting/shape-rendering/crispEdges-on-circle.svg", "ref/resvg/painting/shape-rendering/crispEdges-on-circle.png", "diff/resvg/painting/shape-rendering/crispEdges-on-circle.png", false), 0)}
#[test] fn resvg_painting_visibility_collapse_on_tspan() {assert_eq!(run_test("svg/resvg/painting/visibility/collapse-on-tspan.svg", "ref/resvg/painting/visibility/collapse-on-tspan.png", "diff/resvg/painting/visibility/collapse-on-tspan.png", false), 0)}
#[test] fn resvg_painting_visibility_hidden_on_shape() {assert_eq!(run_test("svg/resvg/painting/visibility/hidden-on-shape.svg", "ref/resvg/painting/visibility/hidden-on-shape.png", "diff/resvg/painting/visibility/hidden-on-shape.png", false), 0)}
#[test] fn resvg_painting_visibility_hidden_on_group() {assert_eq!(run_test("svg/resvg/painting/visibility/hidden-on-group.svg", "ref/resvg/painting/visibility/hidden-on-group.png", "diff/resvg/painting/visibility/hidden-on-group.png", false), 0)}
#[test] fn resvg_painting_visibility_hidden_on_tspan() {assert_eq!(run_test("svg/resvg/painting/visibility/hidden-on-tspan.svg", "ref/resvg/painting/visibility/hidden-on-tspan.png", "diff/resvg/painting/visibility/hidden-on-tspan.png", false), 0)}
#[test] fn resvg_painting_visibility_bbox_impact_1() {assert_eq!(run_test("svg/resvg/painting/visibility/bbox-impact-1.svg", "ref/resvg/painting/visibility/bbox-impact-1.png", "diff/resvg/painting/visibility/bbox-impact-1.png", false), 0)}
#[test] fn resvg_painting_visibility_bbox_impact_2() {assert_eq!(run_test("svg/resvg/painting/visibility/bbox-impact-2.svg", "ref/resvg/painting/visibility/bbox-impact-2.png", "diff/resvg/painting/visibility/bbox-impact-2.png", false), 0)}
#[test] fn resvg_painting_visibility_bbox_impact_3() {assert_eq!(run_test("svg/resvg/painting/visibility/bbox-impact-3.svg", "ref/resvg/painting/visibility/bbox-impact-3.png", "diff/resvg/painting/visibility/bbox-impact-3.png", false), 0)}
#[ignore] #[test] fn resvg_painting_stroke_dashoffset_mm_units() {assert_eq!(run_test("svg/resvg/painting/stroke-dashoffset/mm-units.svg", "ref/resvg/painting/stroke-dashoffset/mm-units.png", "diff/resvg/painting/stroke-dashoffset/mm-units.png", false), 0)}
#[test] fn resvg_painting_stroke_dashoffset_negative_value() {assert_eq!(run_test("svg/resvg/painting/stroke-dashoffset/negative-value.svg", "ref/resvg/painting/stroke-dashoffset/negative-value.png", "diff/resvg/painting/stroke-dashoffset/negative-value.png", false), 0)}
#[ignore] #[test] fn resvg_painting_stroke_dashoffset_percent_units() {assert_eq!(run_test("svg/resvg/painting/stroke-dashoffset/percent-units.svg", "ref/resvg/painting/stroke-dashoffset/percent-units.png", "diff/resvg/painting/stroke-dashoffset/percent-units.png", false), 0)}
#[test] fn resvg_painting_stroke_dashoffset_default() {assert_eq!(run_test("svg/resvg/painting/stroke-dashoffset/default.svg", "ref/resvg/painting/stroke-dashoffset/default.png", "diff/resvg/painting/stroke-dashoffset/default.png", false), 0)}
#[ignore] #[test] fn resvg_painting_stroke_dashoffset_px_units() {assert_eq!(run_test("svg/resvg/painting/stroke-dashoffset/px-units.svg", "ref/resvg/painting/stroke-dashoffset/px-units.png", "diff/resvg/painting/stroke-dashoffset/px-units.png", false), 0)}
#[test] fn resvg_painting_fill_RRGGBB_uppercase_color() {assert_eq!(run_test("svg/resvg/painting/fill/#RRGGBB-uppercase-color.svg", "ref/resvg/painting/fill/#RRGGBB-uppercase-color.png", "diff/resvg/painting/fill/#RRGGBB-uppercase-color.png", false), 0)}
#[test] fn resvg_painting_fill_RGB_color() {assert_eq!(run_test("svg/resvg/painting/fill/#RGB-color.svg", "ref/resvg/painting/fill/#RGB-color.png", "diff/resvg/painting/fill/#RGB-color.png", false), 0)}
#[test] fn resvg_painting_fill_radial_gradient_on_text() {assert_eq!(run_test("svg/resvg/painting/fill/radial-gradient-on-text.svg", "ref/resvg/painting/fill/radial-gradient-on-text.png", "diff/resvg/painting/fill/radial-gradient-on-text.png", false), 0)}
#[test] fn resvg_painting_fill_named_color_in_uppercase() {assert_eq!(run_test("svg/resvg/painting/fill/named-color-in-uppercase.svg", "ref/resvg/painting/fill/named-color-in-uppercase.png", "diff/resvg/painting/fill/named-color-in-uppercase.png", false), 0)}
#[ignore] #[test] fn resvg_painting_fill_rgb_int_int_int() {assert_eq!(run_test("svg/resvg/painting/fill/rgb-int-int-int.svg", "ref/resvg/painting/fill/rgb-int-int-int.png", "diff/resvg/painting/fill/rgb-int-int-int.png", false), 0)}
#[test] fn resvg_painting_fill_random_value() {assert_eq!(run_test("svg/resvg/painting/fill/random-value.svg", "ref/resvg/painting/fill/random-value.png", "diff/resvg/painting/fill/random-value.png", false), 0)}
#[test] fn resvg_painting_fill_rgb_color_with_extra_spaces() {assert_eq!(run_test("svg/resvg/painting/fill/rgb-color-with-extra-spaces.svg", "ref/resvg/painting/fill/rgb-color-with-extra-spaces.png", "diff/resvg/painting/fill/rgb-color-with-extra-spaces.png", false), 0)}
#[test] fn resvg_painting_fill_named_color_in_mixedcase() {assert_eq!(run_test("svg/resvg/painting/fill/named-color-in-mixedcase.svg", "ref/resvg/painting/fill/named-color-in-mixedcase.png", "diff/resvg/painting/fill/named-color-in-mixedcase.png", false), 0)}
#[test] fn resvg_painting_fill_hsl_999_100percent_25percent() {assert_eq!(run_test("svg/resvg/painting/fill/hsl-999-100percent-25percent.svg", "ref/resvg/painting/fill/hsl-999-100percent-25percent.png", "diff/resvg/painting/fill/hsl-999-100percent-25percent.png", false), 0)}
#[test] fn resvg_painting_fill_hsl_with_alpha() {assert_eq!(run_test("svg/resvg/painting/fill/hsl-with-alpha.svg", "ref/resvg/painting/fill/hsl-with-alpha.png", "diff/resvg/painting/fill/hsl-with-alpha.png", false), 0)}
#[test] fn resvg_painting_fill_rgba_0percent_50percent_0percent_0_5() {assert_eq!(run_test("svg/resvg/painting/fill/rgba-0percent-50percent-0percent-0.5.svg", "ref/resvg/painting/fill/rgba-0percent-50percent-0percent-0.5.png", "diff/resvg/painting/fill/rgba-0percent-50percent-0percent-0.5.png", false), 0)}
#[test] fn resvg_painting_fill_hsl_360_100percent_25percent() {assert_eq!(run_test("svg/resvg/painting/fill/hsl-360-100percent-25percent.svg", "ref/resvg/painting/fill/hsl-360-100percent-25percent.png", "diff/resvg/painting/fill/hsl-360-100percent-25percent.png", false), 0)}
#[test] fn resvg_painting_fill_not_trimmed_attribute_value() {assert_eq!(run_test("svg/resvg/painting/fill/not-trimmed-attribute-value.svg", "ref/resvg/painting/fill/not-trimmed-attribute-value.png", "diff/resvg/painting/fill/not-trimmed-attribute-value.png", false), 0)}
#[test] fn resvg_painting_fill_funcIRI_to_a_missing_element_with_a_none_fallback() {assert_eq!(run_test("svg/resvg/painting/fill/funcIRI-to-a-missing-element-with-a-none-fallback.svg", "ref/resvg/painting/fill/funcIRI-to-a-missing-element-with-a-none-fallback.png", "diff/resvg/painting/fill/funcIRI-to-a-missing-element-with-a-none-fallback.png", false), 0)}
#[test] fn resvg_painting_fill_inherit_without_parent() {assert_eq!(run_test("svg/resvg/painting/fill/inherit-without-parent.svg", "ref/resvg/painting/fill/inherit-without-parent.png", "diff/resvg/painting/fill/inherit-without-parent.png", false), 0)}
#[ignore] #[test] fn resvg_painting_fill_valid_FuncIRI_with_a_fallback_ICC_color() {assert_eq!(run_test("svg/resvg/painting/fill/valid-FuncIRI-with-a-fallback-ICC-color.svg", "ref/resvg/painting/fill/valid-FuncIRI-with-a-fallback-ICC-color.png", "diff/resvg/painting/fill/valid-FuncIRI-with-a-fallback-ICC-color.png", false), 0)}
#[test] fn resvg_painting_fill_radial_gradient_on_shape() {assert_eq!(run_test("svg/resvg/painting/fill/radial-gradient-on-shape.svg", "ref/resvg/painting/fill/radial-gradient-on-shape.png", "diff/resvg/painting/fill/radial-gradient-on-shape.png", false), 0)}
#[test] fn resvg_painting_fill_hsl_120_200percent_25percent() {assert_eq!(run_test("svg/resvg/painting/fill/hsl-120-200percent-25percent.svg", "ref/resvg/painting/fill/hsl-120-200percent-25percent.png", "diff/resvg/painting/fill/hsl-120-200percent-25percent.png", false), 0)}
#[ignore] #[test] fn resvg_painting_fill_RGBA() {assert_eq!(run_test("svg/resvg/painting/fill/#RGBA.svg", "ref/resvg/painting/fill/#RGBA.png", "diff/resvg/painting/fill/#RGBA.png", false), 0)}
#[test] fn resvg_painting_fill_rgb_color_with_a_big_fraction_part() {assert_eq!(run_test("svg/resvg/painting/fill/rgb-color-with-a-big-fraction-part.svg", "ref/resvg/painting/fill/rgb-color-with-a-big-fraction-part.png", "diff/resvg/painting/fill/rgb-color-with-a-big-fraction-part.png", false), 0)}
#[test] fn resvg_painting_fill_pattern_on_shape() {assert_eq!(run_test("svg/resvg/painting/fill/pattern-on-shape.svg", "ref/resvg/painting/fill/pattern-on-shape.png", "diff/resvg/painting/fill/pattern-on-shape.png", false), 0)}
#[test] fn resvg_painting_fill_uppercase_rgb_color() {assert_eq!(run_test("svg/resvg/painting/fill/uppercase-rgb-color.svg", "ref/resvg/painting/fill/uppercase-rgb-color.png", "diff/resvg/painting/fill/uppercase-rgb-color.png", false), 0)}
#[test] fn resvg_painting_fill_double_inherit() {assert_eq!(run_test("svg/resvg/painting/fill/double-inherit.svg", "ref/resvg/painting/fill/double-inherit.png", "diff/resvg/painting/fill/double-inherit.png", false), 0)}
#[test] fn resvg_painting_fill_pattern_on_text() {assert_eq!(run_test("svg/resvg/painting/fill/pattern-on-text.svg", "ref/resvg/painting/fill/pattern-on-text.png", "diff/resvg/painting/fill/pattern-on-text.png", false), 0)}
#[ignore] #[test] fn resvg_painting_fill_rgba_0_127_0_50percent() {assert_eq!(run_test("svg/resvg/painting/fill/rgba-0-127-0-50percent.svg", "ref/resvg/painting/fill/rgba-0-127-0-50percent.png", "diff/resvg/painting/fill/rgba-0-127-0-50percent.png", false), 0)}
#[test] fn resvg_painting_fill_missing_FuncIRI_with_a_currentColor_fallback() {assert_eq!(run_test("svg/resvg/painting/fill/missing-FuncIRI-with-a-currentColor-fallback.svg", "ref/resvg/painting/fill/missing-FuncIRI-with-a-currentColor-fallback.png", "diff/resvg/painting/fill/missing-FuncIRI-with-a-currentColor-fallback.png", false), 0)}
#[test] fn resvg_painting_fill_rgb_0_127_0_0_5() {assert_eq!(run_test("svg/resvg/painting/fill/rgb-0-127-0-0.5.svg", "ref/resvg/painting/fill/rgb-0-127-0-0.5.png", "diff/resvg/painting/fill/rgb-0-127-0-0.5.png", false), 0)}
#[test] fn resvg_painting_fill_rgba_0_50percent_0_0_5() {assert_eq!(run_test("svg/resvg/painting/fill/rgba-0-50percent-0-0.5.svg", "ref/resvg/painting/fill/rgba-0-50percent-0-0.5.png", "diff/resvg/painting/fill/rgba-0-50percent-0-0.5.png", false), 0)}
#[test] fn resvg_painting_fill_hsl_120_100percent_25percent() {assert_eq!(run_test("svg/resvg/painting/fill/hsl-120-100percent-25percent.svg", "ref/resvg/painting/fill/hsl-120-100percent-25percent.png", "diff/resvg/painting/fill/hsl-120-100percent-25percent.png", false), 0)}
#[test] fn resvg_painting_fill_currentColor_without_parent() {assert_eq!(run_test("svg/resvg/painting/fill/currentColor-without-parent.svg", "ref/resvg/painting/fill/currentColor-without-parent.png", "diff/resvg/painting/fill/currentColor-without-parent.png", false), 0)}
#[test] fn resvg_painting_fill_funcIRI_to_an_invalid_element_with_a_none_fallback() {assert_eq!(run_test("svg/resvg/painting/fill/funcIRI-to-an-invalid-element-with-a-none-fallback.svg", "ref/resvg/painting/fill/funcIRI-to-an-invalid-element-with-a-none-fallback.png", "diff/resvg/painting/fill/funcIRI-to-an-invalid-element-with-a-none-fallback.png", false), 0)}
#[test] fn resvg_painting_fill_named_color() {assert_eq!(run_test("svg/resvg/painting/fill/named-color.svg", "ref/resvg/painting/fill/named-color.png", "diff/resvg/painting/fill/named-color.png", false), 0)}
#[test] fn resvg_painting_fill_invalid_RRGGBB_3() {assert_eq!(run_test("svg/resvg/painting/fill/invalid-#RRGGBB-3.svg", "ref/resvg/painting/fill/invalid-#RRGGBB-3.png", "diff/resvg/painting/fill/invalid-#RRGGBB-3.png", false), 0)}
#[test] fn resvg_painting_fill_hsla_with_percentage_s_and_l_values() {assert_eq!(run_test("svg/resvg/painting/fill/hsla-with-percentage-s-and-l-values.svg", "ref/resvg/painting/fill/hsla-with-percentage-s-and-l-values.png", "diff/resvg/painting/fill/hsla-with-percentage-s-and-l-values.png", false), 0)}
#[test] fn resvg_painting_fill_invalid_RRGGBB_2() {assert_eq!(run_test("svg/resvg/painting/fill/invalid-#RRGGBB-2.svg", "ref/resvg/painting/fill/invalid-#RRGGBB-2.png", "diff/resvg/painting/fill/invalid-#RRGGBB-2.png", false), 0)}
#[test] fn resvg_painting_fill_rgb_color_with_percentage_values() {assert_eq!(run_test("svg/resvg/painting/fill/rgb-color-with-percentage-values.svg", "ref/resvg/painting/fill/rgb-color-with-percentage-values.png", "diff/resvg/painting/fill/rgb-color-with-percentage-values.png", false), 0)}
#[test] fn resvg_painting_fill_transparent() {assert_eq!(run_test("svg/resvg/painting/fill/transparent.svg", "ref/resvg/painting/fill/transparent.png", "diff/resvg/painting/fill/transparent.png", false), 0)}
#[test] fn resvg_painting_fill_invalid_FuncIRI_with_a_fallback_color() {assert_eq!(run_test("svg/resvg/painting/fill/invalid-FuncIRI-with-a-fallback-color.svg", "ref/resvg/painting/fill/invalid-FuncIRI-with-a-fallback-color.png", "diff/resvg/painting/fill/invalid-FuncIRI-with-a-fallback-color.png", false), 0)}
#[test] fn resvg_painting_fill_invalid_RRGGBB_1() {assert_eq!(run_test("svg/resvg/painting/fill/invalid-#RRGGBB-1.svg", "ref/resvg/painting/fill/invalid-#RRGGBB-1.png", "diff/resvg/painting/fill/invalid-#RRGGBB-1.png", false), 0)}
#[test] fn resvg_painting_fill_invalid_FuncIRI_with_a_currentColor_fallback() {assert_eq!(run_test("svg/resvg/painting/fill/invalid-FuncIRI-with-a-currentColor-fallback.svg", "ref/resvg/painting/fill/invalid-FuncIRI-with-a-currentColor-fallback.png", "diff/resvg/painting/fill/invalid-FuncIRI-with-a-currentColor-fallback.png", false), 0)}
#[test] fn resvg_painting_fill_inherit() {assert_eq!(run_test("svg/resvg/painting/fill/inherit.svg", "ref/resvg/painting/fill/inherit.png", "diff/resvg/painting/fill/inherit.png", false), 0)}
#[test] fn resvg_painting_fill_rgb_color_with_percentage_overflow() {assert_eq!(run_test("svg/resvg/painting/fill/rgb-color-with-percentage-overflow.svg", "ref/resvg/painting/fill/rgb-color-with-percentage-overflow.png", "diff/resvg/painting/fill/rgb-color-with-percentage-overflow.png", false), 0)}
#[test] fn resvg_painting_fill_currentColor() {assert_eq!(run_test("svg/resvg/painting/fill/currentColor.svg", "ref/resvg/painting/fill/currentColor.png", "diff/resvg/painting/fill/currentColor.png", false), 0)}
#[test] fn resvg_painting_fill_none() {assert_eq!(run_test("svg/resvg/painting/fill/none.svg", "ref/resvg/painting/fill/none.png", "diff/resvg/painting/fill/none.png", false), 0)}
#[test] fn resvg_painting_fill_RRGGBB_color() {assert_eq!(run_test("svg/resvg/painting/fill/#RRGGBB-color.svg", "ref/resvg/painting/fill/#RRGGBB-color.png", "diff/resvg/painting/fill/#RRGGBB-color.png", false), 0)}
#[test] fn resvg_painting_fill_linear_gradient_on_text() {assert_eq!(run_test("svg/resvg/painting/fill/linear-gradient-on-text.svg", "ref/resvg/painting/fill/linear-gradient-on-text.png", "diff/resvg/painting/fill/linear-gradient-on-text.png", false), 0)}
#[ignore] #[test] fn resvg_painting_fill_icc_color() {assert_eq!(run_test("svg/resvg/painting/fill/icc-color.svg", "ref/resvg/painting/fill/icc-color.png", "diff/resvg/painting/fill/icc-color.png", false), 0)}
#[ignore] #[test] fn resvg_painting_fill_RRGGBBAA() {assert_eq!(run_test("svg/resvg/painting/fill/#RRGGBBAA.svg", "ref/resvg/painting/fill/#RRGGBBAA.png", "diff/resvg/painting/fill/#RRGGBBAA.png", false), 0)}
#[test] fn resvg_painting_fill_rgba_0_127_0_0_5() {assert_eq!(run_test("svg/resvg/painting/fill/rgba-0-127-0-0.5.svg", "ref/resvg/painting/fill/rgba-0-127-0-0.5.png", "diff/resvg/painting/fill/rgba-0-127-0-0.5.png", false), 0)}
#[test] fn resvg_painting_fill_funcIRI_with_a_fallback_color() {assert_eq!(run_test("svg/resvg/painting/fill/funcIRI-with-a-fallback-color.svg", "ref/resvg/painting/fill/funcIRI-with-a-fallback-color.png", "diff/resvg/painting/fill/funcIRI-with-a-fallback-color.png", false), 0)}
#[test] fn resvg_painting_fill_rgb_color_with_floats() {assert_eq!(run_test("svg/resvg/painting/fill/rgb-color-with-floats.svg", "ref/resvg/painting/fill/rgb-color-with-floats.png", "diff/resvg/painting/fill/rgb-color-with-floats.png", false), 0)}
#[test] fn resvg_painting_fill_rgba_0_127_0__1() {assert_eq!(run_test("svg/resvg/painting/fill/rgba-0-127-0--1.svg", "ref/resvg/painting/fill/rgba-0-127-0--1.png", "diff/resvg/painting/fill/rgba-0-127-0--1.png", false), 0)}
#[test] fn resvg_painting_fill_rgb_color_with_float_percentage_values() {assert_eq!(run_test("svg/resvg/painting/fill/rgb-color-with-float-percentage-values.svg", "ref/resvg/painting/fill/rgb-color-with-float-percentage-values.png", "diff/resvg/painting/fill/rgb-color-with-float-percentage-values.png", false), 0)}
#[test] fn resvg_painting_fill_rgba_0_127_0_1() {assert_eq!(run_test("svg/resvg/painting/fill/rgba-0-127-0-1.svg", "ref/resvg/painting/fill/rgba-0-127-0-1.png", "diff/resvg/painting/fill/rgba-0-127-0-1.png", false), 0)}
#[test] fn resvg_painting_fill_linear_gradient_on_shape() {assert_eq!(run_test("svg/resvg/painting/fill/linear-gradient-on-shape.svg", "ref/resvg/painting/fill/linear-gradient-on-shape.png", "diff/resvg/painting/fill/linear-gradient-on-shape.png", false), 0)}
#[test] fn resvg_painting_fill_rgba_0_127_0_0() {assert_eq!(run_test("svg/resvg/painting/fill/rgba-0-127-0-0.svg", "ref/resvg/painting/fill/rgba-0-127-0-0.png", "diff/resvg/painting/fill/rgba-0-127-0-0.png", false), 0)}
#[test] fn resvg_painting_fill_funcIRI_to_a_missing_element_with_a_fallback_color() {assert_eq!(run_test("svg/resvg/painting/fill/funcIRI-to-a-missing-element-with-a-fallback-color.svg", "ref/resvg/painting/fill/funcIRI-to-a-missing-element-with-a-fallback-color.png", "diff/resvg/painting/fill/funcIRI-to-a-missing-element-with-a-fallback-color.png", false), 0)}
#[test] fn resvg_painting_fill_rgb_color() {assert_eq!(run_test("svg/resvg/painting/fill/rgb-color.svg", "ref/resvg/painting/fill/rgb-color.png", "diff/resvg/painting/fill/rgb-color.png", false), 0)}
#[test] fn resvg_painting_fill_rgba_0_127_0_2() {assert_eq!(run_test("svg/resvg/painting/fill/rgba-0-127-0-2.svg", "ref/resvg/painting/fill/rgba-0-127-0-2.png", "diff/resvg/painting/fill/rgba-0-127-0-2.png", false), 0)}
#[test] fn resvg_painting_fill_funcIRI_to_an_unsupported_element() {assert_eq!(run_test("svg/resvg/painting/fill/funcIRI-to-an-unsupported-element.svg", "ref/resvg/painting/fill/funcIRI-to-an-unsupported-element.png", "diff/resvg/painting/fill/funcIRI-to-an-unsupported-element.png", false), 0)}
#[test] fn resvg_painting_stroke_opacity_with_linearGradient() {assert_eq!(run_test("svg/resvg/painting/stroke-opacity/with-linearGradient.svg", "ref/resvg/painting/stroke-opacity/with-linearGradient.png", "diff/resvg/painting/stroke-opacity/with-linearGradient.png", false), 0)}
#[test] fn resvg_painting_stroke_opacity_on_text() {assert_eq!(run_test("svg/resvg/painting/stroke-opacity/on-text.svg", "ref/resvg/painting/stroke-opacity/on-text.png", "diff/resvg/painting/stroke-opacity/on-text.png", false), 0)}
#[test] fn resvg_painting_stroke_opacity_on_parent() {assert_eq!(run_test("svg/resvg/painting/stroke-opacity/on-parent.svg", "ref/resvg/painting/stroke-opacity/on-parent.png", "diff/resvg/painting/stroke-opacity/on-parent.png", false), 0)}
#[test] fn resvg_painting_stroke_opacity_with_pattern() {assert_eq!(run_test("svg/resvg/painting/stroke-opacity/with-pattern.svg", "ref/resvg/painting/stroke-opacity/with-pattern.png", "diff/resvg/painting/stroke-opacity/with-pattern.png", false), 0)}
#[test] fn resvg_painting_stroke_opacity_half_opacity() {assert_eq!(run_test("svg/resvg/painting/stroke-opacity/half-opacity.svg", "ref/resvg/painting/stroke-opacity/half-opacity.png", "diff/resvg/painting/stroke-opacity/half-opacity.png", false), 0)}
#[test] fn resvg_painting_stroke_opacity_nested() {assert_eq!(run_test("svg/resvg/painting/stroke-opacity/nested.svg", "ref/resvg/painting/stroke-opacity/nested.png", "diff/resvg/painting/stroke-opacity/nested.png", false), 0)}
#[test] fn resvg_painting_stroke_opacity_with_opacity() {assert_eq!(run_test("svg/resvg/painting/stroke-opacity/with-opacity.svg", "ref/resvg/painting/stroke-opacity/with-opacity.png", "diff/resvg/painting/stroke-opacity/with-opacity.png", false), 0)}
#[test] fn resvg_painting_stroke_opacity_50percent() {assert_eq!(run_test("svg/resvg/painting/stroke-opacity/50percent.svg", "ref/resvg/painting/stroke-opacity/50percent.png", "diff/resvg/painting/stroke-opacity/50percent.png", false), 0)}
#[test] fn resvg_painting_stroke_radial_gradient_on_text() {assert_eq!(run_test("svg/resvg/painting/stroke/radial-gradient-on-text.svg", "ref/resvg/painting/stroke/radial-gradient-on-text.png", "diff/resvg/painting/stroke/radial-gradient-on-text.png", false), 0)}
#[test] fn resvg_painting_stroke_pattern() {assert_eq!(run_test("svg/resvg/painting/stroke/pattern.svg", "ref/resvg/painting/stroke/pattern.png", "diff/resvg/painting/stroke/pattern.png", false), 0)}
#[test] fn resvg_painting_stroke_radial_gradient() {assert_eq!(run_test("svg/resvg/painting/stroke/radial-gradient.svg", "ref/resvg/painting/stroke/radial-gradient.png", "diff/resvg/painting/stroke/radial-gradient.png", false), 0)}
#[test] fn resvg_painting_stroke_funcIRI_to_unsupported_element() {assert_eq!(run_test("svg/resvg/painting/stroke/funcIRI-to-unsupported-element.svg", "ref/resvg/painting/stroke/funcIRI-to-unsupported-element.png", "diff/resvg/painting/stroke/funcIRI-to-unsupported-element.png", false), 0)}
#[test] fn resvg_painting_stroke_gradient_with_objectBoundingBox_on_shape_without_a_bbox() {assert_eq!(run_test("svg/resvg/painting/stroke/gradient-with-objectBoundingBox-on-shape-without-a-bbox.svg", "ref/resvg/painting/stroke/gradient-with-objectBoundingBox-on-shape-without-a-bbox.png", "diff/resvg/painting/stroke/gradient-with-objectBoundingBox-on-shape-without-a-bbox.png", false), 0)}
#[test] fn resvg_painting_stroke_currentColor_without_a_parent() {assert_eq!(run_test("svg/resvg/painting/stroke/currentColor-without-a-parent.svg", "ref/resvg/painting/stroke/currentColor-without-a-parent.png", "diff/resvg/painting/stroke/currentColor-without-a-parent.png", false), 0)}
#[test] fn resvg_painting_stroke_gradient_with_objectBoundingBox_on_path_without_a_bbox_1() {assert_eq!(run_test("svg/resvg/painting/stroke/gradient-with-objectBoundingBox-on-path-without-a-bbox-1.svg", "ref/resvg/painting/stroke/gradient-with-objectBoundingBox-on-path-without-a-bbox-1.png", "diff/resvg/painting/stroke/gradient-with-objectBoundingBox-on-path-without-a-bbox-1.png", false), 0)}
#[test] fn resvg_painting_stroke_linear_gradient() {assert_eq!(run_test("svg/resvg/painting/stroke/linear-gradient.svg", "ref/resvg/painting/stroke/linear-gradient.png", "diff/resvg/painting/stroke/linear-gradient.png", false), 0)}
#[test] fn resvg_painting_stroke_gradient_with_objectBoundingBox_on_path_without_a_bbox_2() {assert_eq!(run_test("svg/resvg/painting/stroke/gradient-with-objectBoundingBox-on-path-without-a-bbox-2.svg", "ref/resvg/painting/stroke/gradient-with-objectBoundingBox-on-path-without-a-bbox-2.png", "diff/resvg/painting/stroke/gradient-with-objectBoundingBox-on-path-without-a-bbox-2.png", false), 0)}
#[test] fn resvg_painting_stroke_pattern_on_text() {assert_eq!(run_test("svg/resvg/painting/stroke/pattern-on-text.svg", "ref/resvg/painting/stroke/pattern-on-text.png", "diff/resvg/painting/stroke/pattern-on-text.png", false), 0)}
#[test] fn resvg_painting_stroke_named_color() {assert_eq!(run_test("svg/resvg/painting/stroke/named-color.svg", "ref/resvg/painting/stroke/named-color.png", "diff/resvg/painting/stroke/named-color.png", false), 0)}
#[test] fn resvg_painting_stroke_pattern_with_objectBoundingBox_on_zero_bbox_shape() {assert_eq!(run_test("svg/resvg/painting/stroke/pattern-with-objectBoundingBox-on-zero-bbox-shape.svg", "ref/resvg/painting/stroke/pattern-with-objectBoundingBox-on-zero-bbox-shape.png", "diff/resvg/painting/stroke/pattern-with-objectBoundingBox-on-zero-bbox-shape.png", false), 0)}
#[test] fn resvg_painting_stroke_gradient_with_objectBoundingBox_and_fallback_on_lines() {assert_eq!(run_test("svg/resvg/painting/stroke/gradient-with-objectBoundingBox-and-fallback-on-lines.svg", "ref/resvg/painting/stroke/gradient-with-objectBoundingBox-and-fallback-on-lines.png", "diff/resvg/painting/stroke/gradient-with-objectBoundingBox-and-fallback-on-lines.png", false), 0)}
#[test] fn resvg_painting_stroke_none() {assert_eq!(run_test("svg/resvg/painting/stroke/none.svg", "ref/resvg/painting/stroke/none.png", "diff/resvg/painting/stroke/none.png", false), 0)}
#[test] fn resvg_painting_stroke_linear_gradient_on_text() {assert_eq!(run_test("svg/resvg/painting/stroke/linear-gradient-on-text.svg", "ref/resvg/painting/stroke/linear-gradient-on-text.png", "diff/resvg/painting/stroke/linear-gradient-on-text.png", false), 0)}
#[test] fn resvg_painting_stroke_control_points_clamping_1() {assert_eq!(run_test("svg/resvg/painting/stroke/control-points-clamping-1.svg", "ref/resvg/painting/stroke/control-points-clamping-1.png", "diff/resvg/painting/stroke/control-points-clamping-1.png", false), 0)}
#[test] fn resvg_painting_stroke_line_as_curve_2() {assert_eq!(run_test("svg/resvg/painting/stroke/line-as-curve-2.svg", "ref/resvg/painting/stroke/line-as-curve-2.png", "diff/resvg/painting/stroke/line-as-curve-2.png", false), 0)}
#[test] fn resvg_painting_stroke_pattern_with_objectBoundingBox_fallback_on_zero_bbox_shape() {assert_eq!(run_test("svg/resvg/painting/stroke/pattern-with-objectBoundingBox-fallback-on-zero-bbox-shape.svg", "ref/resvg/painting/stroke/pattern-with-objectBoundingBox-fallback-on-zero-bbox-shape.png", "diff/resvg/painting/stroke/pattern-with-objectBoundingBox-fallback-on-zero-bbox-shape.png", false), 0)}
#[test] fn resvg_painting_stroke_control_points_clamping_2() {assert_eq!(run_test("svg/resvg/painting/stroke/control-points-clamping-2.svg", "ref/resvg/painting/stroke/control-points-clamping-2.png", "diff/resvg/painting/stroke/control-points-clamping-2.png", false), 0)}
#[test] fn resvg_painting_stroke_line_as_curve_1() {assert_eq!(run_test("svg/resvg/painting/stroke/line-as-curve-1.svg", "ref/resvg/painting/stroke/line-as-curve-1.png", "diff/resvg/painting/stroke/line-as-curve-1.png", false), 0)}
#[test] fn resvg_painting_color_simple_case() {assert_eq!(run_test("svg/resvg/painting/color/simple-case.svg", "ref/resvg/painting/color/simple-case.png", "diff/resvg/painting/color/simple-case.png", false), 0)}
#[test] fn resvg_painting_color_inherit() {assert_eq!(run_test("svg/resvg/painting/color/inherit.svg", "ref/resvg/painting/color/inherit.png", "diff/resvg/painting/color/inherit.png", false), 0)}
#[test] fn resvg_painting_stroke_linecap_butt() {assert_eq!(run_test("svg/resvg/painting/stroke-linecap/butt.svg", "ref/resvg/painting/stroke-linecap/butt.png", "diff/resvg/painting/stroke-linecap/butt.png", false), 0)}
#[test] fn resvg_painting_stroke_linecap_open_path_with_square() {assert_eq!(run_test("svg/resvg/painting/stroke-linecap/open-path-with-square.svg", "ref/resvg/painting/stroke-linecap/open-path-with-square.png", "diff/resvg/painting/stroke-linecap/open-path-with-square.png", false), 0)}
#[test] fn resvg_painting_stroke_linecap_round() {assert_eq!(run_test("svg/resvg/painting/stroke-linecap/round.svg", "ref/resvg/painting/stroke-linecap/round.png", "diff/resvg/painting/stroke-linecap/round.png", false), 0)}
#[ignore] #[test] fn resvg_painting_stroke_linecap_zero_length_path_with_square() {assert_eq!(run_test("svg/resvg/painting/stroke-linecap/zero-length-path-with-square.svg", "ref/resvg/painting/stroke-linecap/zero-length-path-with-square.png", "diff/resvg/painting/stroke-linecap/zero-length-path-with-square.png", false), 0)}
#[test] fn resvg_painting_stroke_linecap_square() {assert_eq!(run_test("svg/resvg/painting/stroke-linecap/square.svg", "ref/resvg/painting/stroke-linecap/square.png", "diff/resvg/painting/stroke-linecap/square.png", false), 0)}
#[ignore] #[test] fn resvg_painting_stroke_linecap_zero_length_path_with_round() {assert_eq!(run_test("svg/resvg/painting/stroke-linecap/zero-length-path-with-round.svg", "ref/resvg/painting/stroke-linecap/zero-length-path-with-round.png", "diff/resvg/painting/stroke-linecap/zero-length-path-with-round.png", false), 0)}
#[test] fn resvg_painting_stroke_linecap_open_path_with_butt() {assert_eq!(run_test("svg/resvg/painting/stroke-linecap/open-path-with-butt.svg", "ref/resvg/painting/stroke-linecap/open-path-with-butt.png", "diff/resvg/painting/stroke-linecap/open-path-with-butt.png", false), 0)}
#[ignore] #[test] fn resvg_painting_stroke_linecap_zero_length_path_with_butt() {assert_eq!(run_test("svg/resvg/painting/stroke-linecap/zero-length-path-with-butt.svg", "ref/resvg/painting/stroke-linecap/zero-length-path-with-butt.png", "diff/resvg/painting/stroke-linecap/zero-length-path-with-butt.png", false), 0)}
#[test] fn resvg_painting_stroke_linecap_open_path_with_round() {assert_eq!(run_test("svg/resvg/painting/stroke-linecap/open-path-with-round.svg", "ref/resvg/painting/stroke-linecap/open-path-with-round.png", "diff/resvg/painting/stroke-linecap/open-path-with-round.png", false), 0)}
#[test] fn resvg_painting_stroke_width_zero() {assert_eq!(run_test("svg/resvg/painting/stroke-width/zero.svg", "ref/resvg/painting/stroke-width/zero.png", "diff/resvg/painting/stroke-width/zero.png", false), 0)}
#[test] fn resvg_painting_stroke_width_percentage() {assert_eq!(run_test("svg/resvg/painting/stroke-width/percentage.svg", "ref/resvg/painting/stroke-width/percentage.png", "diff/resvg/painting/stroke-width/percentage.png", false), 0)}
#[test] fn resvg_painting_stroke_width_bold() {assert_eq!(run_test("svg/resvg/painting/stroke-width/bold.svg", "ref/resvg/painting/stroke-width/bold.png", "diff/resvg/painting/stroke-width/bold.png", false), 0)}
#[test] fn resvg_painting_stroke_width_default() {assert_eq!(run_test("svg/resvg/painting/stroke-width/default.svg", "ref/resvg/painting/stroke-width/default.png", "diff/resvg/painting/stroke-width/default.png", false), 0)}
#[ignore] #[test] fn resvg_painting_stroke_width_negative() {assert_eq!(run_test("svg/resvg/painting/stroke-width/negative.svg", "ref/resvg/painting/stroke-width/negative.png", "diff/resvg/painting/stroke-width/negative.png", false), 0)}
#[test] fn resvg_painting_overflow_visible_on_marker() {assert_eq!(run_test("svg/resvg/painting/overflow/visible-on-marker.svg", "ref/resvg/painting/overflow/visible-on-marker.png", "diff/resvg/painting/overflow/visible-on-marker.png", false), 0)}
#[test] fn resvg_painting_overflow_inherit_on_marker_without_parent() {assert_eq!(run_test("svg/resvg/painting/overflow/inherit-on-marker-without-parent.svg", "ref/resvg/painting/overflow/inherit-on-marker-without-parent.png", "diff/resvg/painting/overflow/inherit-on-marker-without-parent.png", false), 0)}
#[test] fn resvg_painting_overflow_auto_on_marker() {assert_eq!(run_test("svg/resvg/painting/overflow/auto-on-marker.svg", "ref/resvg/painting/overflow/auto-on-marker.png", "diff/resvg/painting/overflow/auto-on-marker.png", false), 0)}
#[test] fn resvg_painting_overflow_inherit_on_marker() {assert_eq!(run_test("svg/resvg/painting/overflow/inherit-on-marker.svg", "ref/resvg/painting/overflow/inherit-on-marker.png", "diff/resvg/painting/overflow/inherit-on-marker.png", false), 0)}
#[test] fn resvg_painting_overflow_scroll_on_marker() {assert_eq!(run_test("svg/resvg/painting/overflow/scroll-on-marker.svg", "ref/resvg/painting/overflow/scroll-on-marker.png", "diff/resvg/painting/overflow/scroll-on-marker.png", false), 0)}
#[test] fn resvg_painting_opacity_on_an_invalid_element() {assert_eq!(run_test("svg/resvg/painting/opacity/on-an-invalid-element.svg", "ref/resvg/painting/opacity/on-an-invalid-element.png", "diff/resvg/painting/opacity/on-an-invalid-element.png", false), 0)}
#[test] fn resvg_painting_opacity_clamp_value_1() {assert_eq!(run_test("svg/resvg/painting/opacity/clamp-value-1.svg", "ref/resvg/painting/opacity/clamp-value-1.png", "diff/resvg/painting/opacity/clamp-value-1.png", false), 0)}
#[test] fn resvg_painting_opacity_clamp_value_2() {assert_eq!(run_test("svg/resvg/painting/opacity/clamp-value-2.svg", "ref/resvg/painting/opacity/clamp-value-2.png", "diff/resvg/painting/opacity/clamp-value-2.png", false), 0)}
#[test] fn resvg_painting_opacity_on_the_root_svg() {assert_eq!(run_test("svg/resvg/painting/opacity/on-the-root-svg.svg", "ref/resvg/painting/opacity/on-the-root-svg.png", "diff/resvg/painting/opacity/on-the-root-svg.png", false), 0)}
#[test] fn resvg_painting_opacity_group_opacity() {assert_eq!(run_test("svg/resvg/painting/opacity/group-opacity.svg", "ref/resvg/painting/opacity/group-opacity.png", "diff/resvg/painting/opacity/group-opacity.png", false), 0)}
#[test] fn resvg_painting_opacity_50percent() {assert_eq!(run_test("svg/resvg/painting/opacity/50percent.svg", "ref/resvg/painting/opacity/50percent.png", "diff/resvg/painting/opacity/50percent.png", false), 0)}
#[test] fn resvg_painting_opacity_mixed_group_opacity() {assert_eq!(run_test("svg/resvg/painting/opacity/mixed-group-opacity.svg", "ref/resvg/painting/opacity/mixed-group-opacity.png", "diff/resvg/painting/opacity/mixed-group-opacity.png", false), 0)}
#[test] fn resvg_painting_opacity_invalid_value_2() {assert_eq!(run_test("svg/resvg/painting/opacity/invalid-value-2.svg", "ref/resvg/painting/opacity/invalid-value-2.png", "diff/resvg/painting/opacity/invalid-value-2.png", false), 0)}
#[test] fn resvg_painting_opacity_bBox_impact() {assert_eq!(run_test("svg/resvg/painting/opacity/bBox-impact.svg", "ref/resvg/painting/opacity/bBox-impact.png", "diff/resvg/painting/opacity/bBox-impact.png", false), 0)}
#[test] fn resvg_painting_isolation_isolate() {assert_eq!(run_test("svg/resvg/painting/isolation/isolate.svg", "ref/resvg/painting/isolation/isolate.png", "diff/resvg/painting/isolation/isolate.png", false), 0)}
#[test] fn resvg_painting_isolation_as_property() {assert_eq!(run_test("svg/resvg/painting/isolation/as-property.svg", "ref/resvg/painting/isolation/as-property.png", "diff/resvg/painting/isolation/as-property.png", false), 0)}
#[test] fn resvg_painting_stroke_linejoin_miter() {assert_eq!(run_test("svg/resvg/painting/stroke-linejoin/miter.svg", "ref/resvg/painting/stroke-linejoin/miter.png", "diff/resvg/painting/stroke-linejoin/miter.png", false), 0)}
#[ignore] #[test] fn resvg_painting_stroke_linejoin_arcs() {assert_eq!(run_test("svg/resvg/painting/stroke-linejoin/arcs.svg", "ref/resvg/painting/stroke-linejoin/arcs.png", "diff/resvg/painting/stroke-linejoin/arcs.png", false), 0)}
#[test] fn resvg_painting_stroke_linejoin_round() {assert_eq!(run_test("svg/resvg/painting/stroke-linejoin/round.svg", "ref/resvg/painting/stroke-linejoin/round.png", "diff/resvg/painting/stroke-linejoin/round.png", false), 0)}
#[test] fn resvg_painting_stroke_linejoin_bevel() {assert_eq!(run_test("svg/resvg/painting/stroke-linejoin/bevel.svg", "ref/resvg/painting/stroke-linejoin/bevel.png", "diff/resvg/painting/stroke-linejoin/bevel.png", false), 0)}
#[ignore] #[test] fn resvg_painting_stroke_linejoin_miter_clip() {assert_eq!(run_test("svg/resvg/painting/stroke-linejoin/miter-clip.svg", "ref/resvg/painting/stroke-linejoin/miter-clip.png", "diff/resvg/painting/stroke-linejoin/miter-clip.png", false), 0)}
#[test] fn resvg_painting_stroke_miterlimit_valid_value() {assert_eq!(run_test("svg/resvg/painting/stroke-miterlimit/valid-value.svg", "ref/resvg/painting/stroke-miterlimit/valid-value.png", "diff/resvg/painting/stroke-miterlimit/valid-value.png", false), 0)}
#[test] fn resvg_painting_stroke_miterlimit_value_with_mm() {assert_eq!(run_test("svg/resvg/painting/stroke-miterlimit/value-with-mm.svg", "ref/resvg/painting/stroke-miterlimit/value-with-mm.png", "diff/resvg/painting/stroke-miterlimit/value-with-mm.png", false), 0)}
#[test] fn resvg_painting_stroke_miterlimit_invalid_value() {assert_eq!(run_test("svg/resvg/painting/stroke-miterlimit/invalid-value.svg", "ref/resvg/painting/stroke-miterlimit/invalid-value.png", "diff/resvg/painting/stroke-miterlimit/invalid-value.png", false), 0)}
#[test] fn resvg_painting_stroke_miterlimit_default() {assert_eq!(run_test("svg/resvg/painting/stroke-miterlimit/default.svg", "ref/resvg/painting/stroke-miterlimit/default.png", "diff/resvg/painting/stroke-miterlimit/default.png", false), 0)}
#[test] fn resvg_painting_stroke_miterlimit_value_with_percent() {assert_eq!(run_test("svg/resvg/painting/stroke-miterlimit/value-with-percent.svg", "ref/resvg/painting/stroke-miterlimit/value-with-percent.png", "diff/resvg/painting/stroke-miterlimit/value-with-percent.png", false), 0)}
#[test] fn resvg_painting_display_none_on_defs() {assert_eq!(run_test("svg/resvg/painting/display/none-on-defs.svg", "ref/resvg/painting/display/none-on-defs.png", "diff/resvg/painting/display/none-on-defs.png", false), 0)}
#[test] fn resvg_painting_display_none_on_svg() {assert_eq!(run_test("svg/resvg/painting/display/none-on-svg.svg", "ref/resvg/painting/display/none-on-svg.png", "diff/resvg/painting/display/none-on-svg.png", false), 0)}
#[test] fn resvg_painting_display_none_on_tref() {assert_eq!(run_test("svg/resvg/painting/display/none-on-tref.svg", "ref/resvg/painting/display/none-on-tref.png", "diff/resvg/painting/display/none-on-tref.png", false), 0)}
#[test] fn resvg_painting_display_none_on_rect() {assert_eq!(run_test("svg/resvg/painting/display/none-on-rect.svg", "ref/resvg/painting/display/none-on-rect.png", "diff/resvg/painting/display/none-on-rect.png", false), 0)}
#[test] fn resvg_painting_display_none_on_tspan_1() {assert_eq!(run_test("svg/resvg/painting/display/none-on-tspan-1.svg", "ref/resvg/painting/display/none-on-tspan-1.png", "diff/resvg/painting/display/none-on-tspan-1.png", false), 0)}
#[test] fn resvg_painting_display_none_on_clipPath() {assert_eq!(run_test("svg/resvg/painting/display/none-on-clipPath.svg", "ref/resvg/painting/display/none-on-clipPath.png", "diff/resvg/painting/display/none-on-clipPath.png", false), 0)}
#[test] fn resvg_painting_display_bBox_impact() {assert_eq!(run_test("svg/resvg/painting/display/bBox-impact.svg", "ref/resvg/painting/display/bBox-impact.png", "diff/resvg/painting/display/bBox-impact.png", false), 0)}
#[test] fn resvg_painting_display_none_on_linearGradient() {assert_eq!(run_test("svg/resvg/painting/display/none-on-linearGradient.svg", "ref/resvg/painting/display/none-on-linearGradient.png", "diff/resvg/painting/display/none-on-linearGradient.png", false), 0)}
#[test] fn resvg_painting_display_none_on_tspan_2() {assert_eq!(run_test("svg/resvg/painting/display/none-on-tspan-2.svg", "ref/resvg/painting/display/none-on-tspan-2.png", "diff/resvg/painting/display/none-on-tspan-2.png", false), 0)}
#[test] fn resvg_painting_fill_opacity_with_linearGradient() {assert_eq!(run_test("svg/resvg/painting/fill-opacity/with-linearGradient.svg", "ref/resvg/painting/fill-opacity/with-linearGradient.png", "diff/resvg/painting/fill-opacity/with-linearGradient.png", false), 0)}
#[test] fn resvg_painting_fill_opacity_on_text() {assert_eq!(run_test("svg/resvg/painting/fill-opacity/on-text.svg", "ref/resvg/painting/fill-opacity/on-text.png", "diff/resvg/painting/fill-opacity/on-text.png", false), 0)}
#[test] fn resvg_painting_fill_opacity_on_parent() {assert_eq!(run_test("svg/resvg/painting/fill-opacity/on-parent.svg", "ref/resvg/painting/fill-opacity/on-parent.png", "diff/resvg/painting/fill-opacity/on-parent.png", false), 0)}
#[test] fn resvg_painting_fill_opacity_with_pattern() {assert_eq!(run_test("svg/resvg/painting/fill-opacity/with-pattern.svg", "ref/resvg/painting/fill-opacity/with-pattern.png", "diff/resvg/painting/fill-opacity/with-pattern.png", false), 0)}
#[test] fn resvg_painting_fill_opacity_half_opacity() {assert_eq!(run_test("svg/resvg/painting/fill-opacity/half-opacity.svg", "ref/resvg/painting/fill-opacity/half-opacity.png", "diff/resvg/painting/fill-opacity/half-opacity.png", false), 0)}
#[test] fn resvg_painting_fill_opacity_nested() {assert_eq!(run_test("svg/resvg/painting/fill-opacity/nested.svg", "ref/resvg/painting/fill-opacity/nested.png", "diff/resvg/painting/fill-opacity/nested.png", false), 0)}
#[test] fn resvg_painting_fill_opacity_with_opacity() {assert_eq!(run_test("svg/resvg/painting/fill-opacity/with-opacity.svg", "ref/resvg/painting/fill-opacity/with-opacity.png", "diff/resvg/painting/fill-opacity/with-opacity.png", false), 0)}
#[test] fn resvg_painting_fill_opacity_50percent() {assert_eq!(run_test("svg/resvg/painting/fill-opacity/50percent.svg", "ref/resvg/painting/fill-opacity/50percent.png", "diff/resvg/painting/fill-opacity/50percent.png", false), 0)}
#[ignore] #[test] fn resvg_painting_stroke_dasharray_0_n_with_butt_caps() {assert_eq!(run_test("svg/resvg/painting/stroke-dasharray/0-n-with-butt-caps.svg", "ref/resvg/painting/stroke-dasharray/0-n-with-butt-caps.png", "diff/resvg/painting/stroke-dasharray/0-n-with-butt-caps.png", false), 0)}
#[ignore] #[test] fn resvg_painting_stroke_dasharray_mm_units() {assert_eq!(run_test("svg/resvg/painting/stroke-dasharray/mm-units.svg", "ref/resvg/painting/stroke-dasharray/mm-units.png", "diff/resvg/painting/stroke-dasharray/mm-units.png", false), 0)}
#[ignore] #[test] fn resvg_painting_stroke_dasharray_negative_sum() {assert_eq!(run_test("svg/resvg/painting/stroke-dasharray/negative-sum.svg", "ref/resvg/painting/stroke-dasharray/negative-sum.png", "diff/resvg/painting/stroke-dasharray/negative-sum.png", false), 0)}
#[ignore] #[test] fn resvg_painting_stroke_dasharray_em_units() {assert_eq!(run_test("svg/resvg/painting/stroke-dasharray/em-units.svg", "ref/resvg/painting/stroke-dasharray/em-units.png", "diff/resvg/painting/stroke-dasharray/em-units.png", false), 0)}
#[ignore] #[test] fn resvg_painting_stroke_dasharray_even_count() {assert_eq!(run_test("svg/resvg/painting/stroke-dasharray/even-count.svg", "ref/resvg/painting/stroke-dasharray/even-count.png", "diff/resvg/painting/stroke-dasharray/even-count.png", false), 0)}
#[test] fn resvg_painting_stroke_dasharray_ws_separator() {assert_eq!(run_test("svg/resvg/painting/stroke-dasharray/ws-separator.svg", "ref/resvg/painting/stroke-dasharray/ws-separator.png", "diff/resvg/painting/stroke-dasharray/ws-separator.png", false), 0)}
#[ignore] #[test] fn resvg_painting_stroke_dasharray_percent_units() {assert_eq!(run_test("svg/resvg/painting/stroke-dasharray/percent-units.svg", "ref/resvg/painting/stroke-dasharray/percent-units.png", "diff/resvg/painting/stroke-dasharray/percent-units.png", false), 0)}
#[ignore] #[test] fn resvg_painting_stroke_dasharray_0_n_with_square_caps() {assert_eq!(run_test("svg/resvg/painting/stroke-dasharray/0-n-with-square-caps.svg", "ref/resvg/painting/stroke-dasharray/0-n-with-square-caps.png", "diff/resvg/painting/stroke-dasharray/0-n-with-square-caps.png", false), 0)}
#[test] fn resvg_painting_stroke_dasharray_multiple_subpaths() {assert_eq!(run_test("svg/resvg/painting/stroke-dasharray/multiple-subpaths.svg", "ref/resvg/painting/stroke-dasharray/multiple-subpaths.png", "diff/resvg/painting/stroke-dasharray/multiple-subpaths.png", false), 0)}
#[ignore] #[test] fn resvg_painting_stroke_dasharray_negative_values() {assert_eq!(run_test("svg/resvg/painting/stroke-dasharray/negative-values.svg", "ref/resvg/painting/stroke-dasharray/negative-values.png", "diff/resvg/painting/stroke-dasharray/negative-values.png", false), 0)}
#[test] fn resvg_painting_stroke_dasharray_on_a_circle() {assert_eq!(run_test("svg/resvg/painting/stroke-dasharray/on-a-circle.svg", "ref/resvg/painting/stroke-dasharray/on-a-circle.png", "diff/resvg/painting/stroke-dasharray/on-a-circle.png", false), 0)}
#[test] fn resvg_painting_stroke_dasharray_zero_sum() {assert_eq!(run_test("svg/resvg/painting/stroke-dasharray/zero-sum.svg", "ref/resvg/painting/stroke-dasharray/zero-sum.png", "diff/resvg/painting/stroke-dasharray/zero-sum.png", false), 0)}
#[test] fn resvg_painting_stroke_dasharray_none() {assert_eq!(run_test("svg/resvg/painting/stroke-dasharray/none.svg", "ref/resvg/painting/stroke-dasharray/none.png", "diff/resvg/painting/stroke-dasharray/none.png", false), 0)}
#[ignore] #[test] fn resvg_painting_stroke_dasharray_n_0() {assert_eq!(run_test("svg/resvg/painting/stroke-dasharray/n-0.svg", "ref/resvg/painting/stroke-dasharray/n-0.png", "diff/resvg/painting/stroke-dasharray/n-0.png", false), 0)}
#[test] fn resvg_painting_stroke_dasharray_comma_ws_separator() {assert_eq!(run_test("svg/resvg/painting/stroke-dasharray/comma-ws-separator.svg", "ref/resvg/painting/stroke-dasharray/comma-ws-separator.png", "diff/resvg/painting/stroke-dasharray/comma-ws-separator.png", false), 0)}
#[ignore] #[test] fn resvg_painting_stroke_dasharray_0_n_with_round_caps() {assert_eq!(run_test("svg/resvg/painting/stroke-dasharray/0-n-with-round-caps.svg", "ref/resvg/painting/stroke-dasharray/0-n-with-round-caps.png", "diff/resvg/painting/stroke-dasharray/0-n-with-round-caps.png", false), 0)}
#[ignore] #[test] fn resvg_painting_stroke_dasharray_odd_count() {assert_eq!(run_test("svg/resvg/painting/stroke-dasharray/odd-count.svg", "ref/resvg/painting/stroke-dasharray/odd-count.png", "diff/resvg/painting/stroke-dasharray/odd-count.png", false), 0)}
#[test] fn resvg_painting_marker_with_a_text_child() {assert_eq!(run_test("svg/resvg/painting/marker/with-a-text-child.svg", "ref/resvg/painting/marker/with-a-text-child.png", "diff/resvg/painting/marker/with-a-text-child.png", false), 0)}
#[test] fn resvg_painting_marker_orient_1_5rad() {assert_eq!(run_test("svg/resvg/painting/marker/orient=1.5rad.svg", "ref/resvg/painting/marker/orient=1.5rad.png", "diff/resvg/painting/marker/orient=1.5rad.png", false), 0)}
#[test] fn resvg_painting_marker_orient_0_25turn() {assert_eq!(run_test("svg/resvg/painting/marker/orient=0.25turn.svg", "ref/resvg/painting/marker/orient=0.25turn.png", "diff/resvg/painting/marker/orient=0.25turn.png", false), 0)}
#[test] fn resvg_painting_marker_orient_auto_on_M_C_L() {assert_eq!(run_test("svg/resvg/painting/marker/orient=auto-on-M-C-L.svg", "ref/resvg/painting/marker/orient=auto-on-M-C-L.png", "diff/resvg/painting/marker/orient=auto-on-M-C-L.png", false), 0)}
#[test] fn resvg_painting_marker_orient_auto_on_M_L_M_C() {assert_eq!(run_test("svg/resvg/painting/marker/orient=auto-on-M-L-M-C.svg", "ref/resvg/painting/marker/orient=auto-on-M-L-M-C.png", "diff/resvg/painting/marker/orient=auto-on-M-L-M-C.png", false), 0)}
#[test] fn resvg_painting_marker_marker_on_polygon() {assert_eq!(run_test("svg/resvg/painting/marker/marker-on-polygon.svg", "ref/resvg/painting/marker/marker-on-polygon.png", "diff/resvg/painting/marker/marker-on-polygon.png", false), 0)}
#[test] fn resvg_painting_marker_empty() {assert_eq!(run_test("svg/resvg/painting/marker/empty.svg", "ref/resvg/painting/marker/empty.png", "diff/resvg/painting/marker/empty.png", false), 0)}
#[test] fn resvg_painting_marker_orient_auto_on_M_C_C_2() {assert_eq!(run_test("svg/resvg/painting/marker/orient=auto-on-M-C-C-2.svg", "ref/resvg/painting/marker/orient=auto-on-M-C-C-2.png", "diff/resvg/painting/marker/orient=auto-on-M-C-C-2.png", false), 0)}
#[test] fn resvg_painting_marker_orient_auto_on_M_C_C_3() {assert_eq!(run_test("svg/resvg/painting/marker/orient=auto-on-M-C-C-3.svg", "ref/resvg/painting/marker/orient=auto-on-M-C-C-3.png", "diff/resvg/painting/marker/orient=auto-on-M-C-C-3.png", false), 0)}
#[test] fn resvg_painting_marker_marker_on_text() {assert_eq!(run_test("svg/resvg/painting/marker/marker-on-text.svg", "ref/resvg/painting/marker/marker-on-text.png", "diff/resvg/painting/marker/marker-on-text.png", false), 0)}
#[test] fn resvg_painting_marker_orient_auto_on_M_C_C_1() {assert_eq!(run_test("svg/resvg/painting/marker/orient=auto-on-M-C-C-1.svg", "ref/resvg/painting/marker/orient=auto-on-M-C-C-1.png", "diff/resvg/painting/marker/orient=auto-on-M-C-C-1.png", false), 0)}
#[test] fn resvg_painting_marker_the_marker_property() {assert_eq!(run_test("svg/resvg/painting/marker/the-marker-property.svg", "ref/resvg/painting/marker/the-marker-property.png", "diff/resvg/painting/marker/the-marker-property.png", false), 0)}
#[test] fn resvg_painting_marker_nested() {assert_eq!(run_test("svg/resvg/painting/marker/nested.svg", "ref/resvg/painting/marker/nested.png", "diff/resvg/painting/marker/nested.png", false), 0)}
#[test] fn resvg_painting_marker_orient_auto_on_M_L_C() {assert_eq!(run_test("svg/resvg/painting/marker/orient=auto-on-M-L-C.svg", "ref/resvg/painting/marker/orient=auto-on-M-L-C.png", "diff/resvg/painting/marker/orient=auto-on-M-L-C.png", false), 0)}
#[test] fn resvg_painting_marker_orient_auto_on_M_C_C_4() {assert_eq!(run_test("svg/resvg/painting/marker/orient=auto-on-M-C-C-4.svg", "ref/resvg/painting/marker/orient=auto-on-M-C-C-4.png", "diff/resvg/painting/marker/orient=auto-on-M-C-C-4.png", false), 0)}
#[test] fn resvg_painting_marker_orient_auto_on_M_C_C_5() {assert_eq!(run_test("svg/resvg/painting/marker/orient=auto-on-M-C-C-5.svg", "ref/resvg/painting/marker/orient=auto-on-M-C-C-5.png", "diff/resvg/painting/marker/orient=auto-on-M-C-C-5.png", false), 0)}
#[test] fn resvg_painting_marker_with_invalid_markerUnits() {assert_eq!(run_test("svg/resvg/painting/marker/with-invalid-markerUnits.svg", "ref/resvg/painting/marker/with-invalid-markerUnits.png", "diff/resvg/painting/marker/with-invalid-markerUnits.png", false), 0)}
#[test] fn resvg_painting_marker_orient_auto_on_M_C_M_L() {assert_eq!(run_test("svg/resvg/painting/marker/orient=auto-on-M-C-M-L.svg", "ref/resvg/painting/marker/orient=auto-on-M-C-M-L.png", "diff/resvg/painting/marker/orient=auto-on-M-C-M-L.png", false), 0)}
#[test] fn resvg_painting_marker_only_marker_start() {assert_eq!(run_test("svg/resvg/painting/marker/only-marker-start.svg", "ref/resvg/painting/marker/only-marker-start.png", "diff/resvg/painting/marker/only-marker-start.png", false), 0)}
#[test] fn resvg_painting_marker_with_viewBox_2() {assert_eq!(run_test("svg/resvg/painting/marker/with-viewBox-2.svg", "ref/resvg/painting/marker/with-viewBox-2.png", "diff/resvg/painting/marker/with-viewBox-2.png", false), 0)}
#[test] fn resvg_painting_marker_orient_9999() {assert_eq!(run_test("svg/resvg/painting/marker/orient=9999.svg", "ref/resvg/painting/marker/orient=9999.png", "diff/resvg/painting/marker/orient=9999.png", false), 0)}
#[test] fn resvg_painting_marker_orient_auto_on_M_C_C_7() {assert_eq!(run_test("svg/resvg/painting/marker/orient=auto-on-M-C-C-7.svg", "ref/resvg/painting/marker/orient=auto-on-M-C-C-7.png", "diff/resvg/painting/marker/orient=auto-on-M-C-C-7.png", false), 0)}
#[test] fn resvg_painting_marker_orient_auto_on_M_C_C_6() {assert_eq!(run_test("svg/resvg/painting/marker/orient=auto-on-M-C-C-6.svg", "ref/resvg/painting/marker/orient=auto-on-M-C-C-6.png", "diff/resvg/painting/marker/orient=auto-on-M-C-C-6.png", false), 0)}
#[test] fn resvg_painting_marker_marker_on_line() {assert_eq!(run_test("svg/resvg/painting/marker/marker-on-line.svg", "ref/resvg/painting/marker/marker-on-line.png", "diff/resvg/painting/marker/marker-on-line.png", false), 0)}
#[test] fn resvg_painting_marker_default_clip() {assert_eq!(run_test("svg/resvg/painting/marker/default-clip.svg", "ref/resvg/painting/marker/default-clip.png", "diff/resvg/painting/marker/default-clip.png", false), 0)}
#[test] fn resvg_painting_marker_only_marker_mid() {assert_eq!(run_test("svg/resvg/painting/marker/only-marker-mid.svg", "ref/resvg/painting/marker/only-marker-mid.png", "diff/resvg/painting/marker/only-marker-mid.png", false), 0)}
#[test] fn resvg_painting_marker_with_markerUnits_userSpaceOnUse() {assert_eq!(run_test("svg/resvg/painting/marker/with-markerUnits=userSpaceOnUse.svg", "ref/resvg/painting/marker/with-markerUnits=userSpaceOnUse.png", "diff/resvg/painting/marker/with-markerUnits=userSpaceOnUse.png", false), 0)}
#[test] fn resvg_painting_marker_with_a_large_stroke() {assert_eq!(run_test("svg/resvg/painting/marker/with-a-large-stroke.svg", "ref/resvg/painting/marker/with-a-large-stroke.png", "diff/resvg/painting/marker/with-a-large-stroke.png", false), 0)}
#[test] fn resvg_painting_marker_recursive_2() {assert_eq!(run_test("svg/resvg/painting/marker/recursive-2.svg", "ref/resvg/painting/marker/recursive-2.png", "diff/resvg/painting/marker/recursive-2.png", false), 0)}
#[test] fn resvg_painting_marker_marker_on_rounded_rect() {assert_eq!(run_test("svg/resvg/painting/marker/marker-on-rounded-rect.svg", "ref/resvg/painting/marker/marker-on-rounded-rect.png", "diff/resvg/painting/marker/marker-on-rounded-rect.png", false), 0)}
#[test] fn resvg_painting_marker_orient_auto_on_M_L_L() {assert_eq!(run_test("svg/resvg/painting/marker/orient=auto-on-M-L-L.svg", "ref/resvg/painting/marker/orient=auto-on-M-L-L.png", "diff/resvg/painting/marker/orient=auto-on-M-L-L.png", false), 0)}
#[test] fn resvg_painting_marker_orient_auto_on_M_L_Z() {assert_eq!(run_test("svg/resvg/painting/marker/orient=auto-on-M-L-Z.svg", "ref/resvg/painting/marker/orient=auto-on-M-L-Z.png", "diff/resvg/painting/marker/orient=auto-on-M-L-Z.png", false), 0)}
#[test] fn resvg_painting_marker_recursive_3() {assert_eq!(run_test("svg/resvg/painting/marker/recursive-3.svg", "ref/resvg/painting/marker/recursive-3.png", "diff/resvg/painting/marker/recursive-3.png", false), 0)}
#[test] fn resvg_painting_marker_inheritance_1() {assert_eq!(run_test("svg/resvg/painting/marker/inheritance-1.svg", "ref/resvg/painting/marker/inheritance-1.png", "diff/resvg/painting/marker/inheritance-1.png", false), 0)}
#[test] fn resvg_painting_marker_recursive_1() {assert_eq!(run_test("svg/resvg/painting/marker/recursive-1.svg", "ref/resvg/painting/marker/recursive-1.png", "diff/resvg/painting/marker/recursive-1.png", false), 0)}
#[test] fn resvg_painting_marker_orient__45() {assert_eq!(run_test("svg/resvg/painting/marker/orient=-45.svg", "ref/resvg/painting/marker/orient=-45.png", "diff/resvg/painting/marker/orient=-45.png", false), 0)}
#[test] fn resvg_painting_marker_orient_auto_on_M_C_C_8() {assert_eq!(run_test("svg/resvg/painting/marker/orient=auto-on-M-C-C-8.svg", "ref/resvg/painting/marker/orient=auto-on-M-C-C-8.png", "diff/resvg/painting/marker/orient=auto-on-M-C-C-8.png", false), 0)}
#[test] fn resvg_painting_marker_marker_on_circle() {assert_eq!(run_test("svg/resvg/painting/marker/marker-on-circle.svg", "ref/resvg/painting/marker/marker-on-circle.png", "diff/resvg/painting/marker/marker-on-circle.png", false), 0)}
#[test] fn resvg_painting_marker_orient_40grad() {assert_eq!(run_test("svg/resvg/painting/marker/orient=40grad.svg", "ref/resvg/painting/marker/orient=40grad.png", "diff/resvg/painting/marker/orient=40grad.png", false), 0)}
#[test] fn resvg_painting_marker_zero_sized_stroke() {assert_eq!(run_test("svg/resvg/painting/marker/zero-sized-stroke.svg", "ref/resvg/painting/marker/zero-sized-stroke.png", "diff/resvg/painting/marker/zero-sized-stroke.png", false), 0)}
#[test] fn resvg_painting_marker_inheritance_2() {assert_eq!(run_test("svg/resvg/painting/marker/inheritance-2.svg", "ref/resvg/painting/marker/inheritance-2.png", "diff/resvg/painting/marker/inheritance-2.png", false), 0)}
#[test] fn resvg_painting_marker_recursive_4() {assert_eq!(run_test("svg/resvg/painting/marker/recursive-4.svg", "ref/resvg/painting/marker/recursive-4.png", "diff/resvg/painting/marker/recursive-4.png", false), 0)}
#[test] fn resvg_painting_marker_recursive_5() {assert_eq!(run_test("svg/resvg/painting/marker/recursive-5.svg", "ref/resvg/painting/marker/recursive-5.png", "diff/resvg/painting/marker/recursive-5.png", false), 0)}
#[test] fn resvg_painting_marker_orient_auto_on_M_L() {assert_eq!(run_test("svg/resvg/painting/marker/orient=auto-on-M-L.svg", "ref/resvg/painting/marker/orient=auto-on-M-L.png", "diff/resvg/painting/marker/orient=auto-on-M-L.png", false), 0)}
#[test] fn resvg_painting_marker_percent_values() {assert_eq!(run_test("svg/resvg/painting/marker/percent-values.svg", "ref/resvg/painting/marker/percent-values.png", "diff/resvg/painting/marker/percent-values.png", false), 0)}
#[test] fn resvg_painting_marker_orient_30() {assert_eq!(run_test("svg/resvg/painting/marker/orient=30.svg", "ref/resvg/painting/marker/orient=30.png", "diff/resvg/painting/marker/orient=30.png", false), 0)}
#[test] fn resvg_painting_marker_orient_auto_start_reverse() {assert_eq!(run_test("svg/resvg/painting/marker/orient=auto-start-reverse.svg", "ref/resvg/painting/marker/orient=auto-start-reverse.png", "diff/resvg/painting/marker/orient=auto-start-reverse.png", false), 0)}
#[test] fn resvg_painting_marker_marker_with_a_negative_size() {assert_eq!(run_test("svg/resvg/painting/marker/marker-with-a-negative-size.svg", "ref/resvg/painting/marker/marker-with-a-negative-size.png", "diff/resvg/painting/marker/marker-with-a-negative-size.png", false), 0)}
#[test] fn resvg_painting_marker_orient_auto_on_M_L_L_Z_Z_Z() {assert_eq!(run_test("svg/resvg/painting/marker/orient=auto-on-M-L-L-Z-Z-Z.svg", "ref/resvg/painting/marker/orient=auto-on-M-L-L-Z-Z-Z.png", "diff/resvg/painting/marker/orient=auto-on-M-L-L-Z-Z-Z.png", false), 0)}
#[test] fn resvg_painting_marker_zero_length_path_2() {assert_eq!(run_test("svg/resvg/painting/marker/zero-length-path-2.svg", "ref/resvg/painting/marker/zero-length-path-2.png", "diff/resvg/painting/marker/zero-length-path-2.png", false), 0)}
#[test] fn resvg_painting_marker_only_marker_end() {assert_eq!(run_test("svg/resvg/painting/marker/only-marker-end.svg", "ref/resvg/painting/marker/only-marker-end.png", "diff/resvg/painting/marker/only-marker-end.png", false), 0)}
#[ignore] #[test] fn resvg_painting_marker_with_an_image_child() {assert_eq!(run_test("svg/resvg/painting/marker/with-an-image-child.svg", "ref/resvg/painting/marker/with-an-image-child.png", "diff/resvg/painting/marker/with-an-image-child.png", false), 0)}
#[test] fn resvg_painting_marker_invalid_child() {assert_eq!(run_test("svg/resvg/painting/marker/invalid-child.svg", "ref/resvg/painting/marker/invalid-child.png", "diff/resvg/painting/marker/invalid-child.png", false), 0)}
#[test] fn resvg_painting_marker_marker_on_rect() {assert_eq!(run_test("svg/resvg/painting/marker/marker-on-rect.svg", "ref/resvg/painting/marker/marker-on-rect.png", "diff/resvg/painting/marker/marker-on-rect.png", false), 0)}
#[ignore] #[test] fn resvg_painting_marker_on_ArcTo() {assert_eq!(run_test("svg/resvg/painting/marker/on-ArcTo.svg", "ref/resvg/painting/marker/on-ArcTo.png", "diff/resvg/painting/marker/on-ArcTo.png", false), 0)}
#[test] fn resvg_painting_marker_zero_length_path_1() {assert_eq!(run_test("svg/resvg/painting/marker/zero-length-path-1.svg", "ref/resvg/painting/marker/zero-length-path-1.png", "diff/resvg/painting/marker/zero-length-path-1.png", false), 0)}
#[test] fn resvg_painting_marker_target_with_subpaths_1() {assert_eq!(run_test("svg/resvg/painting/marker/target-with-subpaths-1.svg", "ref/resvg/painting/marker/target-with-subpaths-1.png", "diff/resvg/painting/marker/target-with-subpaths-1.png", false), 0)}
#[test] fn resvg_painting_marker_the_marker_property_in_CSS() {assert_eq!(run_test("svg/resvg/painting/marker/the-marker-property-in-CSS.svg", "ref/resvg/painting/marker/the-marker-property-in-CSS.png", "diff/resvg/painting/marker/the-marker-property-in-CSS.png", false), 0)}
#[test] fn resvg_painting_marker_no_stroke_on_target() {assert_eq!(run_test("svg/resvg/painting/marker/no-stroke-on-target.svg", "ref/resvg/painting/marker/no-stroke-on-target.png", "diff/resvg/painting/marker/no-stroke-on-target.png", false), 0)}
#[ignore] #[test] fn resvg_painting_marker_target_with_subpaths_2() {assert_eq!(run_test("svg/resvg/painting/marker/target-with-subpaths-2.svg", "ref/resvg/painting/marker/target-with-subpaths-2.png", "diff/resvg/painting/marker/target-with-subpaths-2.png", false), 0)}
#[test] fn resvg_painting_marker_zero_sized() {assert_eq!(run_test("svg/resvg/painting/marker/zero-sized.svg", "ref/resvg/painting/marker/zero-sized.png", "diff/resvg/painting/marker/zero-sized.png", false), 0)}
#[test] fn resvg_painting_marker_marker_on_polyline() {assert_eq!(run_test("svg/resvg/painting/marker/marker-on-polyline.svg", "ref/resvg/painting/marker/marker-on-polyline.png", "diff/resvg/painting/marker/marker-on-polyline.png", false), 0)}
#[test] fn resvg_painting_image_rendering_optimizeSpeed_on_SVG() {assert_eq!(run_test("svg/resvg/painting/image-rendering/optimizeSpeed-on-SVG.svg", "ref/resvg/painting/image-rendering/optimizeSpeed-on-SVG.png", "diff/resvg/painting/image-rendering/optimizeSpeed-on-SVG.png", false), 0)}
#[ignore] #[test] fn resvg_painting_image_rendering_on_feImage() {assert_eq!(run_test("svg/resvg/painting/image-rendering/on-feImage.svg", "ref/resvg/painting/image-rendering/on-feImage.png", "diff/resvg/painting/image-rendering/on-feImage.png", false), 0)}
#[test] fn resvg_painting_image_rendering_optimizeSpeed() {assert_eq!(run_test("svg/resvg/painting/image-rendering/optimizeSpeed.svg", "ref/resvg/painting/image-rendering/optimizeSpeed.png", "diff/resvg/painting/image-rendering/optimizeSpeed.png", false), 0)}
#[test] fn resvg_painting_fill_rule_nonzero() {assert_eq!(run_test("svg/resvg/painting/fill-rule/nonzero.svg", "ref/resvg/painting/fill-rule/nonzero.png", "diff/resvg/painting/fill-rule/nonzero.png", false), 0)}
#[test] fn resvg_painting_fill_rule_evenodd() {assert_eq!(run_test("svg/resvg/painting/fill-rule/evenodd.svg", "ref/resvg/painting/fill-rule/evenodd.png", "diff/resvg/painting/fill-rule/evenodd.png", false), 0)}
#[test] fn resvg_painting_mix_blend_mode_exclusion() {assert_eq!(run_test("svg/resvg/painting/mix-blend-mode/exclusion.svg", "ref/resvg/painting/mix-blend-mode/exclusion.png", "diff/resvg/painting/mix-blend-mode/exclusion.png", false), 0)}
#[test] fn resvg_painting_mix_blend_mode_xor() {assert_eq!(run_test("svg/resvg/painting/mix-blend-mode/xor.svg", "ref/resvg/painting/mix-blend-mode/xor.png", "diff/resvg/painting/mix-blend-mode/xor.png", false), 0)}
#[test] fn resvg_painting_mix_blend_mode_multiply() {assert_eq!(run_test("svg/resvg/painting/mix-blend-mode/multiply.svg", "ref/resvg/painting/mix-blend-mode/multiply.png", "diff/resvg/painting/mix-blend-mode/multiply.png", false), 0)}
#[test] fn resvg_painting_mix_blend_mode_hard_light() {assert_eq!(run_test("svg/resvg/painting/mix-blend-mode/hard-light.svg", "ref/resvg/painting/mix-blend-mode/hard-light.png", "diff/resvg/painting/mix-blend-mode/hard-light.png", false), 0)}
#[test] fn resvg_painting_mix_blend_mode_opacity_on_group() {assert_eq!(run_test("svg/resvg/painting/mix-blend-mode/opacity-on-group.svg", "ref/resvg/painting/mix-blend-mode/opacity-on-group.png", "diff/resvg/painting/mix-blend-mode/opacity-on-group.png", false), 0)}
#[test] fn resvg_painting_mix_blend_mode_color_burn() {assert_eq!(run_test("svg/resvg/painting/mix-blend-mode/color-burn.svg", "ref/resvg/painting/mix-blend-mode/color-burn.png", "diff/resvg/painting/mix-blend-mode/color-burn.png", false), 0)}
#[test] fn resvg_painting_mix_blend_mode_difference() {assert_eq!(run_test("svg/resvg/painting/mix-blend-mode/difference.svg", "ref/resvg/painting/mix-blend-mode/difference.png", "diff/resvg/painting/mix-blend-mode/difference.png", false), 0)}
#[test] fn resvg_painting_mix_blend_mode_hue() {assert_eq!(run_test("svg/resvg/painting/mix-blend-mode/hue.svg", "ref/resvg/painting/mix-blend-mode/hue.png", "diff/resvg/painting/mix-blend-mode/hue.png", false), 0)}
#[test] fn resvg_painting_mix_blend_mode_as_property() {assert_eq!(run_test("svg/resvg/painting/mix-blend-mode/as-property.svg", "ref/resvg/painting/mix-blend-mode/as-property.png", "diff/resvg/painting/mix-blend-mode/as-property.png", false), 0)}
#[test] fn resvg_painting_mix_blend_mode_opacity_on_element() {assert_eq!(run_test("svg/resvg/painting/mix-blend-mode/opacity-on-element.svg", "ref/resvg/painting/mix-blend-mode/opacity-on-element.png", "diff/resvg/painting/mix-blend-mode/opacity-on-element.png", false), 0)}
#[test] fn resvg_painting_mix_blend_mode_saturation() {assert_eq!(run_test("svg/resvg/painting/mix-blend-mode/saturation.svg", "ref/resvg/painting/mix-blend-mode/saturation.png", "diff/resvg/painting/mix-blend-mode/saturation.png", false), 0)}
#[test] fn resvg_painting_mix_blend_mode_luminosity() {assert_eq!(run_test("svg/resvg/painting/mix-blend-mode/luminosity.svg", "ref/resvg/painting/mix-blend-mode/luminosity.png", "diff/resvg/painting/mix-blend-mode/luminosity.png", false), 0)}
#[ignore] #[test] fn resvg_painting_mix_blend_mode_color_dodge() {assert_eq!(run_test("svg/resvg/painting/mix-blend-mode/color-dodge.svg", "ref/resvg/painting/mix-blend-mode/color-dodge.png", "diff/resvg/painting/mix-blend-mode/color-dodge.png", false), 0)}
#[test] fn resvg_painting_mix_blend_mode_overlay() {assert_eq!(run_test("svg/resvg/painting/mix-blend-mode/overlay.svg", "ref/resvg/painting/mix-blend-mode/overlay.png", "diff/resvg/painting/mix-blend-mode/overlay.png", false), 0)}
#[test] fn resvg_painting_mix_blend_mode_lighten() {assert_eq!(run_test("svg/resvg/painting/mix-blend-mode/lighten.svg", "ref/resvg/painting/mix-blend-mode/lighten.png", "diff/resvg/painting/mix-blend-mode/lighten.png", false), 0)}
#[test] fn resvg_painting_mix_blend_mode_normal() {assert_eq!(run_test("svg/resvg/painting/mix-blend-mode/normal.svg", "ref/resvg/painting/mix-blend-mode/normal.png", "diff/resvg/painting/mix-blend-mode/normal.png", false), 0)}
#[test] fn resvg_painting_mix_blend_mode_color() {assert_eq!(run_test("svg/resvg/painting/mix-blend-mode/color.svg", "ref/resvg/painting/mix-blend-mode/color.png", "diff/resvg/painting/mix-blend-mode/color.png", false), 0)}
#[test] fn resvg_painting_mix_blend_mode_screen() {assert_eq!(run_test("svg/resvg/painting/mix-blend-mode/screen.svg", "ref/resvg/painting/mix-blend-mode/screen.png", "diff/resvg/painting/mix-blend-mode/screen.png", false), 0)}
#[test] fn resvg_painting_mix_blend_mode_soft_light() {assert_eq!(run_test("svg/resvg/painting/mix-blend-mode/soft-light.svg", "ref/resvg/painting/mix-blend-mode/soft-light.png", "diff/resvg/painting/mix-blend-mode/soft-light.png", false), 0)}
#[test] fn resvg_painting_mix_blend_mode_darken() {assert_eq!(run_test("svg/resvg/painting/mix-blend-mode/darken.svg", "ref/resvg/painting/mix-blend-mode/darken.png", "diff/resvg/painting/mix-blend-mode/darken.png", false), 0)}
#[test] fn resvg_text_alignment_baseline_two_textPath_with_middle_on_first() {assert_eq!(run_test("svg/resvg/text/alignment-baseline/two-textPath-with-middle-on-first.svg", "ref/resvg/text/alignment-baseline/two-textPath-with-middle-on-first.png", "diff/resvg/text/alignment-baseline/two-textPath-with-middle-on-first.png", false), 0)}
#[test] fn resvg_text_alignment_baseline_mathematical() {assert_eq!(run_test("svg/resvg/text/alignment-baseline/mathematical.svg", "ref/resvg/text/alignment-baseline/mathematical.png", "diff/resvg/text/alignment-baseline/mathematical.png", false), 0)}
#[test] fn resvg_text_alignment_baseline_middle_on_textPath() {assert_eq!(run_test("svg/resvg/text/alignment-baseline/middle-on-textPath.svg", "ref/resvg/text/alignment-baseline/middle-on-textPath.png", "diff/resvg/text/alignment-baseline/middle-on-textPath.png", false), 0)}
#[test] fn resvg_text_alignment_baseline_text_before_edge() {assert_eq!(run_test("svg/resvg/text/alignment-baseline/text-before-edge.svg", "ref/resvg/text/alignment-baseline/text-before-edge.png", "diff/resvg/text/alignment-baseline/text-before-edge.png", false), 0)}
#[test] fn resvg_text_alignment_baseline_hanging_with_underline() {assert_eq!(run_test("svg/resvg/text/alignment-baseline/hanging-with-underline.svg", "ref/resvg/text/alignment-baseline/hanging-with-underline.png", "diff/resvg/text/alignment-baseline/hanging-with-underline.png", false), 0)}
#[ignore] #[test] fn resvg_text_alignment_baseline_baseline() {assert_eq!(run_test("svg/resvg/text/alignment-baseline/baseline.svg", "ref/resvg/text/alignment-baseline/baseline.png", "diff/resvg/text/alignment-baseline/baseline.png", false), 0)}
#[test] fn resvg_text_alignment_baseline_alphabetic() {assert_eq!(run_test("svg/resvg/text/alignment-baseline/alphabetic.svg", "ref/resvg/text/alignment-baseline/alphabetic.png", "diff/resvg/text/alignment-baseline/alphabetic.png", false), 0)}
#[test] fn resvg_text_alignment_baseline_before_edge() {assert_eq!(run_test("svg/resvg/text/alignment-baseline/before-edge.svg", "ref/resvg/text/alignment-baseline/before-edge.png", "diff/resvg/text/alignment-baseline/before-edge.png", false), 0)}
#[test] fn resvg_text_alignment_baseline_auto() {assert_eq!(run_test("svg/resvg/text/alignment-baseline/auto.svg", "ref/resvg/text/alignment-baseline/auto.png", "diff/resvg/text/alignment-baseline/auto.png", false), 0)}
#[test] fn resvg_text_alignment_baseline_middle() {assert_eq!(run_test("svg/resvg/text/alignment-baseline/middle.svg", "ref/resvg/text/alignment-baseline/middle.png", "diff/resvg/text/alignment-baseline/middle.png", false), 0)}
#[ignore] #[test] fn resvg_text_alignment_baseline_text_after_edge() {assert_eq!(run_test("svg/resvg/text/alignment-baseline/text-after-edge.svg", "ref/resvg/text/alignment-baseline/text-after-edge.png", "diff/resvg/text/alignment-baseline/text-after-edge.png", false), 0)}
#[test] fn resvg_text_alignment_baseline_hanging_on_tspan() {assert_eq!(run_test("svg/resvg/text/alignment-baseline/hanging-on-tspan.svg", "ref/resvg/text/alignment-baseline/hanging-on-tspan.png", "diff/resvg/text/alignment-baseline/hanging-on-tspan.png", false), 0)}
#[test] fn resvg_text_alignment_baseline_inherit() {assert_eq!(run_test("svg/resvg/text/alignment-baseline/inherit.svg", "ref/resvg/text/alignment-baseline/inherit.png", "diff/resvg/text/alignment-baseline/inherit.png", false), 0)}
#[ignore] #[test] fn resvg_text_alignment_baseline_ideographic() {assert_eq!(run_test("svg/resvg/text/alignment-baseline/ideographic.svg", "ref/resvg/text/alignment-baseline/ideographic.png", "diff/resvg/text/alignment-baseline/ideographic.png", false), 0)}
#[ignore] #[test] fn resvg_text_alignment_baseline_after_edge() {assert_eq!(run_test("svg/resvg/text/alignment-baseline/after-edge.svg", "ref/resvg/text/alignment-baseline/after-edge.png", "diff/resvg/text/alignment-baseline/after-edge.png", false), 0)}
#[test] fn resvg_text_alignment_baseline_hanging_and_baseline_shift_eq_20_on_tspan() {assert_eq!(run_test("svg/resvg/text/alignment-baseline/hanging-and-baseline-shift-eq-20-on-tspan.svg", "ref/resvg/text/alignment-baseline/hanging-and-baseline-shift-eq-20-on-tspan.png", "diff/resvg/text/alignment-baseline/hanging-and-baseline-shift-eq-20-on-tspan.png", false), 0)}
#[test] fn resvg_text_alignment_baseline_hanging() {assert_eq!(run_test("svg/resvg/text/alignment-baseline/hanging.svg", "ref/resvg/text/alignment-baseline/hanging.png", "diff/resvg/text/alignment-baseline/hanging.png", false), 0)}
#[ignore] #[test] fn resvg_text_alignment_baseline_hanging_on_vertical() {assert_eq!(run_test("svg/resvg/text/alignment-baseline/hanging-on-vertical.svg", "ref/resvg/text/alignment-baseline/hanging-on-vertical.png", "diff/resvg/text/alignment-baseline/hanging-on-vertical.png", false), 0)}
#[test] fn resvg_text_alignment_baseline_central() {assert_eq!(run_test("svg/resvg/text/alignment-baseline/central.svg", "ref/resvg/text/alignment-baseline/central.png", "diff/resvg/text/alignment-baseline/central.png", false), 0)}
#[test] fn resvg_text_tspan_style_override() {assert_eq!(run_test("svg/resvg/text/tspan/style-override.svg", "ref/resvg/text/tspan/style-override.png", "diff/resvg/text/tspan/style-override.png", false), 0)}
#[test] fn resvg_text_tspan_multiple_coordinates() {assert_eq!(run_test("svg/resvg/text/tspan/multiple-coordinates.svg", "ref/resvg/text/tspan/multiple-coordinates.png", "diff/resvg/text/tspan/multiple-coordinates.png", false), 0)}
#[ignore] #[test] fn resvg_text_tspan_with_filter() {assert_eq!(run_test("svg/resvg/text/tspan/with-filter.svg", "ref/resvg/text/tspan/with-filter.png", "diff/resvg/text/tspan/with-filter.png", false), 0)}
#[test] fn resvg_text_tspan_transform() {assert_eq!(run_test("svg/resvg/text/tspan/transform.svg", "ref/resvg/text/tspan/transform.png", "diff/resvg/text/tspan/transform.png", false), 0)}
#[test] fn resvg_text_tspan_pseudo_multi_line() {assert_eq!(run_test("svg/resvg/text/tspan/pseudo-multi-line.svg", "ref/resvg/text/tspan/pseudo-multi-line.png", "diff/resvg/text/tspan/pseudo-multi-line.png", false), 0)}
#[test] fn resvg_text_tspan_nested_rotate() {assert_eq!(run_test("svg/resvg/text/tspan/nested-rotate.svg", "ref/resvg/text/tspan/nested-rotate.png", "diff/resvg/text/tspan/nested-rotate.png", false), 0)}
#[ignore] #[test] fn resvg_text_tspan_bidi_reordering() {assert_eq!(run_test("svg/resvg/text/tspan/bidi-reordering.svg", "ref/resvg/text/tspan/bidi-reordering.png", "diff/resvg/text/tspan/bidi-reordering.png", false), 0)}
#[test] fn resvg_text_tspan_nested() {assert_eq!(run_test("svg/resvg/text/tspan/nested.svg", "ref/resvg/text/tspan/nested.png", "diff/resvg/text/tspan/nested.png", false), 0)}
#[test] fn resvg_text_tspan_without_attributes() {assert_eq!(run_test("svg/resvg/text/tspan/without-attributes.svg", "ref/resvg/text/tspan/without-attributes.png", "diff/resvg/text/tspan/without-attributes.png", false), 0)}
#[test] fn resvg_text_tspan_text_shaping_across_multiple_tspan_2() {assert_eq!(run_test("svg/resvg/text/tspan/text-shaping-across-multiple-tspan-2.svg", "ref/resvg/text/tspan/text-shaping-across-multiple-tspan-2.png", "diff/resvg/text/tspan/text-shaping-across-multiple-tspan-2.png", false), 0)}
#[test] fn resvg_text_tspan_with_x_and_y() {assert_eq!(run_test("svg/resvg/text/tspan/with-x-and-y.svg", "ref/resvg/text/tspan/with-x-and-y.png", "diff/resvg/text/tspan/with-x-and-y.png", false), 0)}
#[test] fn resvg_text_tspan_text_shaping_across_multiple_tspan_1() {assert_eq!(run_test("svg/resvg/text/tspan/text-shaping-across-multiple-tspan-1.svg", "ref/resvg/text/tspan/text-shaping-across-multiple-tspan-1.png", "diff/resvg/text/tspan/text-shaping-across-multiple-tspan-1.png", false), 0)}
#[test] fn resvg_text_tspan_mixed_font_size() {assert_eq!(run_test("svg/resvg/text/tspan/mixed-font-size.svg", "ref/resvg/text/tspan/mixed-font-size.png", "diff/resvg/text/tspan/mixed-font-size.png", false), 0)}
#[test] fn resvg_text_tspan_outside_the_text() {assert_eq!(run_test("svg/resvg/text/tspan/outside-the-text.svg", "ref/resvg/text/tspan/outside-the-text.png", "diff/resvg/text/tspan/outside-the-text.png", false), 0)}
#[test] fn resvg_text_tspan_with_dy() {assert_eq!(run_test("svg/resvg/text/tspan/with-dy.svg", "ref/resvg/text/tspan/with-dy.png", "diff/resvg/text/tspan/with-dy.png", false), 0)}
#[test] fn resvg_text_tspan_xml_space_2() {assert_eq!(run_test("svg/resvg/text/tspan/xml-space-2.svg", "ref/resvg/text/tspan/xml-space-2.png", "diff/resvg/text/tspan/xml-space-2.png", false), 0)}
#[ignore] #[test] fn resvg_text_tspan_with_mask() {assert_eq!(run_test("svg/resvg/text/tspan/with-mask.svg", "ref/resvg/text/tspan/with-mask.png", "diff/resvg/text/tspan/with-mask.png", false), 0)}
#[ignore] #[test] fn resvg_text_tspan_tspan_bbox_2() {assert_eq!(run_test("svg/resvg/text/tspan/tspan-bbox-2.svg", "ref/resvg/text/tspan/tspan-bbox-2.png", "diff/resvg/text/tspan/tspan-bbox-2.png", false), 0)}
#[ignore] #[test] fn resvg_text_tspan_with_clip_path() {assert_eq!(run_test("svg/resvg/text/tspan/with-clip-path.svg", "ref/resvg/text/tspan/with-clip-path.png", "diff/resvg/text/tspan/with-clip-path.png", false), 0)}
#[test] fn resvg_text_tspan_xml_space_1() {assert_eq!(run_test("svg/resvg/text/tspan/xml-space-1.svg", "ref/resvg/text/tspan/xml-space-1.png", "diff/resvg/text/tspan/xml-space-1.png", false), 0)}
#[test] fn resvg_text_tspan_nested_whitespaces() {assert_eq!(run_test("svg/resvg/text/tspan/nested-whitespaces.svg", "ref/resvg/text/tspan/nested-whitespaces.png", "diff/resvg/text/tspan/nested-whitespaces.png", false), 0)}
#[ignore] #[test] fn resvg_text_tspan_with_opacity() {assert_eq!(run_test("svg/resvg/text/tspan/with-opacity.svg", "ref/resvg/text/tspan/with-opacity.png", "diff/resvg/text/tspan/with-opacity.png", false), 0)}
#[ignore] #[test] fn resvg_text_tspan_tspan_bbox_1() {assert_eq!(run_test("svg/resvg/text/tspan/tspan-bbox-1.svg", "ref/resvg/text/tspan/tspan-bbox-1.png", "diff/resvg/text/tspan/tspan-bbox-1.png", false), 0)}
#[test] fn resvg_text_tspan_rotate_and_display_none() {assert_eq!(run_test("svg/resvg/text/tspan/rotate-and-display-none.svg", "ref/resvg/text/tspan/rotate-and-display-none.png", "diff/resvg/text/tspan/rotate-and-display-none.png", false), 0)}
#[test] fn resvg_text_tspan_only_with_y() {assert_eq!(run_test("svg/resvg/text/tspan/only-with-y.svg", "ref/resvg/text/tspan/only-with-y.png", "diff/resvg/text/tspan/only-with-y.png", false), 0)}
#[test] fn resvg_text_tspan_mixed_xml_space_2() {assert_eq!(run_test("svg/resvg/text/tspan/mixed-xml-space-2.svg", "ref/resvg/text/tspan/mixed-xml-space-2.png", "diff/resvg/text/tspan/mixed-xml-space-2.png", false), 0)}
#[test] fn resvg_text_tspan_mixed_xml_space_3() {assert_eq!(run_test("svg/resvg/text/tspan/mixed-xml-space-3.svg", "ref/resvg/text/tspan/mixed-xml-space-3.png", "diff/resvg/text/tspan/mixed-xml-space-3.png", false), 0)}
#[test] fn resvg_text_tspan_mixed() {assert_eq!(run_test("svg/resvg/text/tspan/mixed.svg", "ref/resvg/text/tspan/mixed.png", "diff/resvg/text/tspan/mixed.png", false), 0)}
#[test] fn resvg_text_tspan_mixed_xml_space_1() {assert_eq!(run_test("svg/resvg/text/tspan/mixed-xml-space-1.svg", "ref/resvg/text/tspan/mixed-xml-space-1.png", "diff/resvg/text/tspan/mixed-xml-space-1.png", false), 0)}
#[test] fn resvg_text_tspan_rotate_on_child() {assert_eq!(run_test("svg/resvg/text/tspan/rotate-on-child.svg", "ref/resvg/text/tspan/rotate-on-child.png", "diff/resvg/text/tspan/rotate-on-child.png", false), 0)}
#[test] fn resvg_text_tspan_sequential() {assert_eq!(run_test("svg/resvg/text/tspan/sequential.svg", "ref/resvg/text/tspan/sequential.png", "diff/resvg/text/tspan/sequential.png", false), 0)}
#[test] fn resvg_text_writing_mode_tb_with_dy_on_second_tspan() {assert_eq!(run_test("svg/resvg/text/writing-mode/tb-with-dy-on-second-tspan.svg", "ref/resvg/text/writing-mode/tb-with-dy-on-second-tspan.png", "diff/resvg/text/writing-mode/tb-with-dy-on-second-tspan.png", false), 0)}
#[test] fn resvg_text_writing_mode_tb_rl() {assert_eq!(run_test("svg/resvg/text/writing-mode/tb-rl.svg", "ref/resvg/text/writing-mode/tb-rl.png", "diff/resvg/text/writing-mode/tb-rl.png", false), 0)}
#[test] fn resvg_text_writing_mode_tb_with_dx_on_second_tspan() {assert_eq!(run_test("svg/resvg/text/writing-mode/tb-with-dx-on-second-tspan.svg", "ref/resvg/text/writing-mode/tb-with-dx-on-second-tspan.png", "diff/resvg/text/writing-mode/tb-with-dx-on-second-tspan.png", false), 0)}
#[test] fn resvg_text_writing_mode_lr_tb() {assert_eq!(run_test("svg/resvg/text/writing-mode/lr-tb.svg", "ref/resvg/text/writing-mode/lr-tb.png", "diff/resvg/text/writing-mode/lr-tb.png", false), 0)}
#[ignore] #[test] fn resvg_text_writing_mode_mixed_languages_with_tb_and_underline() {assert_eq!(run_test("svg/resvg/text/writing-mode/mixed-languages-with-tb-and-underline.svg", "ref/resvg/text/writing-mode/mixed-languages-with-tb-and-underline.png", "diff/resvg/text/writing-mode/mixed-languages-with-tb-and-underline.png", false), 0)}
#[test] fn resvg_text_writing_mode_rl_tb() {assert_eq!(run_test("svg/resvg/text/writing-mode/rl-tb.svg", "ref/resvg/text/writing-mode/rl-tb.png", "diff/resvg/text/writing-mode/rl-tb.png", false), 0)}
#[test] fn resvg_text_writing_mode_lr() {assert_eq!(run_test("svg/resvg/text/writing-mode/lr.svg", "ref/resvg/text/writing-mode/lr.png", "diff/resvg/text/writing-mode/lr.png", false), 0)}
#[ignore] #[test] fn resvg_text_writing_mode_japanese_with_tb() {assert_eq!(run_test("svg/resvg/text/writing-mode/japanese-with-tb.svg", "ref/resvg/text/writing-mode/japanese-with-tb.png", "diff/resvg/text/writing-mode/japanese-with-tb.png", false), 0)}
#[test] fn resvg_text_writing_mode_tb() {assert_eq!(run_test("svg/resvg/text/writing-mode/tb.svg", "ref/resvg/text/writing-mode/tb.png", "diff/resvg/text/writing-mode/tb.png", false), 0)}
#[ignore] #[test] fn resvg_text_writing_mode_tb_with_rotate_and_underline() {assert_eq!(run_test("svg/resvg/text/writing-mode/tb-with-rotate-and-underline.svg", "ref/resvg/text/writing-mode/tb-with-rotate-and-underline.png", "diff/resvg/text/writing-mode/tb-with-rotate-and-underline.png", false), 0)}
#[test] fn resvg_text_writing_mode_invalid_value() {assert_eq!(run_test("svg/resvg/text/writing-mode/invalid-value.svg", "ref/resvg/text/writing-mode/invalid-value.png", "diff/resvg/text/writing-mode/invalid-value.png", false), 0)}
#[test] fn resvg_text_writing_mode_tb_with_alignment() {assert_eq!(run_test("svg/resvg/text/writing-mode/tb-with-alignment.svg", "ref/resvg/text/writing-mode/tb-with-alignment.png", "diff/resvg/text/writing-mode/tb-with-alignment.png", false), 0)}
#[ignore] #[test] fn resvg_text_writing_mode_vertical_rl() {assert_eq!(run_test("svg/resvg/text/writing-mode/vertical-rl.svg", "ref/resvg/text/writing-mode/vertical-rl.png", "diff/resvg/text/writing-mode/vertical-rl.png", false), 0)}
#[test] fn resvg_text_writing_mode_tb_with_dx_on_tspan() {assert_eq!(run_test("svg/resvg/text/writing-mode/tb-with-dx-on-tspan.svg", "ref/resvg/text/writing-mode/tb-with-dx-on-tspan.png", "diff/resvg/text/writing-mode/tb-with-dx-on-tspan.png", false), 0)}
#[test] fn resvg_text_writing_mode_inheritance() {assert_eq!(run_test("svg/resvg/text/writing-mode/inheritance.svg", "ref/resvg/text/writing-mode/inheritance.png", "diff/resvg/text/writing-mode/inheritance.png", false), 0)}
#[test] fn resvg_text_writing_mode_on_tspan() {assert_eq!(run_test("svg/resvg/text/writing-mode/on-tspan.svg", "ref/resvg/text/writing-mode/on-tspan.png", "diff/resvg/text/writing-mode/on-tspan.png", false), 0)}
#[ignore] #[test] fn resvg_text_writing_mode_mixed_languages_with_tb() {assert_eq!(run_test("svg/resvg/text/writing-mode/mixed-languages-with-tb.svg", "ref/resvg/text/writing-mode/mixed-languages-with-tb.png", "diff/resvg/text/writing-mode/mixed-languages-with-tb.png", false), 0)}
#[ignore] #[test] fn resvg_text_writing_mode_tb_and_punctuation() {assert_eq!(run_test("svg/resvg/text/writing-mode/tb-and-punctuation.svg", "ref/resvg/text/writing-mode/tb-and-punctuation.png", "diff/resvg/text/writing-mode/tb-and-punctuation.png", false), 0)}
#[ignore] #[test] fn resvg_text_writing_mode_tb_with_rotate() {assert_eq!(run_test("svg/resvg/text/writing-mode/tb-with-rotate.svg", "ref/resvg/text/writing-mode/tb-with-rotate.png", "diff/resvg/text/writing-mode/tb-with-rotate.png", false), 0)}
#[ignore] #[test] fn resvg_text_writing_mode_arabic_with_rl() {assert_eq!(run_test("svg/resvg/text/writing-mode/arabic-with-rl.svg", "ref/resvg/text/writing-mode/arabic-with-rl.png", "diff/resvg/text/writing-mode/arabic-with-rl.png", false), 0)}
#[test] fn resvg_text_writing_mode_horizontal_tb() {assert_eq!(run_test("svg/resvg/text/writing-mode/horizontal-tb.svg", "ref/resvg/text/writing-mode/horizontal-tb.png", "diff/resvg/text/writing-mode/horizontal-tb.png", false), 0)}
#[ignore] #[test] fn resvg_text_writing_mode_vertical_lr() {assert_eq!(run_test("svg/resvg/text/writing-mode/vertical-lr.svg", "ref/resvg/text/writing-mode/vertical-lr.png", "diff/resvg/text/writing-mode/vertical-lr.png", false), 0)}
#[test] fn resvg_text_writing_mode_rl() {assert_eq!(run_test("svg/resvg/text/writing-mode/rl.svg", "ref/resvg/text/writing-mode/rl.png", "diff/resvg/text/writing-mode/rl.png", false), 0)}
#[ignore] #[test] fn resvg_text_glyph_orientation_horizontal_simple_case() {assert_eq!(run_test("svg/resvg/text/glyph-orientation-horizontal/simple-case.svg", "ref/resvg/text/glyph-orientation-horizontal/simple-case.png", "diff/resvg/text/glyph-orientation-horizontal/simple-case.png", false), 0)}
#[ignore] #[test] fn resvg_text_letter_spacing_non_ASCII_character() {assert_eq!(run_test("svg/resvg/text/letter-spacing/non-ASCII-character.svg", "ref/resvg/text/letter-spacing/non-ASCII-character.png", "diff/resvg/text/letter-spacing/non-ASCII-character.png", false), 0)}
#[ignore] #[test] fn resvg_text_letter_spacing_large_negative() {assert_eq!(run_test("svg/resvg/text/letter-spacing/large-negative.svg", "ref/resvg/text/letter-spacing/large-negative.png", "diff/resvg/text/letter-spacing/large-negative.png", false), 0)}
#[test] fn resvg_text_letter_spacing_0() {assert_eq!(run_test("svg/resvg/text/letter-spacing/0.svg", "ref/resvg/text/letter-spacing/0.png", "diff/resvg/text/letter-spacing/0.png", false), 0)}
#[test] fn resvg_text_letter_spacing_mixed_spacing() {assert_eq!(run_test("svg/resvg/text/letter-spacing/mixed-spacing.svg", "ref/resvg/text/letter-spacing/mixed-spacing.png", "diff/resvg/text/letter-spacing/mixed-spacing.png", false), 0)}
#[test] fn resvg_text_letter_spacing_3() {assert_eq!(run_test("svg/resvg/text/letter-spacing/3.svg", "ref/resvg/text/letter-spacing/3.png", "diff/resvg/text/letter-spacing/3.png", false), 0)}
#[test] fn resvg_text_letter_spacing_5percent() {assert_eq!(run_test("svg/resvg/text/letter-spacing/5percent.svg", "ref/resvg/text/letter-spacing/5percent.png", "diff/resvg/text/letter-spacing/5percent.png", false), 0)}
#[test] fn resvg_text_letter_spacing__3() {assert_eq!(run_test("svg/resvg/text/letter-spacing/-3.svg", "ref/resvg/text/letter-spacing/-3.png", "diff/resvg/text/letter-spacing/-3.png", false), 0)}
#[ignore] #[test] fn resvg_text_letter_spacing_on_Arabic() {assert_eq!(run_test("svg/resvg/text/letter-spacing/on-Arabic.svg", "ref/resvg/text/letter-spacing/on-Arabic.png", "diff/resvg/text/letter-spacing/on-Arabic.png", false), 0)}
#[test] fn resvg_text_letter_spacing_1mm() {assert_eq!(run_test("svg/resvg/text/letter-spacing/1mm.svg", "ref/resvg/text/letter-spacing/1mm.png", "diff/resvg/text/letter-spacing/1mm.png", false), 0)}
#[test] fn resvg_text_letter_spacing_normal() {assert_eq!(run_test("svg/resvg/text/letter-spacing/normal.svg", "ref/resvg/text/letter-spacing/normal.png", "diff/resvg/text/letter-spacing/normal.png", false), 0)}
#[ignore] #[test] fn resvg_text_letter_spacing_filter_bbox() {assert_eq!(run_test("svg/resvg/text/letter-spacing/filter-bbox.svg", "ref/resvg/text/letter-spacing/filter-bbox.png", "diff/resvg/text/letter-spacing/filter-bbox.png", false), 0)}
#[ignore] #[test] fn resvg_text_letter_spacing_mixed_scripts() {assert_eq!(run_test("svg/resvg/text/letter-spacing/mixed-scripts.svg", "ref/resvg/text/letter-spacing/mixed-scripts.png", "diff/resvg/text/letter-spacing/mixed-scripts.png", false), 0)}
#[test] fn resvg_text_dominant_baseline_mathematical() {assert_eq!(run_test("svg/resvg/text/dominant-baseline/mathematical.svg", "ref/resvg/text/dominant-baseline/mathematical.png", "diff/resvg/text/dominant-baseline/mathematical.png", false), 0)}
#[test] fn resvg_text_dominant_baseline_dummy_tspan() {assert_eq!(run_test("svg/resvg/text/dominant-baseline/dummy-tspan.svg", "ref/resvg/text/dominant-baseline/dummy-tspan.png", "diff/resvg/text/dominant-baseline/dummy-tspan.png", false), 0)}
#[test] fn resvg_text_dominant_baseline_equal_alignment_baseline_on_tspan() {assert_eq!(run_test("svg/resvg/text/dominant-baseline/equal-alignment-baseline-on-tspan.svg", "ref/resvg/text/dominant-baseline/equal-alignment-baseline-on-tspan.png", "diff/resvg/text/dominant-baseline/equal-alignment-baseline-on-tspan.png", false), 0)}
#[test] fn resvg_text_dominant_baseline_text_before_edge() {assert_eq!(run_test("svg/resvg/text/dominant-baseline/text-before-edge.svg", "ref/resvg/text/dominant-baseline/text-before-edge.png", "diff/resvg/text/dominant-baseline/text-before-edge.png", false), 0)}
#[test] fn resvg_text_dominant_baseline_complex() {assert_eq!(run_test("svg/resvg/text/dominant-baseline/complex.svg", "ref/resvg/text/dominant-baseline/complex.png", "diff/resvg/text/dominant-baseline/complex.png", false), 0)}
#[test] fn resvg_text_dominant_baseline_alphabetic() {assert_eq!(run_test("svg/resvg/text/dominant-baseline/alphabetic.svg", "ref/resvg/text/dominant-baseline/alphabetic.png", "diff/resvg/text/dominant-baseline/alphabetic.png", false), 0)}
#[test] fn resvg_text_dominant_baseline_nested() {assert_eq!(run_test("svg/resvg/text/dominant-baseline/nested.svg", "ref/resvg/text/dominant-baseline/nested.png", "diff/resvg/text/dominant-baseline/nested.png", false), 0)}
#[ignore] #[test] fn resvg_text_dominant_baseline_use_script() {assert_eq!(run_test("svg/resvg/text/dominant-baseline/use-script.svg", "ref/resvg/text/dominant-baseline/use-script.png", "diff/resvg/text/dominant-baseline/use-script.png", false), 0)}
#[test] fn resvg_text_dominant_baseline_auto() {assert_eq!(run_test("svg/resvg/text/dominant-baseline/auto.svg", "ref/resvg/text/dominant-baseline/auto.png", "diff/resvg/text/dominant-baseline/auto.png", false), 0)}
#[test] fn resvg_text_dominant_baseline_middle() {assert_eq!(run_test("svg/resvg/text/dominant-baseline/middle.svg", "ref/resvg/text/dominant-baseline/middle.png", "diff/resvg/text/dominant-baseline/middle.png", false), 0)}
#[test] fn resvg_text_dominant_baseline_text_after_edge() {assert_eq!(run_test("svg/resvg/text/dominant-baseline/text-after-edge.svg", "ref/resvg/text/dominant-baseline/text-after-edge.png", "diff/resvg/text/dominant-baseline/text-after-edge.png", false), 0)}
#[test] fn resvg_text_dominant_baseline_alignment_baseline_and_baseline_shift_on_tspans() {assert_eq!(run_test("svg/resvg/text/dominant-baseline/alignment-baseline-and-baseline-shift-on-tspans.svg", "ref/resvg/text/dominant-baseline/alignment-baseline-and-baseline-shift-on-tspans.png", "diff/resvg/text/dominant-baseline/alignment-baseline-and-baseline-shift-on-tspans.png", false), 0)}
#[test] fn resvg_text_dominant_baseline_no_change() {assert_eq!(run_test("svg/resvg/text/dominant-baseline/no-change.svg", "ref/resvg/text/dominant-baseline/no-change.png", "diff/resvg/text/dominant-baseline/no-change.png", false), 0)}
#[test] fn resvg_text_dominant_baseline_inherit() {assert_eq!(run_test("svg/resvg/text/dominant-baseline/inherit.svg", "ref/resvg/text/dominant-baseline/inherit.png", "diff/resvg/text/dominant-baseline/inherit.png", false), 0)}
#[test] fn resvg_text_dominant_baseline_ideographic() {assert_eq!(run_test("svg/resvg/text/dominant-baseline/ideographic.svg", "ref/resvg/text/dominant-baseline/ideographic.png", "diff/resvg/text/dominant-baseline/ideographic.png", false), 0)}
#[test] fn resvg_text_dominant_baseline_alignment_baseline_baseline_on_tspan() {assert_eq!(run_test("svg/resvg/text/dominant-baseline/alignment-baseline=baseline-on-tspan.svg", "ref/resvg/text/dominant-baseline/alignment-baseline=baseline-on-tspan.png", "diff/resvg/text/dominant-baseline/alignment-baseline=baseline-on-tspan.png", false), 0)}
#[ignore] #[test] fn resvg_text_dominant_baseline_hanging() {assert_eq!(run_test("svg/resvg/text/dominant-baseline/hanging.svg", "ref/resvg/text/dominant-baseline/hanging.png", "diff/resvg/text/dominant-baseline/hanging.png", false), 0)}
#[test] fn resvg_text_dominant_baseline_different_alignment_baseline_on_tspan() {assert_eq!(run_test("svg/resvg/text/dominant-baseline/different-alignment-baseline-on-tspan.svg", "ref/resvg/text/dominant-baseline/different-alignment-baseline-on-tspan.png", "diff/resvg/text/dominant-baseline/different-alignment-baseline-on-tspan.png", false), 0)}
#[ignore] #[test] fn resvg_text_dominant_baseline_reset_size() {assert_eq!(run_test("svg/resvg/text/dominant-baseline/reset-size.svg", "ref/resvg/text/dominant-baseline/reset-size.png", "diff/resvg/text/dominant-baseline/reset-size.png", false), 0)}
#[test] fn resvg_text_dominant_baseline_central() {assert_eq!(run_test("svg/resvg/text/dominant-baseline/central.svg", "ref/resvg/text/dominant-baseline/central.png", "diff/resvg/text/dominant-baseline/central.png", false), 0)}
#[test] fn resvg_text_dominant_baseline_sequential() {assert_eq!(run_test("svg/resvg/text/dominant-baseline/sequential.svg", "ref/resvg/text/dominant-baseline/sequential.png", "diff/resvg/text/dominant-baseline/sequential.png", false), 0)}
#[test] fn resvg_text_baseline_shift_10() {assert_eq!(run_test("svg/resvg/text/baseline-shift/10.svg", "ref/resvg/text/baseline-shift/10.png", "diff/resvg/text/baseline-shift/10.png", false), 0)}
#[test] fn resvg_text_baseline_shift_super() {assert_eq!(run_test("svg/resvg/text/baseline-shift/super.svg", "ref/resvg/text/baseline-shift/super.png", "diff/resvg/text/baseline-shift/super.png", false), 0)}
#[test] fn resvg_text_baseline_shift_baseline() {assert_eq!(run_test("svg/resvg/text/baseline-shift/baseline.svg", "ref/resvg/text/baseline-shift/baseline.png", "diff/resvg/text/baseline-shift/baseline.png", false), 0)}
#[test] fn resvg_text_baseline_shift_invalid_value() {assert_eq!(run_test("svg/resvg/text/baseline-shift/invalid-value.svg", "ref/resvg/text/baseline-shift/invalid-value.png", "diff/resvg/text/baseline-shift/invalid-value.png", false), 0)}
#[test] fn resvg_text_baseline_shift_sub() {assert_eq!(run_test("svg/resvg/text/baseline-shift/sub.svg", "ref/resvg/text/baseline-shift/sub.png", "diff/resvg/text/baseline-shift/sub.png", false), 0)}
#[test] fn resvg_text_baseline_shift__10() {assert_eq!(run_test("svg/resvg/text/baseline-shift/-10.svg", "ref/resvg/text/baseline-shift/-10.png", "diff/resvg/text/baseline-shift/-10.png", false), 0)}
#[test] fn resvg_text_baseline_shift_0() {assert_eq!(run_test("svg/resvg/text/baseline-shift/0.svg", "ref/resvg/text/baseline-shift/0.png", "diff/resvg/text/baseline-shift/0.png", false), 0)}
#[test] fn resvg_text_baseline_shift_inheritance_1() {assert_eq!(run_test("svg/resvg/text/baseline-shift/inheritance-1.svg", "ref/resvg/text/baseline-shift/inheritance-1.png", "diff/resvg/text/baseline-shift/inheritance-1.png", false), 0)}
#[test] fn resvg_text_baseline_shift__50percent() {assert_eq!(run_test("svg/resvg/text/baseline-shift/-50percent.svg", "ref/resvg/text/baseline-shift/-50percent.png", "diff/resvg/text/baseline-shift/-50percent.png", false), 0)}
#[test] fn resvg_text_baseline_shift_inheritance_3() {assert_eq!(run_test("svg/resvg/text/baseline-shift/inheritance-3.svg", "ref/resvg/text/baseline-shift/inheritance-3.png", "diff/resvg/text/baseline-shift/inheritance-3.png", false), 0)}
#[test] fn resvg_text_baseline_shift_inheritance_2() {assert_eq!(run_test("svg/resvg/text/baseline-shift/inheritance-2.svg", "ref/resvg/text/baseline-shift/inheritance-2.png", "diff/resvg/text/baseline-shift/inheritance-2.png", false), 0)}
#[test] fn resvg_text_baseline_shift_inheritance_5() {assert_eq!(run_test("svg/resvg/text/baseline-shift/inheritance-5.svg", "ref/resvg/text/baseline-shift/inheritance-5.png", "diff/resvg/text/baseline-shift/inheritance-5.png", false), 0)}
#[test] fn resvg_text_baseline_shift_nested_super() {assert_eq!(run_test("svg/resvg/text/baseline-shift/nested-super.svg", "ref/resvg/text/baseline-shift/nested-super.png", "diff/resvg/text/baseline-shift/nested-super.png", false), 0)}
#[test] fn resvg_text_baseline_shift_inheritance_4() {assert_eq!(run_test("svg/resvg/text/baseline-shift/inheritance-4.svg", "ref/resvg/text/baseline-shift/inheritance-4.png", "diff/resvg/text/baseline-shift/inheritance-4.png", false), 0)}
#[test] fn resvg_text_baseline_shift_50percent() {assert_eq!(run_test("svg/resvg/text/baseline-shift/50percent.svg", "ref/resvg/text/baseline-shift/50percent.png", "diff/resvg/text/baseline-shift/50percent.png", false), 0)}
#[test] fn resvg_text_baseline_shift_nested_length() {assert_eq!(run_test("svg/resvg/text/baseline-shift/nested-length.svg", "ref/resvg/text/baseline-shift/nested-length.png", "diff/resvg/text/baseline-shift/nested-length.png", false), 0)}
#[test] fn resvg_text_baseline_shift_with_rotate() {assert_eq!(run_test("svg/resvg/text/baseline-shift/with-rotate.svg", "ref/resvg/text/baseline-shift/with-rotate.png", "diff/resvg/text/baseline-shift/with-rotate.png", false), 0)}
#[test] fn resvg_text_baseline_shift_mixed_nested() {assert_eq!(run_test("svg/resvg/text/baseline-shift/mixed-nested.svg", "ref/resvg/text/baseline-shift/mixed-nested.png", "diff/resvg/text/baseline-shift/mixed-nested.png", false), 0)}
#[test] fn resvg_text_baseline_shift_deeply_nested_super() {assert_eq!(run_test("svg/resvg/text/baseline-shift/deeply-nested-super.svg", "ref/resvg/text/baseline-shift/deeply-nested-super.png", "diff/resvg/text/baseline-shift/deeply-nested-super.png", false), 0)}
#[test] fn resvg_text_baseline_shift_nested_with_baseline_2() {assert_eq!(run_test("svg/resvg/text/baseline-shift/nested-with-baseline-2.svg", "ref/resvg/text/baseline-shift/nested-with-baseline-2.png", "diff/resvg/text/baseline-shift/nested-with-baseline-2.png", false), 0)}
#[test] fn resvg_text_baseline_shift_2mm() {assert_eq!(run_test("svg/resvg/text/baseline-shift/2mm.svg", "ref/resvg/text/baseline-shift/2mm.png", "diff/resvg/text/baseline-shift/2mm.png", false), 0)}
#[test] fn resvg_text_baseline_shift_nested_with_baseline_1() {assert_eq!(run_test("svg/resvg/text/baseline-shift/nested-with-baseline-1.svg", "ref/resvg/text/baseline-shift/nested-with-baseline-1.png", "diff/resvg/text/baseline-shift/nested-with-baseline-1.png", false), 0)}
#[ignore] #[test] fn resvg_text_lengthAdjust_vertical() {assert_eq!(run_test("svg/resvg/text/lengthAdjust/vertical.svg", "ref/resvg/text/lengthAdjust/vertical.png", "diff/resvg/text/lengthAdjust/vertical.png", false), 0)}
#[test] fn resvg_text_lengthAdjust_text_on_path() {assert_eq!(run_test("svg/resvg/text/lengthAdjust/text-on-path.svg", "ref/resvg/text/lengthAdjust/text-on-path.png", "diff/resvg/text/lengthAdjust/text-on-path.png", false), 0)}
#[test] fn resvg_text_lengthAdjust_spacingAndGlyphs() {assert_eq!(run_test("svg/resvg/text/lengthAdjust/spacingAndGlyphs.svg", "ref/resvg/text/lengthAdjust/spacingAndGlyphs.png", "diff/resvg/text/lengthAdjust/spacingAndGlyphs.png", false), 0)}
#[test] fn resvg_text_lengthAdjust_with_underline() {assert_eq!(run_test("svg/resvg/text/lengthAdjust/with-underline.svg", "ref/resvg/text/lengthAdjust/with-underline.png", "diff/resvg/text/lengthAdjust/with-underline.png", false), 0)}
#[test] fn resvg_text_text_anchor_end_with_letter_spacing() {assert_eq!(run_test("svg/resvg/text/text-anchor/end-with-letter-spacing.svg", "ref/resvg/text/text-anchor/end-with-letter-spacing.png", "diff/resvg/text/text-anchor/end-with-letter-spacing.png", false), 0)}
#[ignore] #[test] fn resvg_text_text_anchor_coordinates_list() {assert_eq!(run_test("svg/resvg/text/text-anchor/coordinates-list.svg", "ref/resvg/text/text-anchor/coordinates-list.png", "diff/resvg/text/text-anchor/coordinates-list.png", false), 0)}
#[test] fn resvg_text_text_anchor_middle_on_text() {assert_eq!(run_test("svg/resvg/text/text-anchor/middle-on-text.svg", "ref/resvg/text/text-anchor/middle-on-text.png", "diff/resvg/text/text-anchor/middle-on-text.png", false), 0)}
#[test] fn resvg_text_text_anchor_text_anchor_not_on_text_chunk() {assert_eq!(run_test("svg/resvg/text/text-anchor/text-anchor-not-on-text-chunk.svg", "ref/resvg/text/text-anchor/text-anchor-not-on-text-chunk.png", "diff/resvg/text/text-anchor/text-anchor-not-on-text-chunk.png", false), 0)}
#[test] fn resvg_text_text_anchor_on_tspan() {assert_eq!(run_test("svg/resvg/text/text-anchor/on-tspan.svg", "ref/resvg/text/text-anchor/on-tspan.png", "diff/resvg/text/text-anchor/on-tspan.png", false), 0)}
#[ignore] #[test] fn resvg_text_text_anchor_on_tspan_with_arabic() {assert_eq!(run_test("svg/resvg/text/text-anchor/on-tspan-with-arabic.svg", "ref/resvg/text/text-anchor/on-tspan-with-arabic.png", "diff/resvg/text/text-anchor/on-tspan-with-arabic.png", false), 0)}
#[test] fn resvg_text_text_anchor_inheritance_1() {assert_eq!(run_test("svg/resvg/text/text-anchor/inheritance-1.svg", "ref/resvg/text/text-anchor/inheritance-1.png", "diff/resvg/text/text-anchor/inheritance-1.png", false), 0)}
#[test] fn resvg_text_text_anchor_inheritance_3() {assert_eq!(run_test("svg/resvg/text/text-anchor/inheritance-3.svg", "ref/resvg/text/text-anchor/inheritance-3.png", "diff/resvg/text/text-anchor/inheritance-3.png", false), 0)}
#[test] fn resvg_text_text_anchor_inheritance_2() {assert_eq!(run_test("svg/resvg/text/text-anchor/inheritance-2.svg", "ref/resvg/text/text-anchor/inheritance-2.png", "diff/resvg/text/text-anchor/inheritance-2.png", false), 0)}
#[test] fn resvg_text_text_anchor_invalid_value_on_text() {assert_eq!(run_test("svg/resvg/text/text-anchor/invalid-value-on-text.svg", "ref/resvg/text/text-anchor/invalid-value-on-text.png", "diff/resvg/text/text-anchor/invalid-value-on-text.png", false), 0)}
#[test] fn resvg_text_text_anchor_start_on_text() {assert_eq!(run_test("svg/resvg/text/text-anchor/start-on-text.svg", "ref/resvg/text/text-anchor/start-on-text.png", "diff/resvg/text/text-anchor/start-on-text.png", false), 0)}
#[test] fn resvg_text_text_anchor_end_on_text() {assert_eq!(run_test("svg/resvg/text/text-anchor/end-on-text.svg", "ref/resvg/text/text-anchor/end-on-text.png", "diff/resvg/text/text-anchor/end-on-text.png", false), 0)}
#[test] fn resvg_text_text_anchor_on_the_first_tspan() {assert_eq!(run_test("svg/resvg/text/text-anchor/on-the-first-tspan.svg", "ref/resvg/text/text-anchor/on-the-first-tspan.png", "diff/resvg/text/text-anchor/on-the-first-tspan.png", false), 0)}
#[ignore] #[test] fn resvg_text_font_stretch_narrower() {assert_eq!(run_test("svg/resvg/text/font-stretch/narrower.svg", "ref/resvg/text/font-stretch/narrower.png", "diff/resvg/text/font-stretch/narrower.png", false), 0)}
#[ignore] #[test] fn resvg_text_font_stretch_inherit() {assert_eq!(run_test("svg/resvg/text/font-stretch/inherit.svg", "ref/resvg/text/font-stretch/inherit.png", "diff/resvg/text/font-stretch/inherit.png", false), 0)}
#[test] fn resvg_text_kerning_10percent() {assert_eq!(run_test("svg/resvg/text/kerning/10percent.svg", "ref/resvg/text/kerning/10percent.png", "diff/resvg/text/kerning/10percent.png", false), 0)}
#[ignore] #[test] fn resvg_text_kerning_0() {assert_eq!(run_test("svg/resvg/text/kerning/0.svg", "ref/resvg/text/kerning/0.png", "diff/resvg/text/kerning/0.png", false), 0)}
#[ignore] #[test] fn resvg_text_font_kerning_as_property() {assert_eq!(run_test("svg/resvg/text/font-kerning/as-property.svg", "ref/resvg/text/font-kerning/as-property.png", "diff/resvg/text/font-kerning/as-property.png", false), 0)}
#[test] fn resvg_text_font_kerning_none() {assert_eq!(run_test("svg/resvg/text/font-kerning/none.svg", "ref/resvg/text/font-kerning/none.png", "diff/resvg/text/font-kerning/none.png", false), 0)}
#[ignore] #[test] fn resvg_text_font_kerning_arabic_script() {assert_eq!(run_test("svg/resvg/text/font-kerning/arabic-script.svg", "ref/resvg/text/font-kerning/arabic-script.png", "diff/resvg/text/font-kerning/arabic-script.png", false), 0)}
#[test] fn resvg_text_tref_with_a_title_child() {assert_eq!(run_test("svg/resvg/text/tref/with-a-title-child.svg", "ref/resvg/text/tref/with-a-title-child.png", "diff/resvg/text/tref/with-a-title-child.png", false), 0)}
#[test] fn resvg_text_tref_style_attributes() {assert_eq!(run_test("svg/resvg/text/tref/style-attributes.svg", "ref/resvg/text/tref/style-attributes.png", "diff/resvg/text/tref/style-attributes.png", false), 0)}
#[test] fn resvg_text_tref_nested() {assert_eq!(run_test("svg/resvg/text/tref/nested.svg", "ref/resvg/text/tref/nested.png", "diff/resvg/text/tref/nested.png", false), 0)}
#[test] fn resvg_text_tref_link_to_a_complex_text() {assert_eq!(run_test("svg/resvg/text/tref/link-to-a-complex-text.svg", "ref/resvg/text/tref/link-to-a-complex-text.png", "diff/resvg/text/tref/link-to-a-complex-text.png", false), 0)}
#[ignore] #[test] fn resvg_text_tref_link_to_an_external_file_element() {assert_eq!(run_test("svg/resvg/text/tref/link-to-an-external-file-element.svg", "ref/resvg/text/tref/link-to-an-external-file-element.png", "diff/resvg/text/tref/link-to-an-external-file-element.png", false), 0)}
#[test] fn resvg_text_tref_position_attributes() {assert_eq!(run_test("svg/resvg/text/tref/position-attributes.svg", "ref/resvg/text/tref/position-attributes.png", "diff/resvg/text/tref/position-attributes.png", false), 0)}
#[test] fn resvg_text_tref_link_to_text() {assert_eq!(run_test("svg/resvg/text/tref/link-to-text.svg", "ref/resvg/text/tref/link-to-text.png", "diff/resvg/text/tref/link-to-text.png", false), 0)}
#[test] fn resvg_text_tref_link_to_a_non_SVG_element() {assert_eq!(run_test("svg/resvg/text/tref/link-to-a-non-SVG-element.svg", "ref/resvg/text/tref/link-to-a-non-SVG-element.png", "diff/resvg/text/tref/link-to-a-non-SVG-element.png", false), 0)}
#[test] fn resvg_text_tref_with_text() {assert_eq!(run_test("svg/resvg/text/tref/with-text.svg", "ref/resvg/text/tref/with-text.png", "diff/resvg/text/tref/with-text.png", false), 0)}
#[test] fn resvg_text_tref_xml_space() {assert_eq!(run_test("svg/resvg/text/tref/xml-space.svg", "ref/resvg/text/tref/xml-space.png", "diff/resvg/text/tref/xml-space.png", false), 0)}
#[test] fn resvg_text_tref_link_to_a_non_text_element() {assert_eq!(run_test("svg/resvg/text/tref/link-to-a-non-text-element.svg", "ref/resvg/text/tref/link-to-a-non-text-element.png", "diff/resvg/text/tref/link-to-a-non-text-element.png", false), 0)}
#[test] fn resvg_text_word_spacing_10() {assert_eq!(run_test("svg/resvg/text/word-spacing/10.svg", "ref/resvg/text/word-spacing/10.png", "diff/resvg/text/word-spacing/10.png", false), 0)}
#[ignore] #[test] fn resvg_text_word_spacing_large_negative() {assert_eq!(run_test("svg/resvg/text/word-spacing/large-negative.svg", "ref/resvg/text/word-spacing/large-negative.png", "diff/resvg/text/word-spacing/large-negative.png", false), 0)}
#[test] fn resvg_text_word_spacing_0() {assert_eq!(run_test("svg/resvg/text/word-spacing/0.svg", "ref/resvg/text/word-spacing/0.png", "diff/resvg/text/word-spacing/0.png", false), 0)}
#[test] fn resvg_text_word_spacing__5() {assert_eq!(run_test("svg/resvg/text/word-spacing/-5.svg", "ref/resvg/text/word-spacing/-5.png", "diff/resvg/text/word-spacing/-5.png", false), 0)}
#[test] fn resvg_text_word_spacing_5percent() {assert_eq!(run_test("svg/resvg/text/word-spacing/5percent.svg", "ref/resvg/text/word-spacing/5percent.png", "diff/resvg/text/word-spacing/5percent.png", false), 0)}
#[test] fn resvg_text_word_spacing_normal() {assert_eq!(run_test("svg/resvg/text/word-spacing/normal.svg", "ref/resvg/text/word-spacing/normal.png", "diff/resvg/text/word-spacing/normal.png", false), 0)}
#[test] fn resvg_text_word_spacing_2mm() {assert_eq!(run_test("svg/resvg/text/word-spacing/2mm.svg", "ref/resvg/text/word-spacing/2mm.png", "diff/resvg/text/word-spacing/2mm.png", false), 0)}
#[ignore] #[test] fn resvg_text_unicode_bidi_bidi_override() {assert_eq!(run_test("svg/resvg/text/unicode-bidi/bidi-override.svg", "ref/resvg/text/unicode-bidi/bidi-override.png", "diff/resvg/text/unicode-bidi/bidi-override.png", false), 0)}
#[test] fn resvg_text_font_variant_inherit() {assert_eq!(run_test("svg/resvg/text/font-variant/inherit.svg", "ref/resvg/text/font-variant/inherit.png", "diff/resvg/text/font-variant/inherit.png", false), 0)}
#[test] fn resvg_text_font_variant_small_caps() {assert_eq!(run_test("svg/resvg/text/font-variant/small-caps.svg", "ref/resvg/text/font-variant/small-caps.png", "diff/resvg/text/font-variant/small-caps.png", false), 0)}
#[test] fn resvg_text_font_weight_700() {assert_eq!(run_test("svg/resvg/text/font-weight/700.svg", "ref/resvg/text/font-weight/700.png", "diff/resvg/text/font-weight/700.png", false), 0)}
#[test] fn resvg_text_font_weight_lighter() {assert_eq!(run_test("svg/resvg/text/font-weight/lighter.svg", "ref/resvg/text/font-weight/lighter.png", "diff/resvg/text/font-weight/lighter.png", false), 0)}
#[test] fn resvg_text_font_weight_bolder() {assert_eq!(run_test("svg/resvg/text/font-weight/bolder.svg", "ref/resvg/text/font-weight/bolder.png", "diff/resvg/text/font-weight/bolder.png", false), 0)}
#[ignore] #[test] fn resvg_text_font_weight_lighter_with_clamping() {assert_eq!(run_test("svg/resvg/text/font-weight/lighter-with-clamping.svg", "ref/resvg/text/font-weight/lighter-with-clamping.png", "diff/resvg/text/font-weight/lighter-with-clamping.png", false), 0)}
#[ignore] #[test] fn resvg_text_font_weight_lighter_without_parent() {assert_eq!(run_test("svg/resvg/text/font-weight/lighter-without-parent.svg", "ref/resvg/text/font-weight/lighter-without-parent.png", "diff/resvg/text/font-weight/lighter-without-parent.png", false), 0)}
#[test] fn resvg_text_font_weight_bold() {assert_eq!(run_test("svg/resvg/text/font-weight/bold.svg", "ref/resvg/text/font-weight/bold.png", "diff/resvg/text/font-weight/bold.png", false), 0)}
#[test] fn resvg_text_font_weight_inherit() {assert_eq!(run_test("svg/resvg/text/font-weight/inherit.svg", "ref/resvg/text/font-weight/inherit.png", "diff/resvg/text/font-weight/inherit.png", false), 0)}
#[test] fn resvg_text_font_weight_normal() {assert_eq!(run_test("svg/resvg/text/font-weight/normal.svg", "ref/resvg/text/font-weight/normal.png", "diff/resvg/text/font-weight/normal.png", false), 0)}
#[test] fn resvg_text_font_weight_invalid_number_1() {assert_eq!(run_test("svg/resvg/text/font-weight/invalid-number-1.svg", "ref/resvg/text/font-weight/invalid-number-1.png", "diff/resvg/text/font-weight/invalid-number-1.png", false), 0)}
#[test] fn resvg_text_font_weight_bolder_without_parent() {assert_eq!(run_test("svg/resvg/text/font-weight/bolder-without-parent.svg", "ref/resvg/text/font-weight/bolder-without-parent.png", "diff/resvg/text/font-weight/bolder-without-parent.png", false), 0)}
#[ignore] #[test] fn resvg_text_font_weight_650() {assert_eq!(run_test("svg/resvg/text/font-weight/650.svg", "ref/resvg/text/font-weight/650.png", "diff/resvg/text/font-weight/650.png", false), 0)}
#[ignore] #[test] fn resvg_text_font_weight_bolder_with_clamping() {assert_eq!(run_test("svg/resvg/text/font-weight/bolder-with-clamping.svg", "ref/resvg/text/font-weight/bolder-with-clamping.png", "diff/resvg/text/font-weight/bolder-with-clamping.png", false), 0)}
#[test] fn resvg_text_text_rendering_optimizeLegibility() {assert_eq!(run_test("svg/resvg/text/text-rendering/optimizeLegibility.svg", "ref/resvg/text/text-rendering/optimizeLegibility.png", "diff/resvg/text/text-rendering/optimizeLegibility.png", false), 0)}
#[ignore] #[test] fn resvg_text_text_rendering_geometricPrecision() {assert_eq!(run_test("svg/resvg/text/text-rendering/geometricPrecision.svg", "ref/resvg/text/text-rendering/geometricPrecision.png", "diff/resvg/text/text-rendering/geometricPrecision.png", false), 0)}
#[test] fn resvg_text_text_rendering_on_tspan() {assert_eq!(run_test("svg/resvg/text/text-rendering/on-tspan.svg", "ref/resvg/text/text-rendering/on-tspan.png", "diff/resvg/text/text-rendering/on-tspan.png", false), 0)}
#[test] fn resvg_text_text_rendering_with_underline() {assert_eq!(run_test("svg/resvg/text/text-rendering/with-underline.svg", "ref/resvg/text/text-rendering/with-underline.png", "diff/resvg/text/text-rendering/with-underline.png", false), 0)}
#[test] fn resvg_text_text_rendering_optimizeSpeed() {assert_eq!(run_test("svg/resvg/text/text-rendering/optimizeSpeed.svg", "ref/resvg/text/text-rendering/optimizeSpeed.png", "diff/resvg/text/text-rendering/optimizeSpeed.png", false), 0)}
#[test] fn resvg_text_font_size_zero_size() {assert_eq!(run_test("svg/resvg/text/font-size/zero-size.svg", "ref/resvg/text/font-size/zero-size.png", "diff/resvg/text/font-size/zero-size.png", false), 0)}
#[test] fn resvg_text_font_size_ex() {assert_eq!(run_test("svg/resvg/text/font-size/ex.svg", "ref/resvg/text/font-size/ex.png", "diff/resvg/text/font-size/ex.png", false), 0)}
#[test] fn resvg_text_font_size_em() {assert_eq!(run_test("svg/resvg/text/font-size/em.svg", "ref/resvg/text/font-size/em.png", "diff/resvg/text/font-size/em.png", false), 0)}
#[ignore] #[test] fn resvg_text_font_size_named_value() {assert_eq!(run_test("svg/resvg/text/font-size/named-value.svg", "ref/resvg/text/font-size/named-value.png", "diff/resvg/text/font-size/named-value.png", false), 0)}
#[test] fn resvg_text_font_size_simple_case() {assert_eq!(run_test("svg/resvg/text/font-size/simple-case.svg", "ref/resvg/text/font-size/simple-case.png", "diff/resvg/text/font-size/simple-case.png", false), 0)}
#[test] fn resvg_text_font_size_inheritance() {assert_eq!(run_test("svg/resvg/text/font-size/inheritance.svg", "ref/resvg/text/font-size/inheritance.png", "diff/resvg/text/font-size/inheritance.png", false), 0)}
#[ignore] #[test] fn resvg_text_font_size_negative_size() {assert_eq!(run_test("svg/resvg/text/font-size/negative-size.svg", "ref/resvg/text/font-size/negative-size.png", "diff/resvg/text/font-size/negative-size.png", false), 0)}
#[test] fn resvg_text_font_size_zero_size_on_parent_1() {assert_eq!(run_test("svg/resvg/text/font-size/zero-size-on-parent-1.svg", "ref/resvg/text/font-size/zero-size-on-parent-1.png", "diff/resvg/text/font-size/zero-size-on-parent-1.png", false), 0)}
#[test] fn resvg_text_font_size_zero_size_on_parent_2() {assert_eq!(run_test("svg/resvg/text/font-size/zero-size-on-parent-2.svg", "ref/resvg/text/font-size/zero-size-on-parent-2.png", "diff/resvg/text/font-size/zero-size-on-parent-2.png", false), 0)}
#[test] fn resvg_text_font_size_zero_size_on_parent_3() {assert_eq!(run_test("svg/resvg/text/font-size/zero-size-on-parent-3.svg", "ref/resvg/text/font-size/zero-size-on-parent-3.png", "diff/resvg/text/font-size/zero-size-on-parent-3.png", false), 0)}
#[test] fn resvg_text_font_size_percent_value_without_a_parent() {assert_eq!(run_test("svg/resvg/text/font-size/percent-value-without-a-parent.svg", "ref/resvg/text/font-size/percent-value-without-a-parent.png", "diff/resvg/text/font-size/percent-value-without-a-parent.png", false), 0)}
#[test] fn resvg_text_font_size_ex_nested_and_mixed() {assert_eq!(run_test("svg/resvg/text/font-size/ex-nested-and-mixed.svg", "ref/resvg/text/font-size/ex-nested-and-mixed.png", "diff/resvg/text/font-size/ex-nested-and-mixed.png", false), 0)}
#[test] fn resvg_text_font_size_nested_percent_values_2() {assert_eq!(run_test("svg/resvg/text/font-size/nested-percent-values-2.svg", "ref/resvg/text/font-size/nested-percent-values-2.png", "diff/resvg/text/font-size/nested-percent-values-2.png", false), 0)}
#[test] fn resvg_text_font_size_percent_value() {assert_eq!(run_test("svg/resvg/text/font-size/percent-value.svg", "ref/resvg/text/font-size/percent-value.png", "diff/resvg/text/font-size/percent-value.png", false), 0)}
#[test] fn resvg_text_font_size_em_nested_and_mixed() {assert_eq!(run_test("svg/resvg/text/font-size/em-nested-and-mixed.svg", "ref/resvg/text/font-size/em-nested-and-mixed.png", "diff/resvg/text/font-size/em-nested-and-mixed.png", false), 0)}
#[test] fn resvg_text_font_size_named_value_without_a_parent() {assert_eq!(run_test("svg/resvg/text/font-size/named-value-without-a-parent.svg", "ref/resvg/text/font-size/named-value-without-a-parent.png", "diff/resvg/text/font-size/named-value-without-a-parent.png", false), 0)}
#[test] fn resvg_text_font_size_nested_percent_values_1() {assert_eq!(run_test("svg/resvg/text/font-size/nested-percent-values-1.svg", "ref/resvg/text/font-size/nested-percent-values-1.png", "diff/resvg/text/font-size/nested-percent-values-1.png", false), 0)}
#[test] fn resvg_text_font_size_ex_on_the_root_element() {assert_eq!(run_test("svg/resvg/text/font-size/ex-on-the-root-element.svg", "ref/resvg/text/font-size/ex-on-the-root-element.png", "diff/resvg/text/font-size/ex-on-the-root-element.png", false), 0)}
#[test] fn resvg_text_font_size_em_on_the_root_element() {assert_eq!(run_test("svg/resvg/text/font-size/em-on-the-root-element.svg", "ref/resvg/text/font-size/em-on-the-root-element.png", "diff/resvg/text/font-size/em-on-the-root-element.png", false), 0)}
#[test] fn resvg_text_font_size_mixed_values() {assert_eq!(run_test("svg/resvg/text/font-size/mixed-values.svg", "ref/resvg/text/font-size/mixed-values.png", "diff/resvg/text/font-size/mixed-values.png", false), 0)}
#[ignore] #[test] fn resvg_text_direction_rtl() {assert_eq!(run_test("svg/resvg/text/direction/rtl.svg", "ref/resvg/text/direction/rtl.png", "diff/resvg/text/direction/rtl.png", false), 0)}
#[ignore] #[test] fn resvg_text_direction_rtl_with_vertical_writing_mode() {assert_eq!(run_test("svg/resvg/text/direction/rtl-with-vertical-writing-mode.svg", "ref/resvg/text/direction/rtl-with-vertical-writing-mode.png", "diff/resvg/text/direction/rtl-with-vertical-writing-mode.png", false), 0)}
#[test] fn resvg_text_text_escaped_text_4() {assert_eq!(run_test("svg/resvg/text/text/escaped-text-4.svg", "ref/resvg/text/text/escaped-text-4.png", "diff/resvg/text/text/escaped-text-4.png", false), 0)}
#[ignore] #[test] fn resvg_text_text_xml_lang_ja() {assert_eq!(run_test("svg/resvg/text/text/xml-lang=ja.svg", "ref/resvg/text/text/xml-lang=ja.png", "diff/resvg/text/text/xml-lang=ja.png", false), 0)}
#[test] fn resvg_text_text_dx_and_dy_with_multiple_values() {assert_eq!(run_test("svg/resvg/text/text/dx-and-dy-with-multiple-values.svg", "ref/resvg/text/text/dx-and-dy-with-multiple-values.png", "diff/resvg/text/text/dx-and-dy-with-multiple-values.png", false), 0)}
#[test] fn resvg_text_text_complex_graphemes() {assert_eq!(run_test("svg/resvg/text/text/complex-graphemes.svg", "ref/resvg/text/text/complex-graphemes.png", "diff/resvg/text/text/complex-graphemes.png", false), 0)}
#[test] fn resvg_text_text_escaped_text_2() {assert_eq!(run_test("svg/resvg/text/text/escaped-text-2.svg", "ref/resvg/text/text/escaped-text-2.png", "diff/resvg/text/text/escaped-text-2.png", false), 0)}
#[test] fn resvg_text_text_dx_and_dy_instead_of_x_and_y() {assert_eq!(run_test("svg/resvg/text/text/dx-and-dy-instead-of-x-and-y.svg", "ref/resvg/text/text/dx-and-dy-instead-of-x-and-y.png", "diff/resvg/text/text/dx-and-dy-instead-of-x-and-y.png", false), 0)}
#[test] fn resvg_text_text_rotate() {assert_eq!(run_test("svg/resvg/text/text/rotate.svg", "ref/resvg/text/text/rotate.png", "diff/resvg/text/text/rotate.png", false), 0)}
#[test] fn resvg_text_text_escaped_text_3() {assert_eq!(run_test("svg/resvg/text/text/escaped-text-3.svg", "ref/resvg/text/text/escaped-text-3.png", "diff/resvg/text/text/escaped-text-3.png", false), 0)}
#[test] fn resvg_text_text_escaped_text_1() {assert_eq!(run_test("svg/resvg/text/text/escaped-text-1.svg", "ref/resvg/text/text/escaped-text-1.png", "diff/resvg/text/text/escaped-text-1.png", false), 0)}
#[test] fn resvg_text_text_x_and_y_with_multiple_values() {assert_eq!(run_test("svg/resvg/text/text/x-and-y-with-multiple-values.svg", "ref/resvg/text/text/x-and-y-with-multiple-values.png", "diff/resvg/text/text/x-and-y-with-multiple-values.png", false), 0)}
#[test] fn resvg_text_text_x_and_y_with_less_values_than_characters() {assert_eq!(run_test("svg/resvg/text/text/x-and-y-with-less-values-than-characters.svg", "ref/resvg/text/text/x-and-y-with-less-values-than-characters.png", "diff/resvg/text/text/x-and-y-with-less-values-than-characters.png", false), 0)}
#[test] fn resvg_text_text_transform() {assert_eq!(run_test("svg/resvg/text/text/transform.svg", "ref/resvg/text/text/transform.png", "diff/resvg/text/text/transform.png", false), 0)}
#[test] fn resvg_text_text_rotate_with_multiple_values_underline_and_pattern() {assert_eq!(run_test("svg/resvg/text/text/rotate-with-multiple-values-underline-and-pattern.svg", "ref/resvg/text/text/rotate-with-multiple-values-underline-and-pattern.png", "diff/resvg/text/text/rotate-with-multiple-values-underline-and-pattern.png", false), 0)}
#[ignore] #[test] fn resvg_text_text_rotate_on_Arabic() {assert_eq!(run_test("svg/resvg/text/text/rotate-on-Arabic.svg", "ref/resvg/text/text/rotate-on-Arabic.png", "diff/resvg/text/text/rotate-on-Arabic.png", false), 0)}
#[ignore] #[test] fn resvg_text_text_bidi_reordering() {assert_eq!(run_test("svg/resvg/text/text/bidi-reordering.svg", "ref/resvg/text/text/bidi-reordering.png", "diff/resvg/text/text/bidi-reordering.png", false), 0)}
#[test] fn resvg_text_text_nested() {assert_eq!(run_test("svg/resvg/text/text/nested.svg", "ref/resvg/text/text/nested.png", "diff/resvg/text/text/nested.png", false), 0)}
#[test] fn resvg_text_text_zalgo() {assert_eq!(run_test("svg/resvg/text/text/zalgo.svg", "ref/resvg/text/text/zalgo.png", "diff/resvg/text/text/zalgo.png", false), 0)}
#[test] fn resvg_text_text_rotate_with_more_values_than_characters() {assert_eq!(run_test("svg/resvg/text/text/rotate-with-more-values-than-characters.svg", "ref/resvg/text/text/rotate-with-more-values-than-characters.png", "diff/resvg/text/text/rotate-with-more-values-than-characters.png", false), 0)}
#[test] fn resvg_text_text_x_and_y_with_dx_and_dy() {assert_eq!(run_test("svg/resvg/text/text/x-and-y-with-dx-and-dy.svg", "ref/resvg/text/text/x-and-y-with-dx-and-dy.png", "diff/resvg/text/text/x-and-y-with-dx-and-dy.png", false), 0)}
#[ignore] #[test] fn resvg_text_text_real_text_height() {assert_eq!(run_test("svg/resvg/text/text/real-text-height.svg", "ref/resvg/text/text/real-text-height.png", "diff/resvg/text/text/real-text-height.png", false), 0)}
#[test] fn resvg_text_text_dx_and_dy_with_more_values_than_characters() {assert_eq!(run_test("svg/resvg/text/text/dx-and-dy-with-more-values-than-characters.svg", "ref/resvg/text/text/dx-and-dy-with-more-values-than-characters.png", "diff/resvg/text/text/dx-and-dy-with-more-values-than-characters.png", false), 0)}
#[ignore] #[test] fn resvg_text_text_emojis() {assert_eq!(run_test("svg/resvg/text/text/emojis.svg", "ref/resvg/text/text/emojis.png", "diff/resvg/text/text/emojis.png", false), 0)}
#[ignore] #[test] fn resvg_text_text_x_and_y_with_multiple_values_and_arabic_text() {assert_eq!(run_test("svg/resvg/text/text/x-and-y-with-multiple-values-and-arabic-text.svg", "ref/resvg/text/text/x-and-y-with-multiple-values-and-arabic-text.png", "diff/resvg/text/text/x-and-y-with-multiple-values-and-arabic-text.png", false), 0)}
#[test] fn resvg_text_text_simple_case() {assert_eq!(run_test("svg/resvg/text/text/simple-case.svg", "ref/resvg/text/text/simple-case.png", "diff/resvg/text/text/simple-case.png", false), 0)}
#[test] fn resvg_text_text_x_and_y_with_multiple_values_and_tspan() {assert_eq!(run_test("svg/resvg/text/text/x-and-y-with-multiple-values-and-tspan.svg", "ref/resvg/text/text/x-and-y-with-multiple-values-and-tspan.png", "diff/resvg/text/text/x-and-y-with-multiple-values-and-tspan.png", false), 0)}
#[test] fn resvg_text_text_rotate_with_less_values_than_characters() {assert_eq!(run_test("svg/resvg/text/text/rotate-with-less-values-than-characters.svg", "ref/resvg/text/text/rotate-with-less-values-than-characters.png", "diff/resvg/text/text/rotate-with-less-values-than-characters.png", false), 0)}
#[ignore] #[test] fn resvg_text_text_complex_grapheme_split_by_tspan() {assert_eq!(run_test("svg/resvg/text/text/complex-grapheme-split-by-tspan.svg", "ref/resvg/text/text/complex-grapheme-split-by-tspan.png", "diff/resvg/text/text/complex-grapheme-split-by-tspan.png", false), 0)}
#[test] fn resvg_text_text_dx_and_dy_with_less_values_than_characters() {assert_eq!(run_test("svg/resvg/text/text/dx-and-dy-with-less-values-than-characters.svg", "ref/resvg/text/text/dx-and-dy-with-less-values-than-characters.png", "diff/resvg/text/text/dx-and-dy-with-less-values-than-characters.png", false), 0)}
#[test] fn resvg_text_text_percent_value_on_x_and_y() {assert_eq!(run_test("svg/resvg/text/text/percent-value-on-x-and-y.svg", "ref/resvg/text/text/percent-value-on-x-and-y.png", "diff/resvg/text/text/percent-value-on-x-and-y.png", false), 0)}
#[ignore] #[test] fn resvg_text_text_compound_emojis() {assert_eq!(run_test("svg/resvg/text/text/compound-emojis.svg", "ref/resvg/text/text/compound-emojis.png", "diff/resvg/text/text/compound-emojis.png", false), 0)}
#[test] fn resvg_text_text_xml_space() {assert_eq!(run_test("svg/resvg/text/text/xml-space.svg", "ref/resvg/text/text/xml-space.png", "diff/resvg/text/text/xml-space.png", false), 0)}
#[ignore] #[test] fn resvg_text_text_fill_rule_evenodd() {assert_eq!(run_test("svg/resvg/text/text/fill-rule=evenodd.svg", "ref/resvg/text/text/fill-rule=evenodd.png", "diff/resvg/text/text/fill-rule=evenodd.png", false), 0)}
#[ignore] #[test] fn resvg_text_text_complex_graphemes_and_coordinates_list() {assert_eq!(run_test("svg/resvg/text/text/complex-graphemes-and-coordinates-list.svg", "ref/resvg/text/text/complex-graphemes-and-coordinates-list.png", "diff/resvg/text/text/complex-graphemes-and-coordinates-list.png", false), 0)}
#[test] fn resvg_text_text_x_and_y_with_dx_and_dy_lists() {assert_eq!(run_test("svg/resvg/text/text/x-and-y-with-dx-and-dy-lists.svg", "ref/resvg/text/text/x-and-y-with-dx-and-dy-lists.png", "diff/resvg/text/text/x-and-y-with-dx-and-dy-lists.png", false), 0)}
#[test] fn resvg_text_text_rotate_with_multiple_values_and_complex_text() {assert_eq!(run_test("svg/resvg/text/text/rotate-with-multiple-values-and-complex-text.svg", "ref/resvg/text/text/rotate-with-multiple-values-and-complex-text.png", "diff/resvg/text/text/rotate-with-multiple-values-and-complex-text.png", false), 0)}
#[test] fn resvg_text_text_rotate_with_an_invalid_angle() {assert_eq!(run_test("svg/resvg/text/text/rotate-with-an-invalid-angle.svg", "ref/resvg/text/text/rotate-with-an-invalid-angle.png", "diff/resvg/text/text/rotate-with-an-invalid-angle.png", false), 0)}
#[ignore] #[test] fn resvg_text_text_filter_bbox() {assert_eq!(run_test("svg/resvg/text/text/filter-bbox.svg", "ref/resvg/text/text/filter-bbox.png", "diff/resvg/text/text/filter-bbox.png", false), 0)}
#[test] fn resvg_text_text_no_coordinates() {assert_eq!(run_test("svg/resvg/text/text/no-coordinates.svg", "ref/resvg/text/text/no-coordinates.png", "diff/resvg/text/text/no-coordinates.png", false), 0)}
#[test] fn resvg_text_text_percent_value_on_dx_and_dy() {assert_eq!(run_test("svg/resvg/text/text/percent-value-on-dx-and-dy.svg", "ref/resvg/text/text/percent-value-on-dx-and-dy.png", "diff/resvg/text/text/percent-value-on-dx-and-dy.png", false), 0)}
#[test] fn resvg_text_text_mm_coordinates() {assert_eq!(run_test("svg/resvg/text/text/mm-coordinates.svg", "ref/resvg/text/text/mm-coordinates.png", "diff/resvg/text/text/mm-coordinates.png", false), 0)}
#[test] fn resvg_text_text_x_and_y_with_more_values_than_characters() {assert_eq!(run_test("svg/resvg/text/text/x-and-y-with-more-values-than-characters.svg", "ref/resvg/text/text/x-and-y-with-more-values-than-characters.png", "diff/resvg/text/text/x-and-y-with-more-values-than-characters.png", false), 0)}
#[test] fn resvg_text_text_rotate_with_multiple_values() {assert_eq!(run_test("svg/resvg/text/text/rotate-with-multiple-values.svg", "ref/resvg/text/text/rotate-with-multiple-values.png", "diff/resvg/text/text/rotate-with-multiple-values.png", false), 0)}
#[test] fn resvg_text_text_em_and_ex_coordinates() {assert_eq!(run_test("svg/resvg/text/text/em-and-ex-coordinates.svg", "ref/resvg/text/text/em-and-ex-coordinates.png", "diff/resvg/text/text/em-and-ex-coordinates.png", false), 0)}
#[ignore] #[test] fn resvg_text_font_simple_case() {assert_eq!(run_test("svg/resvg/text/font/simple-case.svg", "ref/resvg/text/font/simple-case.png", "diff/resvg/text/font/simple-case.png", false), 0)}
#[ignore] #[test] fn resvg_text_glyph_orientation_vertical_simple_case() {assert_eq!(run_test("svg/resvg/text/glyph-orientation-vertical/simple-case.svg", "ref/resvg/text/glyph-orientation-vertical/simple-case.png", "diff/resvg/text/glyph-orientation-vertical/simple-case.png", false), 0)}
#[test] fn resvg_text_textLength_zero() {assert_eq!(run_test("svg/resvg/text/textLength/zero.svg", "ref/resvg/text/textLength/zero.png", "diff/resvg/text/textLength/zero.png", false), 0)}
#[test] fn resvg_text_textLength_150_on_parent() {assert_eq!(run_test("svg/resvg/text/textLength/150-on-parent.svg", "ref/resvg/text/textLength/150-on-parent.png", "diff/resvg/text/textLength/150-on-parent.png", false), 0)}
#[test] fn resvg_text_textLength_on_a_single_tspan() {assert_eq!(run_test("svg/resvg/text/textLength/on-a-single-tspan.svg", "ref/resvg/text/textLength/on-a-single-tspan.png", "diff/resvg/text/textLength/on-a-single-tspan.png", false), 0)}
#[test] fn resvg_text_textLength_75percent() {assert_eq!(run_test("svg/resvg/text/textLength/75percent.svg", "ref/resvg/text/textLength/75percent.png", "diff/resvg/text/textLength/75percent.png", false), 0)}
#[ignore] #[test] fn resvg_text_textLength_arabic() {assert_eq!(run_test("svg/resvg/text/textLength/arabic.svg", "ref/resvg/text/textLength/arabic.png", "diff/resvg/text/textLength/arabic.png", false), 0)}
#[test] fn resvg_text_textLength_150() {assert_eq!(run_test("svg/resvg/text/textLength/150.svg", "ref/resvg/text/textLength/150.png", "diff/resvg/text/textLength/150.png", false), 0)}
#[ignore] #[test] fn resvg_text_textLength_arabic_with_lengthAdjust() {assert_eq!(run_test("svg/resvg/text/textLength/arabic-with-lengthAdjust.svg", "ref/resvg/text/textLength/arabic-with-lengthAdjust.png", "diff/resvg/text/textLength/arabic-with-lengthAdjust.png", false), 0)}
#[test] fn resvg_text_textLength_150_on_tspan() {assert_eq!(run_test("svg/resvg/text/textLength/150-on-tspan.svg", "ref/resvg/text/textLength/150-on-tspan.png", "diff/resvg/text/textLength/150-on-tspan.png", false), 0)}
#[test] fn resvg_text_textLength_inherit() {assert_eq!(run_test("svg/resvg/text/textLength/inherit.svg", "ref/resvg/text/textLength/inherit.png", "diff/resvg/text/textLength/inherit.png", false), 0)}
#[test] fn resvg_text_textLength_on_text_and_tspan() {assert_eq!(run_test("svg/resvg/text/textLength/on-text-and-tspan.svg", "ref/resvg/text/textLength/on-text-and-tspan.png", "diff/resvg/text/textLength/on-text-and-tspan.png", false), 0)}
#[test] fn resvg_text_textLength_negative() {assert_eq!(run_test("svg/resvg/text/textLength/negative.svg", "ref/resvg/text/textLength/negative.png", "diff/resvg/text/textLength/negative.png", false), 0)}
#[test] fn resvg_text_textLength_40mm() {assert_eq!(run_test("svg/resvg/text/textLength/40mm.svg", "ref/resvg/text/textLength/40mm.png", "diff/resvg/text/textLength/40mm.png", false), 0)}
#[ignore] #[test] fn resvg_text_font_size_adjust_simple_case() {assert_eq!(run_test("svg/resvg/text/font-size-adjust/simple-case.svg", "ref/resvg/text/font-size-adjust/simple-case.png", "diff/resvg/text/font-size-adjust/simple-case.png", false), 0)}
#[test] fn resvg_text_font_style_inherit() {assert_eq!(run_test("svg/resvg/text/font-style/inherit.svg", "ref/resvg/text/font-style/inherit.png", "diff/resvg/text/font-style/inherit.png", false), 0)}
#[test] fn resvg_text_font_style_italic() {assert_eq!(run_test("svg/resvg/text/font-style/italic.svg", "ref/resvg/text/font-style/italic.png", "diff/resvg/text/font-style/italic.png", false), 0)}
#[test] fn resvg_text_font_style_oblique() {assert_eq!(run_test("svg/resvg/text/font-style/oblique.svg", "ref/resvg/text/font-style/oblique.png", "diff/resvg/text/font-style/oblique.png", false), 0)}
#[ignore] #[test] fn resvg_text_font_family_font_list() {assert_eq!(run_test("svg/resvg/text/font-family/font-list.svg", "ref/resvg/text/font-family/font-list.png", "diff/resvg/text/font-family/font-list.png", false), 0)}
#[ignore] #[test] fn resvg_text_font_family_source_sans_pro() {assert_eq!(run_test("svg/resvg/text/font-family/source-sans-pro.svg", "ref/resvg/text/font-family/source-sans-pro.png", "diff/resvg/text/font-family/source-sans-pro.png", false), 0)}
#[ignore] #[test] fn resvg_text_font_family_serif() {assert_eq!(run_test("svg/resvg/text/font-family/serif.svg", "ref/resvg/text/font-family/serif.png", "diff/resvg/text/font-family/serif.png", false), 0)}
#[test] fn resvg_text_font_family_noto_sans() {assert_eq!(run_test("svg/resvg/text/font-family/noto-sans.svg", "ref/resvg/text/font-family/noto-sans.png", "diff/resvg/text/font-family/noto-sans.png", false), 0)}
#[ignore] #[test] fn resvg_text_font_family_fantasy() {assert_eq!(run_test("svg/resvg/text/font-family/fantasy.svg", "ref/resvg/text/font-family/fantasy.png", "diff/resvg/text/font-family/fantasy.png", false), 0)}
#[ignore] #[test] fn resvg_text_font_family_monospace() {assert_eq!(run_test("svg/resvg/text/font-family/monospace.svg", "ref/resvg/text/font-family/monospace.png", "diff/resvg/text/font-family/monospace.png", false), 0)}
#[test] fn resvg_text_font_family_fallback_2() {assert_eq!(run_test("svg/resvg/text/font-family/fallback-2.svg", "ref/resvg/text/font-family/fallback-2.png", "diff/resvg/text/font-family/fallback-2.png", false), 0)}
#[ignore] #[test] fn resvg_text_font_family_double_quoted() {assert_eq!(run_test("svg/resvg/text/font-family/double-quoted.svg", "ref/resvg/text/font-family/double-quoted.png", "diff/resvg/text/font-family/double-quoted.png", false), 0)}
#[ignore] #[test] fn resvg_text_font_family_cursive() {assert_eq!(run_test("svg/resvg/text/font-family/cursive.svg", "ref/resvg/text/font-family/cursive.png", "diff/resvg/text/font-family/cursive.png", false), 0)}
#[ignore] #[test] fn resvg_text_font_family_fallback_1() {assert_eq!(run_test("svg/resvg/text/font-family/fallback-1.svg", "ref/resvg/text/font-family/fallback-1.png", "diff/resvg/text/font-family/fallback-1.png", false), 0)}
#[ignore] #[test] fn resvg_text_font_family_bold_sans_serif() {assert_eq!(run_test("svg/resvg/text/font-family/bold-sans-serif.svg", "ref/resvg/text/font-family/bold-sans-serif.png", "diff/resvg/text/font-family/bold-sans-serif.png", false), 0)}
#[ignore] #[test] fn resvg_text_font_family_sans_serif() {assert_eq!(run_test("svg/resvg/text/font-family/sans-serif.svg", "ref/resvg/text/font-family/sans-serif.png", "diff/resvg/text/font-family/sans-serif.png", false), 0)}
#[test] fn resvg_text_text_decoration_underline() {assert_eq!(run_test("svg/resvg/text/text-decoration/underline.svg", "ref/resvg/text/text-decoration/underline.png", "diff/resvg/text/text-decoration/underline.png", false), 0)}
#[test] fn resvg_text_text_decoration_line_through() {assert_eq!(run_test("svg/resvg/text/text-decoration/line-through.svg", "ref/resvg/text/text-decoration/line-through.png", "diff/resvg/text/text-decoration/line-through.png", false), 0)}
#[test] fn resvg_text_text_decoration_all_types_inline_comma_separated() {assert_eq!(run_test("svg/resvg/text/text-decoration/all-types-inline-comma-separated.svg", "ref/resvg/text/text-decoration/all-types-inline-comma-separated.png", "diff/resvg/text/text-decoration/all-types-inline-comma-separated.png", false), 0)}
#[test] fn resvg_text_text_decoration_tspan_decoration() {assert_eq!(run_test("svg/resvg/text/text-decoration/tspan-decoration.svg", "ref/resvg/text/text-decoration/tspan-decoration.png", "diff/resvg/text/text-decoration/tspan-decoration.png", false), 0)}
#[ignore] #[test] fn resvg_text_text_decoration_underline_with_dy_list_2() {assert_eq!(run_test("svg/resvg/text/text-decoration/underline-with-dy-list-2.svg", "ref/resvg/text/text-decoration/underline-with-dy-list-2.png", "diff/resvg/text/text-decoration/underline-with-dy-list-2.png", false), 0)}
#[test] fn resvg_text_text_decoration_outside_the_text_element() {assert_eq!(run_test("svg/resvg/text/text-decoration/outside-the-text-element.svg", "ref/resvg/text/text-decoration/outside-the-text-element.png", "diff/resvg/text/text-decoration/outside-the-text-element.png", false), 0)}
#[test] fn resvg_text_text_decoration_underline_with_dy_list_1() {assert_eq!(run_test("svg/resvg/text/text-decoration/underline-with-dy-list-1.svg", "ref/resvg/text/text-decoration/underline-with-dy-list-1.png", "diff/resvg/text/text-decoration/underline-with-dy-list-1.png", false), 0)}
#[test] fn resvg_text_text_decoration_all_types_nested() {assert_eq!(run_test("svg/resvg/text/text-decoration/all-types-nested.svg", "ref/resvg/text/text-decoration/all-types-nested.png", "diff/resvg/text/text-decoration/all-types-nested.png", false), 0)}
#[test] fn resvg_text_text_decoration_overline() {assert_eq!(run_test("svg/resvg/text/text-decoration/overline.svg", "ref/resvg/text/text-decoration/overline.png", "diff/resvg/text/text-decoration/overline.png", false), 0)}
#[test] fn resvg_text_text_decoration_underline_with_y_list() {assert_eq!(run_test("svg/resvg/text/text-decoration/underline-with-y-list.svg", "ref/resvg/text/text-decoration/underline-with-y-list.png", "diff/resvg/text/text-decoration/underline-with-y-list.png", false), 0)}
#[test] fn resvg_text_text_decoration_all_types_inline_no_spaces() {assert_eq!(run_test("svg/resvg/text/text-decoration/all-types-inline-no-spaces.svg", "ref/resvg/text/text-decoration/all-types-inline-no-spaces.png", "diff/resvg/text/text-decoration/all-types-inline-no-spaces.png", false), 0)}
#[test] fn resvg_text_text_decoration_indirect_with_multiple_colors() {assert_eq!(run_test("svg/resvg/text/text-decoration/indirect-with-multiple-colors.svg", "ref/resvg/text/text-decoration/indirect-with-multiple-colors.png", "diff/resvg/text/text-decoration/indirect-with-multiple-colors.png", false), 0)}
#[ignore] #[test] fn resvg_text_text_decoration_underline_with_rotate_list_4() {assert_eq!(run_test("svg/resvg/text/text-decoration/underline-with-rotate-list-4.svg", "ref/resvg/text/text-decoration/underline-with-rotate-list-4.png", "diff/resvg/text/text-decoration/underline-with-rotate-list-4.png", false), 0)}
#[ignore] #[test] fn resvg_text_text_decoration_indirect() {assert_eq!(run_test("svg/resvg/text/text-decoration/indirect.svg", "ref/resvg/text/text-decoration/indirect.png", "diff/resvg/text/text-decoration/indirect.png", false), 0)}
#[test] fn resvg_text_text_decoration_underline_with_rotate_list_3() {assert_eq!(run_test("svg/resvg/text/text-decoration/underline-with-rotate-list-3.svg", "ref/resvg/text/text-decoration/underline-with-rotate-list-3.png", "diff/resvg/text/text-decoration/underline-with-rotate-list-3.png", false), 0)}
#[test] fn resvg_text_text_decoration_style_resolving_3() {assert_eq!(run_test("svg/resvg/text/text-decoration/style-resolving-3.svg", "ref/resvg/text/text-decoration/style-resolving-3.png", "diff/resvg/text/text-decoration/style-resolving-3.png", false), 0)}
#[test] fn resvg_text_text_decoration_all_types_inline() {assert_eq!(run_test("svg/resvg/text/text-decoration/all-types-inline.svg", "ref/resvg/text/text-decoration/all-types-inline.png", "diff/resvg/text/text-decoration/all-types-inline.png", false), 0)}
#[test] fn resvg_text_text_decoration_style_resolving_2() {assert_eq!(run_test("svg/resvg/text/text-decoration/style-resolving-2.svg", "ref/resvg/text/text-decoration/style-resolving-2.png", "diff/resvg/text/text-decoration/style-resolving-2.png", false), 0)}
#[test] fn resvg_text_text_decoration_style_resolving_1() {assert_eq!(run_test("svg/resvg/text/text-decoration/style-resolving-1.svg", "ref/resvg/text/text-decoration/style-resolving-1.png", "diff/resvg/text/text-decoration/style-resolving-1.png", false), 0)}
#[ignore] #[test] fn resvg_text_text_decoration_style_resolving_4() {assert_eq!(run_test("svg/resvg/text/text-decoration/style-resolving-4.svg", "ref/resvg/text/text-decoration/style-resolving-4.png", "diff/resvg/text/text-decoration/style-resolving-4.png", false), 0)}
#[ignore] #[test] fn resvg_text_text_decoration_with_textLength_on_a_single_character() {assert_eq!(run_test("svg/resvg/text/text-decoration/with-textLength-on-a-single-character.svg", "ref/resvg/text/text-decoration/with-textLength-on-a-single-character.png", "diff/resvg/text/text-decoration/with-textLength-on-a-single-character.png", false), 0)}
#[test] fn resvg_text_textPath_invalid_textPath_in_the_middle() {assert_eq!(run_test("svg/resvg/text/textPath/invalid-textPath-in-the-middle.svg", "ref/resvg/text/textPath/invalid-textPath-in-the-middle.png", "diff/resvg/text/textPath/invalid-textPath-in-the-middle.png", false), 0)}
#[ignore] #[test] fn resvg_text_textPath_spacing_auto() {assert_eq!(run_test("svg/resvg/text/textPath/spacing=auto.svg", "ref/resvg/text/textPath/spacing=auto.png", "diff/resvg/text/textPath/spacing=auto.png", false), 0)}
#[test] fn resvg_text_textPath_with_letter_spacing() {assert_eq!(run_test("svg/resvg/text/textPath/with-letter-spacing.svg", "ref/resvg/text/textPath/with-letter-spacing.png", "diff/resvg/text/textPath/with-letter-spacing.png", false), 0)}
#[ignore] #[test] fn resvg_text_textPath_with_invalid_path_and_xlink_href() {assert_eq!(run_test("svg/resvg/text/textPath/with-invalid-path-and-xlink-href.svg", "ref/resvg/text/textPath/with-invalid-path-and-xlink-href.png", "diff/resvg/text/textPath/with-invalid-path-and-xlink-href.png", false), 0)}
#[test] fn resvg_text_textPath_link_to_rect() {assert_eq!(run_test("svg/resvg/text/textPath/link-to-rect.svg", "ref/resvg/text/textPath/link-to-rect.png", "diff/resvg/text/textPath/link-to-rect.png", false), 0)}
#[test] fn resvg_text_textPath_dy_with_tiny_coordinates() {assert_eq!(run_test("svg/resvg/text/textPath/dy-with-tiny-coordinates.svg", "ref/resvg/text/textPath/dy-with-tiny-coordinates.png", "diff/resvg/text/textPath/dy-with-tiny-coordinates.png", false), 0)}
#[ignore] #[test] fn resvg_text_textPath_with_path() {assert_eq!(run_test("svg/resvg/text/textPath/with-path.svg", "ref/resvg/text/textPath/with-path.png", "diff/resvg/text/textPath/with-path.png", false), 0)}
#[ignore] #[test] fn resvg_text_textPath_with_filter() {assert_eq!(run_test("svg/resvg/text/textPath/with-filter.svg", "ref/resvg/text/textPath/with-filter.png", "diff/resvg/text/textPath/with-filter.png", false), 0)}
#[ignore] #[test] fn resvg_text_textPath_complex() {assert_eq!(run_test("svg/resvg/text/textPath/complex.svg", "ref/resvg/text/textPath/complex.png", "diff/resvg/text/textPath/complex.png", false), 0)}
#[test] fn resvg_text_textPath_invalid_link() {assert_eq!(run_test("svg/resvg/text/textPath/invalid-link.svg", "ref/resvg/text/textPath/invalid-link.png", "diff/resvg/text/textPath/invalid-link.png", false), 0)}
#[test] fn resvg_text_textPath_mixed_children_2() {assert_eq!(run_test("svg/resvg/text/textPath/mixed-children-2.svg", "ref/resvg/text/textPath/mixed-children-2.png", "diff/resvg/text/textPath/mixed-children-2.png", false), 0)}
#[test] fn resvg_text_textPath_startOffset_9999() {assert_eq!(run_test("svg/resvg/text/textPath/startOffset=9999.svg", "ref/resvg/text/textPath/startOffset=9999.png", "diff/resvg/text/textPath/startOffset=9999.png", false), 0)}
#[test] fn resvg_text_textPath_mixed_children_1() {assert_eq!(run_test("svg/resvg/text/textPath/mixed-children-1.svg", "ref/resvg/text/textPath/mixed-children-1.png", "diff/resvg/text/textPath/mixed-children-1.png", false), 0)}
#[test] fn resvg_text_textPath_nested() {assert_eq!(run_test("svg/resvg/text/textPath/nested.svg", "ref/resvg/text/textPath/nested.png", "diff/resvg/text/textPath/nested.png", false), 0)}
#[test] fn resvg_text_textPath_with_transform_outside_a_referenced_path() {assert_eq!(run_test("svg/resvg/text/textPath/with-transform-outside-a-referenced-path.svg", "ref/resvg/text/textPath/with-transform-outside-a-referenced-path.png", "diff/resvg/text/textPath/with-transform-outside-a-referenced-path.png", false), 0)}
#[test] fn resvg_text_textPath_with_text_anchor() {assert_eq!(run_test("svg/resvg/text/textPath/with-text-anchor.svg", "ref/resvg/text/textPath/with-text-anchor.png", "diff/resvg/text/textPath/with-text-anchor.png", false), 0)}
#[ignore] #[test] fn resvg_text_textPath_writing_mode_tb() {assert_eq!(run_test("svg/resvg/text/textPath/writing-mode=tb.svg", "ref/resvg/text/textPath/writing-mode=tb.png", "diff/resvg/text/textPath/writing-mode=tb.png", false), 0)}
#[test] fn resvg_text_textPath_with_big_letter_spacing() {assert_eq!(run_test("svg/resvg/text/textPath/with-big-letter-spacing.svg", "ref/resvg/text/textPath/with-big-letter-spacing.png", "diff/resvg/text/textPath/with-big-letter-spacing.png", false), 0)}
#[test] fn resvg_text_textPath_path_with_ClosePath() {assert_eq!(run_test("svg/resvg/text/textPath/path-with-ClosePath.svg", "ref/resvg/text/textPath/path-with-ClosePath.png", "diff/resvg/text/textPath/path-with-ClosePath.png", false), 0)}
#[test] fn resvg_text_textPath_simple_case() {assert_eq!(run_test("svg/resvg/text/textPath/simple-case.svg", "ref/resvg/text/textPath/simple-case.png", "diff/resvg/text/textPath/simple-case.png", false), 0)}
#[test] fn resvg_text_textPath_path_with_subpaths_and_startOffset() {assert_eq!(run_test("svg/resvg/text/textPath/path-with-subpaths-and-startOffset.svg", "ref/resvg/text/textPath/path-with-subpaths-and-startOffset.png", "diff/resvg/text/textPath/path-with-subpaths-and-startOffset.png", false), 0)}
#[ignore] #[test] fn resvg_text_textPath_method_stretch() {assert_eq!(run_test("svg/resvg/text/textPath/method=stretch.svg", "ref/resvg/text/textPath/method=stretch.png", "diff/resvg/text/textPath/method=stretch.png", false), 0)}
#[ignore] #[test] fn resvg_text_textPath_with_path_and_xlink_href() {assert_eq!(run_test("svg/resvg/text/textPath/with-path-and-xlink-href.svg", "ref/resvg/text/textPath/with-path-and-xlink-href.png", "diff/resvg/text/textPath/with-path-and-xlink-href.png", false), 0)}
#[test] fn resvg_text_textPath_no_link() {assert_eq!(run_test("svg/resvg/text/textPath/no-link.svg", "ref/resvg/text/textPath/no-link.png", "diff/resvg/text/textPath/no-link.png", false), 0)}
#[test] fn resvg_text_textPath_with_coordinates_on_text() {assert_eq!(run_test("svg/resvg/text/textPath/with-coordinates-on-text.svg", "ref/resvg/text/textPath/with-coordinates-on-text.png", "diff/resvg/text/textPath/with-coordinates-on-text.png", false), 0)}
#[test] fn resvg_text_textPath_m_A_path() {assert_eq!(run_test("svg/resvg/text/textPath/m-A-path.svg", "ref/resvg/text/textPath/m-A-path.png", "diff/resvg/text/textPath/m-A-path.png", false), 0)}
#[test] fn resvg_text_textPath_closed_path() {assert_eq!(run_test("svg/resvg/text/textPath/closed-path.svg", "ref/resvg/text/textPath/closed-path.png", "diff/resvg/text/textPath/closed-path.png", false), 0)}
#[test] fn resvg_text_textPath_with_baseline_shift() {assert_eq!(run_test("svg/resvg/text/textPath/with-baseline-shift.svg", "ref/resvg/text/textPath/with-baseline-shift.png", "diff/resvg/text/textPath/with-baseline-shift.png", false), 0)}
#[ignore] #[test] fn resvg_text_textPath_with_baseline_shift_and_rotate() {assert_eq!(run_test("svg/resvg/text/textPath/with-baseline-shift-and-rotate.svg", "ref/resvg/text/textPath/with-baseline-shift-and-rotate.png", "diff/resvg/text/textPath/with-baseline-shift-and-rotate.png", false), 0)}
#[test] fn resvg_text_textPath_very_long_text() {assert_eq!(run_test("svg/resvg/text/textPath/very-long-text.svg", "ref/resvg/text/textPath/very-long-text.png", "diff/resvg/text/textPath/very-long-text.png", false), 0)}
#[test] fn resvg_text_textPath_startOffset_5mm() {assert_eq!(run_test("svg/resvg/text/textPath/startOffset=5mm.svg", "ref/resvg/text/textPath/startOffset=5mm.png", "diff/resvg/text/textPath/startOffset=5mm.png", false), 0)}
#[test] fn resvg_text_textPath_with_underline() {assert_eq!(run_test("svg/resvg/text/textPath/with-underline.svg", "ref/resvg/text/textPath/with-underline.png", "diff/resvg/text/textPath/with-underline.png", false), 0)}
#[test] fn resvg_text_textPath_tspan_with_absolute_position() {assert_eq!(run_test("svg/resvg/text/textPath/tspan-with-absolute-position.svg", "ref/resvg/text/textPath/tspan-with-absolute-position.png", "diff/resvg/text/textPath/tspan-with-absolute-position.png", false), 0)}
#[test] fn resvg_text_textPath_startOffset_10percent() {assert_eq!(run_test("svg/resvg/text/textPath/startOffset=10percent.svg", "ref/resvg/text/textPath/startOffset=10percent.png", "diff/resvg/text/textPath/startOffset=10percent.png", false), 0)}
#[ignore] #[test] fn resvg_text_textPath_side_right() {assert_eq!(run_test("svg/resvg/text/textPath/side=right.svg", "ref/resvg/text/textPath/side=right.png", "diff/resvg/text/textPath/side=right.png", false), 0)}
#[test] fn resvg_text_textPath_with_rotate() {assert_eq!(run_test("svg/resvg/text/textPath/with-rotate.svg", "ref/resvg/text/textPath/with-rotate.png", "diff/resvg/text/textPath/with-rotate.png", false), 0)}
#[test] fn resvg_text_textPath_m_L_Z_path() {assert_eq!(run_test("svg/resvg/text/textPath/m-L-Z-path.svg", "ref/resvg/text/textPath/m-L-Z-path.png", "diff/resvg/text/textPath/m-L-Z-path.png", false), 0)}
#[test] fn resvg_text_textPath_with_transform_on_a_referenced_path() {assert_eq!(run_test("svg/resvg/text/textPath/with-transform-on-a-referenced-path.svg", "ref/resvg/text/textPath/with-transform-on-a-referenced-path.png", "diff/resvg/text/textPath/with-transform-on-a-referenced-path.png", false), 0)}
#[test] fn resvg_text_textPath_path_with_subpaths() {assert_eq!(run_test("svg/resvg/text/textPath/path-with-subpaths.svg", "ref/resvg/text/textPath/path-with-subpaths.png", "diff/resvg/text/textPath/path-with-subpaths.png", false), 0)}
#[test] fn resvg_text_textPath_with_coordinates_on_textPath() {assert_eq!(run_test("svg/resvg/text/textPath/with-coordinates-on-textPath.svg", "ref/resvg/text/textPath/with-coordinates-on-textPath.png", "diff/resvg/text/textPath/with-coordinates-on-textPath.png", false), 0)}
#[test] fn resvg_text_textPath_startOffset__100() {assert_eq!(run_test("svg/resvg/text/textPath/startOffset=-100.svg", "ref/resvg/text/textPath/startOffset=-100.png", "diff/resvg/text/textPath/startOffset=-100.png", false), 0)}
#[test] fn resvg_text_textPath_two_paths() {assert_eq!(run_test("svg/resvg/text/textPath/two-paths.svg", "ref/resvg/text/textPath/two-paths.png", "diff/resvg/text/textPath/two-paths.png", false), 0)}
#[test] fn resvg_text_textPath_startOffset_30() {assert_eq!(run_test("svg/resvg/text/textPath/startOffset=30.svg", "ref/resvg/text/textPath/startOffset=30.png", "diff/resvg/text/textPath/startOffset=30.png", false), 0)}
#[test] fn resvg_text_textPath_tspan_with_relative_position() {assert_eq!(run_test("svg/resvg/text/textPath/tspan-with-relative-position.svg", "ref/resvg/text/textPath/tspan-with-relative-position.png", "diff/resvg/text/textPath/tspan-with-relative-position.png", false), 0)}
#[test] fn resvg_structure_svg_nested_svg_with_rect_and_percent_values() {assert_eq!(run_test("svg/resvg/structure/svg/nested-svg-with-rect-and-percent-values.svg", "ref/resvg/structure/svg/nested-svg-with-rect-and-percent-values.png", "diff/resvg/structure/svg/nested-svg-with-rect-and-percent-values.png", false), 0)}
#[ignore] #[test] fn resvg_structure_svg_zero_size() {assert_eq!(run_test("svg/resvg/structure/svg/zero-size.svg", "ref/resvg/structure/svg/zero-size.png", "diff/resvg/structure/svg/zero-size.png", false), 0)}
#[test] fn resvg_structure_svg_preserveAspectRatio_xMinYMin() {assert_eq!(run_test("svg/resvg/structure/svg/preserveAspectRatio=xMinYMin.svg", "ref/resvg/structure/svg/preserveAspectRatio=xMinYMin.png", "diff/resvg/structure/svg/preserveAspectRatio=xMinYMin.png", false), 0)}
#[test] fn resvg_structure_svg_nested_svg_with_rect_and_viewBox_2() {assert_eq!(run_test("svg/resvg/structure/svg/nested-svg-with-rect-and-viewBox-2.svg", "ref/resvg/structure/svg/nested-svg-with-rect-and-viewBox-2.png", "diff/resvg/structure/svg/nested-svg-with-rect-and-viewBox-2.png", false), 0)}
#[test] fn resvg_structure_svg_nested_svg_with_rect_and_viewBox_3() {assert_eq!(run_test("svg/resvg/structure/svg/nested-svg-with-rect-and-viewBox-3.svg", "ref/resvg/structure/svg/nested-svg-with-rect-and-viewBox-3.png", "diff/resvg/structure/svg/nested-svg-with-rect-and-viewBox-3.png", false), 0)}
#[test] fn resvg_structure_svg_no_children() {assert_eq!(run_test("svg/resvg/structure/svg/no-children.svg", "ref/resvg/structure/svg/no-children.png", "diff/resvg/structure/svg/no-children.png", false), 0)}
#[test] fn resvg_structure_svg_nested_svg_with_rect_and_viewBox_1() {assert_eq!(run_test("svg/resvg/structure/svg/nested-svg-with-rect-and-viewBox-1.svg", "ref/resvg/structure/svg/nested-svg-with-rect-and-viewBox-1.png", "diff/resvg/structure/svg/nested-svg-with-rect-and-viewBox-1.png", false), 0)}
#[ignore] #[test] fn resvg_structure_svg_funcIRI_with_invalid_characters() {assert_eq!(run_test("svg/resvg/structure/svg/funcIRI-with-invalid-characters.svg", "ref/resvg/structure/svg/funcIRI-with-invalid-characters.png", "diff/resvg/structure/svg/funcIRI-with-invalid-characters.png", false), 0)}
#[test] fn resvg_structure_svg_elements_via_ENTITY_reference_1() {assert_eq!(run_test("svg/resvg/structure/svg/elements-via-ENTITY-reference-1.svg", "ref/resvg/structure/svg/elements-via-ENTITY-reference-1.png", "diff/resvg/structure/svg/elements-via-ENTITY-reference-1.png", false), 0)}
#[test] fn resvg_structure_svg_preserveAspectRatio_xMaxYMax_slice() {assert_eq!(run_test("svg/resvg/structure/svg/preserveAspectRatio=xMaxYMax-slice.svg", "ref/resvg/structure/svg/preserveAspectRatio=xMaxYMax-slice.png", "diff/resvg/structure/svg/preserveAspectRatio=xMaxYMax-slice.png", false), 0)}
#[test] fn resvg_structure_svg_elements_via_ENTITY_reference_3() {assert_eq!(run_test("svg/resvg/structure/svg/elements-via-ENTITY-reference-3.svg", "ref/resvg/structure/svg/elements-via-ENTITY-reference-3.png", "diff/resvg/structure/svg/elements-via-ENTITY-reference-3.png", false), 0)}
#[test] fn resvg_structure_svg_elements_via_ENTITY_reference_2() {assert_eq!(run_test("svg/resvg/structure/svg/elements-via-ENTITY-reference-2.svg", "ref/resvg/structure/svg/elements-via-ENTITY-reference-2.png", "diff/resvg/structure/svg/elements-via-ENTITY-reference-2.png", false), 0)}
#[test] fn resvg_structure_svg_deeply_nested_svg() {assert_eq!(run_test("svg/resvg/structure/svg/deeply-nested-svg.svg", "ref/resvg/structure/svg/deeply-nested-svg.png", "diff/resvg/structure/svg/deeply-nested-svg.png", false), 0)}
#[test] fn resvg_structure_svg_viewBox_not_at_zero_pos() {assert_eq!(run_test("svg/resvg/structure/svg/viewBox-not-at-zero-pos.svg", "ref/resvg/structure/svg/viewBox-not-at-zero-pos.png", "diff/resvg/structure/svg/viewBox-not-at-zero-pos.png", false), 0)}
#[test] fn resvg_structure_svg_preserveAspectRatio_xMaxYMax() {assert_eq!(run_test("svg/resvg/structure/svg/preserveAspectRatio=xMaxYMax.svg", "ref/resvg/structure/svg/preserveAspectRatio=xMaxYMax.png", "diff/resvg/structure/svg/preserveAspectRatio=xMaxYMax.png", false), 0)}
#[test] fn resvg_structure_svg_nested_svg_with_relative_width_and_height() {assert_eq!(run_test("svg/resvg/structure/svg/nested-svg-with-relative-width-and-height.svg", "ref/resvg/structure/svg/nested-svg-with-relative-width-and-height.png", "diff/resvg/structure/svg/nested-svg-with-relative-width-and-height.png", false), 0)}
#[test] fn resvg_structure_svg_mixed_namespaces() {assert_eq!(run_test("svg/resvg/structure/svg/mixed-namespaces.svg", "ref/resvg/structure/svg/mixed-namespaces.png", "diff/resvg/structure/svg/mixed-namespaces.png", false), 0)}
#[ignore] #[test] fn resvg_structure_svg_funcIRI_with_quotes() {assert_eq!(run_test("svg/resvg/structure/svg/funcIRI-with-quotes.svg", "ref/resvg/structure/svg/funcIRI-with-quotes.png", "diff/resvg/structure/svg/funcIRI-with-quotes.png", false), 0)}
#[test] fn resvg_structure_svg_nested_svg_with_overflow_visible() {assert_eq!(run_test("svg/resvg/structure/svg/nested-svg-with-overflow-visible.svg", "ref/resvg/structure/svg/nested-svg-with-overflow-visible.png", "diff/resvg/structure/svg/nested-svg-with-overflow-visible.png", false), 0)}
#[ignore] #[test] fn resvg_structure_svg_negative_size() {assert_eq!(run_test("svg/resvg/structure/svg/negative-size.svg", "ref/resvg/structure/svg/negative-size.png", "diff/resvg/structure/svg/negative-size.png", false), 0)}
#[test] fn resvg_structure_svg_preserveAspectRatio_xMidYMid() {assert_eq!(run_test("svg/resvg/structure/svg/preserveAspectRatio=xMidYMid.svg", "ref/resvg/structure/svg/preserveAspectRatio=xMidYMid.png", "diff/resvg/structure/svg/preserveAspectRatio=xMidYMid.png", false), 0)}
#[test] fn resvg_structure_svg_proportional_viewBox() {assert_eq!(run_test("svg/resvg/structure/svg/proportional-viewBox.svg", "ref/resvg/structure/svg/proportional-viewBox.png", "diff/resvg/structure/svg/proportional-viewBox.png", false), 0)}
#[test] fn resvg_structure_svg_no_size() {assert_eq!(run_test("svg/resvg/structure/svg/no-size.svg", "ref/resvg/structure/svg/no-size.png", "diff/resvg/structure/svg/no-size.png", false), 0)}
#[test] fn resvg_structure_svg_preserveAspectRatio_xMidYMid_slice() {assert_eq!(run_test("svg/resvg/structure/svg/preserveAspectRatio=xMidYMid-slice.svg", "ref/resvg/structure/svg/preserveAspectRatio=xMidYMid-slice.png", "diff/resvg/structure/svg/preserveAspectRatio=xMidYMid-slice.png", false), 0)}
#[test] fn resvg_structure_svg_preserveAspectRatio_xMinYMin_slice() {assert_eq!(run_test("svg/resvg/structure/svg/preserveAspectRatio=xMinYMin-slice.svg", "ref/resvg/structure/svg/preserveAspectRatio=xMinYMin-slice.png", "diff/resvg/structure/svg/preserveAspectRatio=xMinYMin-slice.png", false), 0)}
#[test] fn resvg_structure_svg_preserveAspectRatio_none() {assert_eq!(run_test("svg/resvg/structure/svg/preserveAspectRatio=none.svg", "ref/resvg/structure/svg/preserveAspectRatio=none.png", "diff/resvg/structure/svg/preserveAspectRatio=none.png", false), 0)}
#[test] fn resvg_structure_svg_attribute_value_via_ENTITY_reference() {assert_eq!(run_test("svg/resvg/structure/svg/attribute-value-via-ENTITY-reference.svg", "ref/resvg/structure/svg/attribute-value-via-ENTITY-reference.png", "diff/resvg/structure/svg/attribute-value-via-ENTITY-reference.png", false), 0)}
#[test] fn resvg_structure_svg_explicit_svg_namespace() {assert_eq!(run_test("svg/resvg/structure/svg/explicit-svg-namespace.svg", "ref/resvg/structure/svg/explicit-svg-namespace.png", "diff/resvg/structure/svg/explicit-svg-namespace.png", false), 0)}
#[ignore] #[test] fn resvg_structure_svg_invalid_id_attribute_2() {assert_eq!(run_test("svg/resvg/structure/svg/invalid-id-attribute-2.svg", "ref/resvg/structure/svg/invalid-id-attribute-2.png", "diff/resvg/structure/svg/invalid-id-attribute-2.png", false), 0)}
#[ignore] #[test] fn resvg_structure_svg_funcIRI_parsing() {assert_eq!(run_test("svg/resvg/structure/svg/funcIRI-parsing.svg", "ref/resvg/structure/svg/funcIRI-parsing.png", "diff/resvg/structure/svg/funcIRI-parsing.png", false), 0)}
#[test] fn resvg_structure_svg_nested_svg_with_overflow_auto() {assert_eq!(run_test("svg/resvg/structure/svg/nested-svg-with-overflow-auto.svg", "ref/resvg/structure/svg/nested-svg-with-overflow-auto.png", "diff/resvg/structure/svg/nested-svg-with-overflow-auto.png", false), 0)}
#[ignore] #[test] fn resvg_structure_svg_invalid_id_attribute_1() {assert_eq!(run_test("svg/resvg/structure/svg/invalid-id-attribute-1.svg", "ref/resvg/structure/svg/invalid-id-attribute-1.png", "diff/resvg/structure/svg/invalid-id-attribute-1.png", false), 0)}
#[test] fn resvg_structure_svg_nested_svg_with_viewBox() {assert_eq!(run_test("svg/resvg/structure/svg/nested-svg-with-viewBox.svg", "ref/resvg/structure/svg/nested-svg-with-viewBox.png", "diff/resvg/structure/svg/nested-svg-with-viewBox.png", false), 0)}
#[test] fn resvg_structure_svg_nested_svg_one_with_rect_and_one_with_viewBox() {assert_eq!(run_test("svg/resvg/structure/svg/nested-svg-one-with-rect-and-one-with-viewBox.svg", "ref/resvg/structure/svg/nested-svg-one-with-rect-and-one-with-viewBox.png", "diff/resvg/structure/svg/nested-svg-one-with-rect-and-one-with-viewBox.png", false), 0)}
#[test] fn resvg_structure_svg_nested_svg() {assert_eq!(run_test("svg/resvg/structure/svg/nested-svg.svg", "ref/resvg/structure/svg/nested-svg.png", "diff/resvg/structure/svg/nested-svg.png", false), 0)}
#[test] fn resvg_structure_svg_xmlns_validation() {assert_eq!(run_test("svg/resvg/structure/svg/xmlns-validation.svg", "ref/resvg/structure/svg/xmlns-validation.png", "diff/resvg/structure/svg/xmlns-validation.png", false), 0)}
#[test] fn resvg_structure_svg_nested_svg_with_rect() {assert_eq!(run_test("svg/resvg/structure/svg/nested-svg-with-rect.svg", "ref/resvg/structure/svg/nested-svg-with-rect.png", "diff/resvg/structure/svg/nested-svg-with-rect.png", false), 0)}
#[test] fn resvg_structure_svg_nested_svg_with_viewBox_and_percent_values() {assert_eq!(run_test("svg/resvg/structure/svg/nested-svg-with-viewBox-and-percent-values.svg", "ref/resvg/structure/svg/nested-svg-with-viewBox-and-percent-values.png", "diff/resvg/structure/svg/nested-svg-with-viewBox-and-percent-values.png", false), 0)}
#[test] fn resvg_structure_svg_nested_svg_with_rect_and_viewBox_and_percent_values() {assert_eq!(run_test("svg/resvg/structure/svg/nested-svg-with-rect-and-viewBox-and-percent-values.svg", "ref/resvg/structure/svg/nested-svg-with-rect-and-viewBox-and-percent-values.png", "diff/resvg/structure/svg/nested-svg-with-rect-and-viewBox-and-percent-values.png", false), 0)}
#[test] fn resvg_structure_svg_rect_inside_a_non_SVG_element() {assert_eq!(run_test("svg/resvg/structure/svg/rect-inside-a-non-SVG-element.svg", "ref/resvg/structure/svg/rect-inside-a-non-SVG-element.png", "diff/resvg/structure/svg/rect-inside-a-non-SVG-element.png", false), 0)}
#[test] fn resvg_structure_svg_preserveAspectRatio_with_viewBox_not_at_zero_pos() {assert_eq!(run_test("svg/resvg/structure/svg/preserveAspectRatio-with-viewBox-not-at-zero-pos.svg", "ref/resvg/structure/svg/preserveAspectRatio-with-viewBox-not-at-zero-pos.png", "diff/resvg/structure/svg/preserveAspectRatio-with-viewBox-not-at-zero-pos.png", false), 0)}
#[test] fn resvg_structure_systemLanguage_on_svg() {assert_eq!(run_test("svg/resvg/structure/systemLanguage/on-svg.svg", "ref/resvg/structure/systemLanguage/on-svg.png", "diff/resvg/structure/systemLanguage/on-svg.png", false), 0)}
#[test] fn resvg_structure_systemLanguage_on_defs() {assert_eq!(run_test("svg/resvg/structure/systemLanguage/on-defs.svg", "ref/resvg/structure/systemLanguage/on-defs.png", "diff/resvg/structure/systemLanguage/on-defs.png", false), 0)}
#[test] fn resvg_structure_systemLanguage_en_GB() {assert_eq!(run_test("svg/resvg/structure/systemLanguage/en-GB.svg", "ref/resvg/structure/systemLanguage/en-GB.png", "diff/resvg/structure/systemLanguage/en-GB.png", false), 0)}
#[test] fn resvg_structure_systemLanguage_en() {assert_eq!(run_test("svg/resvg/structure/systemLanguage/en.svg", "ref/resvg/structure/systemLanguage/en.png", "diff/resvg/structure/systemLanguage/en.png", false), 0)}
#[test] fn resvg_structure_systemLanguage_on_clipPath() {assert_eq!(run_test("svg/resvg/structure/systemLanguage/on-clipPath.svg", "ref/resvg/structure/systemLanguage/on-clipPath.png", "diff/resvg/structure/systemLanguage/on-clipPath.png", false), 0)}
#[test] fn resvg_structure_systemLanguage_en_US() {assert_eq!(run_test("svg/resvg/structure/systemLanguage/en-US.svg", "ref/resvg/structure/systemLanguage/en-US.png", "diff/resvg/structure/systemLanguage/en-US.png", false), 0)}
#[test] fn resvg_structure_systemLanguage_on_tspan() {assert_eq!(run_test("svg/resvg/structure/systemLanguage/on-tspan.svg", "ref/resvg/structure/systemLanguage/on-tspan.png", "diff/resvg/structure/systemLanguage/on-tspan.png", false), 0)}
#[test] fn resvg_structure_systemLanguage_on_linearGradient() {assert_eq!(run_test("svg/resvg/structure/systemLanguage/on-linearGradient.svg", "ref/resvg/structure/systemLanguage/on-linearGradient.png", "diff/resvg/structure/systemLanguage/on-linearGradient.png", false), 0)}
#[test] fn resvg_structure_systemLanguage_ru_en() {assert_eq!(run_test("svg/resvg/structure/systemLanguage/ru-en.svg", "ref/resvg/structure/systemLanguage/ru-en.png", "diff/resvg/structure/systemLanguage/ru-en.png", false), 0)}
#[test] fn resvg_structure_systemLanguage_ru_Ru() {assert_eq!(run_test("svg/resvg/structure/systemLanguage/ru-Ru.svg", "ref/resvg/structure/systemLanguage/ru-Ru.png", "diff/resvg/structure/systemLanguage/ru-Ru.png", false), 0)}
#[test] fn resvg_structure_g_deeply_nested_groups() {assert_eq!(run_test("svg/resvg/structure/g/deeply-nested-groups.svg", "ref/resvg/structure/g/deeply-nested-groups.png", "diff/resvg/structure/g/deeply-nested-groups.png", false), 0)}
#[test] fn resvg_structure_g_recursive_inheritance() {assert_eq!(run_test("svg/resvg/structure/g/recursive-inheritance.svg", "ref/resvg/structure/g/recursive-inheritance.png", "diff/resvg/structure/g/recursive-inheritance.png", false), 0)}
#[test] fn resvg_structure_style_iD_selector() {assert_eq!(run_test("svg/resvg/structure/style/iD-selector.svg", "ref/resvg/structure/style/iD-selector.png", "diff/resvg/structure/style/iD-selector.png", false), 0)}
#[test] fn resvg_structure_style_non_presentational_attribute() {assert_eq!(run_test("svg/resvg/structure/style/non-presentational-attribute.svg", "ref/resvg/structure/style/non-presentational-attribute.png", "diff/resvg/structure/style/non-presentational-attribute.png", false), 0)}
#[test] fn resvg_structure_style_invalid_type() {assert_eq!(run_test("svg/resvg/structure/style/invalid-type.svg", "ref/resvg/structure/style/invalid-type.png", "diff/resvg/structure/style/invalid-type.png", false), 0)}
#[ignore] #[test] fn resvg_structure_style_important() {assert_eq!(run_test("svg/resvg/structure/style/important.svg", "ref/resvg/structure/style/important.png", "diff/resvg/structure/style/important.png", false), 0)}
#[test] fn resvg_structure_style_transform() {assert_eq!(run_test("svg/resvg/structure/style/transform.svg", "ref/resvg/structure/style/transform.png", "diff/resvg/structure/style/transform.png", false), 0)}
#[test] fn resvg_structure_style_type_selector() {assert_eq!(run_test("svg/resvg/structure/style/type-selector.svg", "ref/resvg/structure/style/type-selector.png", "diff/resvg/structure/style/type-selector.png", false), 0)}
#[test] fn resvg_structure_style_class_selector() {assert_eq!(run_test("svg/resvg/structure/style/class-selector.svg", "ref/resvg/structure/style/class-selector.png", "diff/resvg/structure/style/class-selector.png", false), 0)}
#[test] fn resvg_structure_style_resolve_order() {assert_eq!(run_test("svg/resvg/structure/style/resolve-order.svg", "ref/resvg/structure/style/resolve-order.png", "diff/resvg/structure/style/resolve-order.png", false), 0)}
#[test] fn resvg_structure_style_unresolved_class_selector() {assert_eq!(run_test("svg/resvg/structure/style/unresolved-class-selector.svg", "ref/resvg/structure/style/unresolved-class-selector.png", "diff/resvg/structure/style/unresolved-class-selector.png", false), 0)}
#[test] fn resvg_structure_style_attribute_selector() {assert_eq!(run_test("svg/resvg/structure/style/attribute-selector.svg", "ref/resvg/structure/style/attribute-selector.png", "diff/resvg/structure/style/attribute-selector.png", false), 0)}
#[test] fn resvg_structure_style_combined_selectors() {assert_eq!(run_test("svg/resvg/structure/style/combined-selectors.svg", "ref/resvg/structure/style/combined-selectors.png", "diff/resvg/structure/style/combined-selectors.png", false), 0)}
#[test] fn resvg_structure_style_style_inside_CDATA() {assert_eq!(run_test("svg/resvg/structure/style/style-inside-CDATA.svg", "ref/resvg/structure/style/style-inside-CDATA.png", "diff/resvg/structure/style/style-inside-CDATA.png", false), 0)}
#[test] fn resvg_structure_style_rule_specificity() {assert_eq!(run_test("svg/resvg/structure/style/rule-specificity.svg", "ref/resvg/structure/style/rule-specificity.png", "diff/resvg/structure/style/rule-specificity.png", false), 0)}
#[test] fn resvg_structure_style_universal_selector() {assert_eq!(run_test("svg/resvg/structure/style/universal-selector.svg", "ref/resvg/structure/style/universal-selector.png", "diff/resvg/structure/style/universal-selector.png", false), 0)}
#[test] fn resvg_structure_style_style_after_usage() {assert_eq!(run_test("svg/resvg/structure/style/style-after-usage.svg", "ref/resvg/structure/style/style-after-usage.png", "diff/resvg/structure/style/style-after-usage.png", false), 0)}
#[test] fn resvg_structure_symbol_with_transform_on_use_no_size() {assert_eq!(run_test("svg/resvg/structure/symbol/with-transform-on-use-no-size.svg", "ref/resvg/structure/symbol/with-transform-on-use-no-size.png", "diff/resvg/structure/symbol/with-transform-on-use-no-size.png", false), 0)}
#[test] fn resvg_structure_symbol_unused_symbol() {assert_eq!(run_test("svg/resvg/structure/symbol/unused-symbol.svg", "ref/resvg/structure/symbol/unused-symbol.png", "diff/resvg/structure/symbol/unused-symbol.png", false), 0)}
#[test] fn resvg_structure_symbol_with_viewBox() {assert_eq!(run_test("svg/resvg/structure/symbol/with-viewBox.svg", "ref/resvg/structure/symbol/with-viewBox.png", "diff/resvg/structure/symbol/with-viewBox.png", false), 0)}
#[test] fn resvg_structure_symbol_with_transform_on_use() {assert_eq!(run_test("svg/resvg/structure/symbol/with-transform-on-use.svg", "ref/resvg/structure/symbol/with-transform-on-use.png", "diff/resvg/structure/symbol/with-transform-on-use.png", false), 0)}
#[test] fn resvg_structure_symbol_indirect_symbol_reference() {assert_eq!(run_test("svg/resvg/structure/symbol/indirect-symbol-reference.svg", "ref/resvg/structure/symbol/indirect-symbol-reference.png", "diff/resvg/structure/symbol/indirect-symbol-reference.png", false), 0)}
#[test] fn resvg_structure_symbol_with_custom_use_size() {assert_eq!(run_test("svg/resvg/structure/symbol/with-custom-use-size.svg", "ref/resvg/structure/symbol/with-custom-use-size.png", "diff/resvg/structure/symbol/with-custom-use-size.png", false), 0)}
#[test] fn resvg_structure_symbol_simple_case() {assert_eq!(run_test("svg/resvg/structure/symbol/simple-case.svg", "ref/resvg/structure/symbol/simple-case.png", "diff/resvg/structure/symbol/simple-case.png", false), 0)}
#[test] fn resvg_structure_symbol_opacity_on_symbol_with_viewBox() {assert_eq!(run_test("svg/resvg/structure/symbol/opacity-on-symbol-with-viewBox.svg", "ref/resvg/structure/symbol/opacity-on-symbol-with-viewBox.png", "diff/resvg/structure/symbol/opacity-on-symbol-with-viewBox.png", false), 0)}
#[test] fn resvg_structure_symbol_with_viewBox_and_custom_use_size() {assert_eq!(run_test("svg/resvg/structure/symbol/with-viewBox-and-custom-use-size.svg", "ref/resvg/structure/symbol/with-viewBox-and-custom-use-size.png", "diff/resvg/structure/symbol/with-viewBox-and-custom-use-size.png", false), 0)}
#[test] fn resvg_structure_symbol_opacity_on_symbol() {assert_eq!(run_test("svg/resvg/structure/symbol/opacity-on-symbol.svg", "ref/resvg/structure/symbol/opacity-on-symbol.png", "diff/resvg/structure/symbol/opacity-on-symbol.png", false), 0)}
#[test] fn resvg_structure_symbol_content_outside_the_viewbox() {assert_eq!(run_test("svg/resvg/structure/symbol/content-outside-the-viewbox.svg", "ref/resvg/structure/symbol/content-outside-the-viewbox.png", "diff/resvg/structure/symbol/content-outside-the-viewbox.png", false), 0)}
#[test] fn resvg_structure_symbol_opacity_on_use_and_symbol() {assert_eq!(run_test("svg/resvg/structure/symbol/opacity-on-use-and-symbol.svg", "ref/resvg/structure/symbol/opacity-on-use-and-symbol.png", "diff/resvg/structure/symbol/opacity-on-use-and-symbol.png", false), 0)}
#[test] fn resvg_structure_symbol_with_overflow_visible() {assert_eq!(run_test("svg/resvg/structure/symbol/with-overflow-visible.svg", "ref/resvg/structure/symbol/with-overflow-visible.png", "diff/resvg/structure/symbol/with-overflow-visible.png", false), 0)}
#[test] fn resvg_structure_symbol_with_viewBox_and_custom_use_rect() {assert_eq!(run_test("svg/resvg/structure/symbol/with-viewBox-and-custom-use-rect.svg", "ref/resvg/structure/symbol/with-viewBox-and-custom-use-rect.png", "diff/resvg/structure/symbol/with-viewBox-and-custom-use-rect.png", false), 0)}
#[test] fn resvg_structure_symbol_opacity_on_use() {assert_eq!(run_test("svg/resvg/structure/symbol/opacity-on-use.svg", "ref/resvg/structure/symbol/opacity-on-use.png", "diff/resvg/structure/symbol/opacity-on-use.png", false), 0)}
#[test] fn resvg_structure_symbol_with_transform() {assert_eq!(run_test("svg/resvg/structure/symbol/with-transform.svg", "ref/resvg/structure/symbol/with-transform.png", "diff/resvg/structure/symbol/with-transform.png", false), 0)}
#[test] fn resvg_structure_a_inside_text() {assert_eq!(run_test("svg/resvg/structure/a/inside-text.svg", "ref/resvg/structure/a/inside-text.png", "diff/resvg/structure/a/inside-text.png", false), 0)}
#[test] fn resvg_structure_a_on_text() {assert_eq!(run_test("svg/resvg/structure/a/on-text.svg", "ref/resvg/structure/a/on-text.png", "diff/resvg/structure/a/on-text.png", false), 0)}
#[test] fn resvg_structure_a_on_shape() {assert_eq!(run_test("svg/resvg/structure/a/on-shape.svg", "ref/resvg/structure/a/on-shape.png", "diff/resvg/structure/a/on-shape.png", false), 0)}
#[test] fn resvg_structure_a_on_tspan() {assert_eq!(run_test("svg/resvg/structure/a/on-tspan.svg", "ref/resvg/structure/a/on-tspan.png", "diff/resvg/structure/a/on-tspan.png", false), 0)}
#[test] fn resvg_structure_a_inside_tspan() {assert_eq!(run_test("svg/resvg/structure/a/inside-tspan.svg", "ref/resvg/structure/a/inside-tspan.png", "diff/resvg/structure/a/inside-tspan.png", false), 0)}
#[ignore] #[test] fn resvg_structure_image_external_jpeg() {assert_eq!(run_test("svg/resvg/structure/image/external-jpeg.svg", "ref/resvg/structure/image/external-jpeg.png", "diff/resvg/structure/image/external-jpeg.png", false), 0)}
#[ignore] #[test] fn resvg_structure_image_external_svg() {assert_eq!(run_test("svg/resvg/structure/image/external-svg.svg", "ref/resvg/structure/image/external-svg.png", "diff/resvg/structure/image/external-svg.png", false), 0)}
#[test] fn resvg_structure_image_embedded_svg() {assert_eq!(run_test("svg/resvg/structure/image/embedded-svg.svg", "ref/resvg/structure/image/embedded-svg.png", "diff/resvg/structure/image/embedded-svg.png", false), 0)}
#[test] fn resvg_structure_image_preserveAspectRatio_xMaxYMax_meet() {assert_eq!(run_test("svg/resvg/structure/image/preserveAspectRatio=xMaxYMax-meet.svg", "ref/resvg/structure/image/preserveAspectRatio=xMaxYMax-meet.png", "diff/resvg/structure/image/preserveAspectRatio=xMaxYMax-meet.png", false), 0)}
#[test] fn resvg_structure_image_preserveAspectRatio_xMidYMid_meet() {assert_eq!(run_test("svg/resvg/structure/image/preserveAspectRatio=xMidYMid-meet.svg", "ref/resvg/structure/image/preserveAspectRatio=xMidYMid-meet.png", "diff/resvg/structure/image/preserveAspectRatio=xMidYMid-meet.png", false), 0)}
#[ignore] #[test] fn resvg_structure_image_zero_height() {assert_eq!(run_test("svg/resvg/structure/image/zero-height.svg", "ref/resvg/structure/image/zero-height.png", "diff/resvg/structure/image/zero-height.png", false), 0)}
#[ignore] #[test] fn resvg_structure_image_no_width_and_height_on_svg() {assert_eq!(run_test("svg/resvg/structure/image/no-width-and-height-on-svg.svg", "ref/resvg/structure/image/no-width-and-height-on-svg.png", "diff/resvg/structure/image/no-width-and-height-on-svg.png", false), 0)}
#[test] fn resvg_structure_image_embedded_16bit_png() {assert_eq!(run_test("svg/resvg/structure/image/embedded-16bit-png.svg", "ref/resvg/structure/image/embedded-16bit-png.png", "diff/resvg/structure/image/embedded-16bit-png.png", false), 0)}
#[test] fn resvg_structure_image_preserveAspectRatio_xMidYMid_meet_on_svg() {assert_eq!(run_test("svg/resvg/structure/image/preserveAspectRatio=xMidYMid-meet-on-svg.svg", "ref/resvg/structure/image/preserveAspectRatio=xMidYMid-meet-on-svg.png", "diff/resvg/structure/image/preserveAspectRatio=xMidYMid-meet-on-svg.png", false), 0)}
#[ignore] #[test] fn resvg_structure_image_zero_width() {assert_eq!(run_test("svg/resvg/structure/image/zero-width.svg", "ref/resvg/structure/image/zero-width.png", "diff/resvg/structure/image/zero-width.png", false), 0)}
#[test] fn resvg_structure_image_embedded_svgz() {assert_eq!(run_test("svg/resvg/structure/image/embedded-svgz.svg", "ref/resvg/structure/image/embedded-svgz.png", "diff/resvg/structure/image/embedded-svgz.png", false), 0)}
#[test] fn resvg_structure_image_preserveAspectRatio_xMinYMin_slice_on_svg() {assert_eq!(run_test("svg/resvg/structure/image/preserveAspectRatio=xMinYMin-slice-on-svg.svg", "ref/resvg/structure/image/preserveAspectRatio=xMinYMin-slice-on-svg.png", "diff/resvg/structure/image/preserveAspectRatio=xMinYMin-slice-on-svg.png", false), 0)}
#[test] fn resvg_structure_image_embedded_jpeg_as_image_jpeg() {assert_eq!(run_test("svg/resvg/structure/image/embedded-jpeg-as-image-jpeg.svg", "ref/resvg/structure/image/embedded-jpeg-as-image-jpeg.png", "diff/resvg/structure/image/embedded-jpeg-as-image-jpeg.png", false), 0)}
#[ignore] #[test] fn resvg_structure_image_raster_image_and_size_with_odd_numbers() {assert_eq!(run_test("svg/resvg/structure/image/raster-image-and-size-with-odd-numbers.svg", "ref/resvg/structure/image/raster-image-and-size-with-odd-numbers.png", "diff/resvg/structure/image/raster-image-and-size-with-odd-numbers.png", false), 0)}
#[ignore] #[test] fn resvg_structure_image_float_size() {assert_eq!(run_test("svg/resvg/structure/image/float-size.svg", "ref/resvg/structure/image/float-size.png", "diff/resvg/structure/image/float-size.png", false), 0)}
#[test] fn resvg_structure_image_preserveAspectRatio_xMaxYMax_slice() {assert_eq!(run_test("svg/resvg/structure/image/preserveAspectRatio=xMaxYMax-slice.svg", "ref/resvg/structure/image/preserveAspectRatio=xMaxYMax-slice.png", "diff/resvg/structure/image/preserveAspectRatio=xMaxYMax-slice.png", false), 0)}
#[ignore] #[test] fn resvg_structure_image_no_height() {assert_eq!(run_test("svg/resvg/structure/image/no-height.svg", "ref/resvg/structure/image/no-height.png", "diff/resvg/structure/image/no-height.png", false), 0)}
#[ignore] #[test] fn resvg_structure_image_width_and_height_set_to_auto() {assert_eq!(run_test("svg/resvg/structure/image/width-and-height-set-to-auto.svg", "ref/resvg/structure/image/width-and-height-set-to-auto.png", "diff/resvg/structure/image/width-and-height-set-to-auto.png", false), 0)}
#[ignore] #[test] fn resvg_structure_image_external_png() {assert_eq!(run_test("svg/resvg/structure/image/external-png.svg", "ref/resvg/structure/image/external-png.png", "diff/resvg/structure/image/external-png.png", false), 0)}
#[test] fn resvg_structure_image_embedded_svg_with_text() {assert_eq!(run_test("svg/resvg/structure/image/embedded-svg-with-text.svg", "ref/resvg/structure/image/embedded-svg-with-text.png", "diff/resvg/structure/image/embedded-svg-with-text.png", false), 0)}
#[test] fn resvg_structure_image_preserveAspectRatio_xMidYMid_slice_on_svg() {assert_eq!(run_test("svg/resvg/structure/image/preserveAspectRatio=xMidYMid-slice-on-svg.svg", "ref/resvg/structure/image/preserveAspectRatio=xMidYMid-slice-on-svg.png", "diff/resvg/structure/image/preserveAspectRatio=xMidYMid-slice-on-svg.png", false), 0)}
#[test] fn resvg_structure_image_embedded_svg_without_mime() {assert_eq!(run_test("svg/resvg/structure/image/embedded-svg-without-mime.svg", "ref/resvg/structure/image/embedded-svg-without-mime.png", "diff/resvg/structure/image/embedded-svg-without-mime.png", false), 0)}
#[test] fn resvg_structure_image_preserveAspectRatio_xMinYMin_meet() {assert_eq!(run_test("svg/resvg/structure/image/preserveAspectRatio=xMinYMin-meet.svg", "ref/resvg/structure/image/preserveAspectRatio=xMinYMin-meet.png", "diff/resvg/structure/image/preserveAspectRatio=xMinYMin-meet.png", false), 0)}
#[test] fn resvg_structure_image_preserveAspectRatio_xMaxYMax_meet_on_svg() {assert_eq!(run_test("svg/resvg/structure/image/preserveAspectRatio=xMaxYMax-meet-on-svg.svg", "ref/resvg/structure/image/preserveAspectRatio=xMaxYMax-meet-on-svg.png", "diff/resvg/structure/image/preserveAspectRatio=xMaxYMax-meet-on-svg.png", false), 0)}
#[test] fn resvg_structure_image_preserveAspectRatio_none_on_svg() {assert_eq!(run_test("svg/resvg/structure/image/preserveAspectRatio=none-on-svg.svg", "ref/resvg/structure/image/preserveAspectRatio=none-on-svg.png", "diff/resvg/structure/image/preserveAspectRatio=none-on-svg.png", false), 0)}
#[test] fn resvg_structure_image_embedded_png() {assert_eq!(run_test("svg/resvg/structure/image/embedded-png.svg", "ref/resvg/structure/image/embedded-png.png", "diff/resvg/structure/image/embedded-png.png", false), 0)}
#[ignore] #[test] fn resvg_structure_image_recursive_2() {assert_eq!(run_test("svg/resvg/structure/image/recursive-2.svg", "ref/resvg/structure/image/recursive-2.png", "diff/resvg/structure/image/recursive-2.png", false), 0)}
#[ignore] #[test] fn resvg_structure_image_no_width() {assert_eq!(run_test("svg/resvg/structure/image/no-width.svg", "ref/resvg/structure/image/no-width.png", "diff/resvg/structure/image/no-width.png", false), 0)}
#[test] fn resvg_structure_image_embedded_jpeg_as_image_jpg() {assert_eq!(run_test("svg/resvg/structure/image/embedded-jpeg-as-image-jpg.svg", "ref/resvg/structure/image/embedded-jpeg-as-image-jpg.png", "diff/resvg/structure/image/embedded-jpeg-as-image-jpg.png", false), 0)}
#[test] fn resvg_structure_image_preserveAspectRatio_xMidYMid_slice() {assert_eq!(run_test("svg/resvg/structure/image/preserveAspectRatio=xMidYMid-slice.svg", "ref/resvg/structure/image/preserveAspectRatio=xMidYMid-slice.png", "diff/resvg/structure/image/preserveAspectRatio=xMidYMid-slice.png", false), 0)}
#[ignore] #[test] fn resvg_structure_image_recursive_1() {assert_eq!(run_test("svg/resvg/structure/image/recursive-1.svg", "ref/resvg/structure/image/recursive-1.png", "diff/resvg/structure/image/recursive-1.png", false), 0)}
#[test] fn resvg_structure_image_preserveAspectRatio_xMinYMin_slice() {assert_eq!(run_test("svg/resvg/structure/image/preserveAspectRatio=xMinYMin-slice.svg", "ref/resvg/structure/image/preserveAspectRatio=xMinYMin-slice.png", "diff/resvg/structure/image/preserveAspectRatio=xMinYMin-slice.png", false), 0)}
#[test] fn resvg_structure_image_preserveAspectRatio_none() {assert_eq!(run_test("svg/resvg/structure/image/preserveAspectRatio=none.svg", "ref/resvg/structure/image/preserveAspectRatio=none.png", "diff/resvg/structure/image/preserveAspectRatio=none.png", false), 0)}
#[test] fn resvg_structure_image_preserveAspectRatio_xMinYMin_meet_on_svg() {assert_eq!(run_test("svg/resvg/structure/image/preserveAspectRatio=xMinYMin-meet-on-svg.svg", "ref/resvg/structure/image/preserveAspectRatio=xMinYMin-meet-on-svg.png", "diff/resvg/structure/image/preserveAspectRatio=xMinYMin-meet-on-svg.png", false), 0)}
#[ignore] #[test] fn resvg_structure_image_external_svgz() {assert_eq!(run_test("svg/resvg/structure/image/external-svgz.svg", "ref/resvg/structure/image/external-svgz.png", "diff/resvg/structure/image/external-svgz.png", false), 0)}
#[ignore] #[test] fn resvg_structure_image_image_with_float_size_scaling() {assert_eq!(run_test("svg/resvg/structure/image/image-with-float-size-scaling.svg", "ref/resvg/structure/image/image-with-float-size-scaling.png", "diff/resvg/structure/image/image-with-float-size-scaling.png", false), 0)}
#[ignore] #[test] fn resvg_structure_image_no_height_on_svg() {assert_eq!(run_test("svg/resvg/structure/image/no-height-on-svg.svg", "ref/resvg/structure/image/no-height-on-svg.png", "diff/resvg/structure/image/no-height-on-svg.png", false), 0)}
#[ignore] #[test] fn resvg_structure_image_no_width_and_height() {assert_eq!(run_test("svg/resvg/structure/image/no-width-and-height.svg", "ref/resvg/structure/image/no-width-and-height.png", "diff/resvg/structure/image/no-width-and-height.png", false), 0)}
#[test] fn resvg_structure_image_with_zero_width_and_height() {assert_eq!(run_test("svg/resvg/structure/image/with-zero-width-and-height.svg", "ref/resvg/structure/image/with-zero-width-and-height.png", "diff/resvg/structure/image/with-zero-width-and-height.png", false), 0)}
#[test] fn resvg_structure_image_embedded_gif() {assert_eq!(run_test("svg/resvg/structure/image/embedded-gif.svg", "ref/resvg/structure/image/embedded-gif.png", "diff/resvg/structure/image/embedded-gif.png", false), 0)}
#[test] fn resvg_structure_image_embedded_jpeg_without_mime() {assert_eq!(run_test("svg/resvg/structure/image/embedded-jpeg-without-mime.svg", "ref/resvg/structure/image/embedded-jpeg-without-mime.png", "diff/resvg/structure/image/embedded-jpeg-without-mime.png", false), 0)}
#[test] fn resvg_structure_image_preserveAspectRatio_xMaxYMax_slice_on_svg() {assert_eq!(run_test("svg/resvg/structure/image/preserveAspectRatio=xMaxYMax-slice-on-svg.svg", "ref/resvg/structure/image/preserveAspectRatio=xMaxYMax-slice-on-svg.png", "diff/resvg/structure/image/preserveAspectRatio=xMaxYMax-slice-on-svg.png", false), 0)}
#[test] fn resvg_structure_image_with_transform() {assert_eq!(run_test("svg/resvg/structure/image/with-transform.svg", "ref/resvg/structure/image/with-transform.png", "diff/resvg/structure/image/with-transform.png", false), 0)}
#[ignore] #[test] fn resvg_structure_image_external_gif() {assert_eq!(run_test("svg/resvg/structure/image/external-gif.svg", "ref/resvg/structure/image/external-gif.png", "diff/resvg/structure/image/external-gif.png", false), 0)}
#[test] fn resvg_structure_use_xlink_to_an_invalid_element_1() {assert_eq!(run_test("svg/resvg/structure/use/xlink-to-an-invalid-element-1.svg", "ref/resvg/structure/use/xlink-to-an-invalid-element-1.png", "diff/resvg/structure/use/xlink-to-an-invalid-element-1.png", false), 0)}
#[test] fn resvg_structure_use_xlink_to_a_child_of_a_non_SVG_element() {assert_eq!(run_test("svg/resvg/structure/use/xlink-to-a-child-of-a-non-SVG-element.svg", "ref/resvg/structure/use/xlink-to-a-child-of-a-non-SVG-element.png", "diff/resvg/structure/use/xlink-to-a-child-of-a-non-SVG-element.png", false), 0)}
#[test] fn resvg_structure_use_xlink_to_an_external_file() {assert_eq!(run_test("svg/resvg/structure/use/xlink-to-an-external-file.svg", "ref/resvg/structure/use/xlink-to-an-external-file.png", "diff/resvg/structure/use/xlink-to-an-external-file.png", false), 0)}
#[test] fn resvg_structure_use_xlink_to_an_invalid_element_2() {assert_eq!(run_test("svg/resvg/structure/use/xlink-to-an-invalid-element-2.svg", "ref/resvg/structure/use/xlink-to-an-invalid-element-2.png", "diff/resvg/structure/use/xlink-to-an-invalid-element-2.png", false), 0)}
#[test] fn resvg_structure_use_transform_inheritance() {assert_eq!(run_test("svg/resvg/structure/use/transform-inheritance.svg", "ref/resvg/structure/use/transform-inheritance.png", "diff/resvg/structure/use/transform-inheritance.png", false), 0)}
#[test] fn resvg_structure_use_complex_style_resolving_order() {assert_eq!(run_test("svg/resvg/structure/use/complex-style-resolving-order.svg", "ref/resvg/structure/use/complex-style-resolving-order.png", "diff/resvg/structure/use/complex-style-resolving-order.png", false), 0)}
#[test] fn resvg_structure_use_xlink_to_an_invalid_element_3() {assert_eq!(run_test("svg/resvg/structure/use/xlink-to-an-invalid-element-3.svg", "ref/resvg/structure/use/xlink-to-an-invalid-element-3.png", "diff/resvg/structure/use/xlink-to-an-invalid-element-3.png", false), 0)}
#[test] fn resvg_structure_use_fill_opacity_inheritance() {assert_eq!(run_test("svg/resvg/structure/use/fill-opacity-inheritance.svg", "ref/resvg/structure/use/fill-opacity-inheritance.png", "diff/resvg/structure/use/fill-opacity-inheritance.png", false), 0)}
#[test] fn resvg_structure_use_recursive() {assert_eq!(run_test("svg/resvg/structure/use/recursive.svg", "ref/resvg/structure/use/recursive.png", "diff/resvg/structure/use/recursive.png", false), 0)}
#[test] fn resvg_structure_use_nested_recursive_1() {assert_eq!(run_test("svg/resvg/structure/use/nested-recursive-1.svg", "ref/resvg/structure/use/nested-recursive-1.png", "diff/resvg/structure/use/nested-recursive-1.png", false), 0)}
#[test] fn resvg_structure_use_transform_attribute_1() {assert_eq!(run_test("svg/resvg/structure/use/transform-attribute-1.svg", "ref/resvg/structure/use/transform-attribute-1.png", "diff/resvg/structure/use/transform-attribute-1.png", false), 0)}
#[test] fn resvg_structure_use_nested_recursive_2() {assert_eq!(run_test("svg/resvg/structure/use/nested-recursive-2.svg", "ref/resvg/structure/use/nested-recursive-2.png", "diff/resvg/structure/use/nested-recursive-2.png", false), 0)}
#[test] fn resvg_structure_use_from_defs() {assert_eq!(run_test("svg/resvg/structure/use/from-defs.svg", "ref/resvg/structure/use/from-defs.png", "diff/resvg/structure/use/from-defs.png", false), 0)}
#[test] fn resvg_structure_use_transform_attribute_2() {assert_eq!(run_test("svg/resvg/structure/use/transform-attribute-2.svg", "ref/resvg/structure/use/transform-attribute-2.png", "diff/resvg/structure/use/transform-attribute-2.png", false), 0)}
#[test] fn resvg_structure_use_style_inheritance_1() {assert_eq!(run_test("svg/resvg/structure/use/style-inheritance-1.svg", "ref/resvg/structure/use/style-inheritance-1.png", "diff/resvg/structure/use/style-inheritance-1.png", false), 0)}
#[test] fn resvg_structure_use_xlink_to_svg_element_with_rect_only_width() {assert_eq!(run_test("svg/resvg/structure/use/xlink-to-svg-element-with-rect-only-width.svg", "ref/resvg/structure/use/xlink-to-svg-element-with-rect-only-width.png", "diff/resvg/structure/use/xlink-to-svg-element-with-rect-only-width.png", false), 0)}
#[test] fn resvg_structure_use_with_size() {assert_eq!(run_test("svg/resvg/structure/use/with-size.svg", "ref/resvg/structure/use/with-size.png", "diff/resvg/structure/use/with-size.png", false), 0)}
#[test] fn resvg_structure_use_display_inheritance() {assert_eq!(run_test("svg/resvg/structure/use/display-inheritance.svg", "ref/resvg/structure/use/display-inheritance.png", "diff/resvg/structure/use/display-inheritance.png", false), 0)}
#[test] fn resvg_structure_use_duplicated_IDs() {assert_eq!(run_test("svg/resvg/structure/use/duplicated-IDs.svg", "ref/resvg/structure/use/duplicated-IDs.png", "diff/resvg/structure/use/duplicated-IDs.png", false), 0)}
#[test] fn resvg_structure_use_style_inheritance_2() {assert_eq!(run_test("svg/resvg/structure/use/style-inheritance-2.svg", "ref/resvg/structure/use/style-inheritance-2.png", "diff/resvg/structure/use/style-inheritance-2.png", false), 0)}
#[test] fn resvg_structure_use_cSS_rules() {assert_eq!(run_test("svg/resvg/structure/use/cSS-rules.svg", "ref/resvg/structure/use/cSS-rules.png", "diff/resvg/structure/use/cSS-rules.png", false), 0)}
#[test] fn resvg_structure_use_simple_case() {assert_eq!(run_test("svg/resvg/structure/use/simple-case.svg", "ref/resvg/structure/use/simple-case.png", "diff/resvg/structure/use/simple-case.png", false), 0)}
#[test] fn resvg_structure_use_stroke_opacity_inheritance() {assert_eq!(run_test("svg/resvg/structure/use/stroke-opacity-inheritance.svg", "ref/resvg/structure/use/stroke-opacity-inheritance.png", "diff/resvg/structure/use/stroke-opacity-inheritance.png", false), 0)}
#[test] fn resvg_structure_use_style_inheritance_3() {assert_eq!(run_test("svg/resvg/structure/use/style-inheritance-3.svg", "ref/resvg/structure/use/style-inheritance-3.png", "diff/resvg/structure/use/style-inheritance-3.png", false), 0)}
#[test] fn resvg_structure_use_href_without_the_xlink_namespace() {assert_eq!(run_test("svg/resvg/structure/use/href-without-the-xlink-namespace.svg", "ref/resvg/structure/use/href-without-the-xlink-namespace.png", "diff/resvg/structure/use/href-without-the-xlink-namespace.png", false), 0)}
#[test] fn resvg_structure_use_xlink_to_svg_element_with_rect() {assert_eq!(run_test("svg/resvg/structure/use/xlink-to-svg-element-with-rect.svg", "ref/resvg/structure/use/xlink-to-svg-element-with-rect.png", "diff/resvg/structure/use/xlink-to-svg-element-with-rect.png", false), 0)}
#[test] fn resvg_structure_use_indirect_recursive_1() {assert_eq!(run_test("svg/resvg/structure/use/indirect-recursive-1.svg", "ref/resvg/structure/use/indirect-recursive-1.png", "diff/resvg/structure/use/indirect-recursive-1.png", false), 0)}
#[test] fn resvg_structure_use_xlink_to_svg_element_with_x_y_on_use() {assert_eq!(run_test("svg/resvg/structure/use/xlink-to-svg-element-with-x-y-on-use.svg", "ref/resvg/structure/use/xlink-to-svg-element-with-x-y-on-use.png", "diff/resvg/structure/use/xlink-to-svg-element-with-x-y-on-use.png", false), 0)}
#[test] fn resvg_structure_use_indirect_recursive_2() {assert_eq!(run_test("svg/resvg/structure/use/indirect-recursive-2.svg", "ref/resvg/structure/use/indirect-recursive-2.png", "diff/resvg/structure/use/indirect-recursive-2.png", false), 0)}
#[test] fn resvg_structure_use_indirect_recursive_3() {assert_eq!(run_test("svg/resvg/structure/use/indirect-recursive-3.svg", "ref/resvg/structure/use/indirect-recursive-3.png", "diff/resvg/structure/use/indirect-recursive-3.png", false), 0)}
#[test] fn resvg_structure_use_with_currentColor() {assert_eq!(run_test("svg/resvg/structure/use/with-currentColor.svg", "ref/resvg/structure/use/with-currentColor.png", "diff/resvg/structure/use/with-currentColor.png", false), 0)}
#[test] fn resvg_structure_use_opacity_inheritance() {assert_eq!(run_test("svg/resvg/structure/use/opacity-inheritance.svg", "ref/resvg/structure/use/opacity-inheritance.png", "diff/resvg/structure/use/opacity-inheritance.png", false), 0)}
#[test] fn resvg_structure_use_indirect() {assert_eq!(run_test("svg/resvg/structure/use/indirect.svg", "ref/resvg/structure/use/indirect.png", "diff/resvg/structure/use/indirect.png", false), 0)}
#[test] fn resvg_structure_use_xlink_to_a_child_of_an_invalid_element() {assert_eq!(run_test("svg/resvg/structure/use/xlink-to-a-child-of-an-invalid-element.svg", "ref/resvg/structure/use/xlink-to-a-child-of-an-invalid-element.png", "diff/resvg/structure/use/xlink-to-a-child-of-an-invalid-element.png", false), 0)}
#[test] fn resvg_structure_use_non_linear_order() {assert_eq!(run_test("svg/resvg/structure/use/non-linear-order.svg", "ref/resvg/structure/use/non-linear-order.png", "diff/resvg/structure/use/non-linear-order.png", false), 0)}
#[test] fn resvg_structure_use_xlink_to_svg_element_with_width_height_on_use() {assert_eq!(run_test("svg/resvg/structure/use/xlink-to-svg-element-with-width-height-on-use.svg", "ref/resvg/structure/use/xlink-to-svg-element-with-width-height-on-use.png", "diff/resvg/structure/use/xlink-to-svg-element-with-width-height-on-use.png", false), 0)}
#[test] fn resvg_structure_use_xlink_to_svg_element_with_viewBox() {assert_eq!(run_test("svg/resvg/structure/use/xlink-to-svg-element-with-viewBox.svg", "ref/resvg/structure/use/xlink-to-svg-element-with-viewBox.png", "diff/resvg/structure/use/xlink-to-svg-element-with-viewBox.png", false), 0)}
#[test] fn resvg_structure_use_nested_xlink_to_svg_element_with_rect_and_size() {assert_eq!(run_test("svg/resvg/structure/use/nested-xlink-to-svg-element-with-rect-and-size.svg", "ref/resvg/structure/use/nested-xlink-to-svg-element-with-rect-and-size.png", "diff/resvg/structure/use/nested-xlink-to-svg-element-with-rect-and-size.png", false), 0)}
#[test] fn resvg_structure_use_self_recursive() {assert_eq!(run_test("svg/resvg/structure/use/self-recursive.svg", "ref/resvg/structure/use/self-recursive.png", "diff/resvg/structure/use/self-recursive.png", false), 0)}
#[test] fn resvg_structure_use_xlink_to_svg_element() {assert_eq!(run_test("svg/resvg/structure/use/xlink-to-svg-element.svg", "ref/resvg/structure/use/xlink-to-svg-element.png", "diff/resvg/structure/use/xlink-to-svg-element.png", false), 0)}
#[test] fn resvg_structure_use_position_inheritance() {assert_eq!(run_test("svg/resvg/structure/use/position-inheritance.svg", "ref/resvg/structure/use/position-inheritance.png", "diff/resvg/structure/use/position-inheritance.png", false), 0)}
#[test] fn resvg_structure_switch_systemLanguage_en_US() {assert_eq!(run_test("svg/resvg/structure/switch/systemLanguage=en-US.svg", "ref/resvg/structure/switch/systemLanguage=en-US.png", "diff/resvg/structure/switch/systemLanguage=en-US.png", false), 0)}
#[test] fn resvg_structure_switch_requiredFeatures() {assert_eq!(run_test("svg/resvg/structure/switch/requiredFeatures.svg", "ref/resvg/structure/switch/requiredFeatures.png", "diff/resvg/structure/switch/requiredFeatures.png", false), 0)}
#[test] fn resvg_structure_switch_comment_as_first_child() {assert_eq!(run_test("svg/resvg/structure/switch/comment-as-first-child.svg", "ref/resvg/structure/switch/comment-as-first-child.png", "diff/resvg/structure/switch/comment-as-first-child.png", false), 0)}
#[test] fn resvg_structure_switch_display_none_on_child() {assert_eq!(run_test("svg/resvg/structure/switch/display-none-on-child.svg", "ref/resvg/structure/switch/display-none-on-child.png", "diff/resvg/structure/switch/display-none-on-child.png", false), 0)}
#[test] fn resvg_structure_switch_systemLanguage_en_GB() {assert_eq!(run_test("svg/resvg/structure/switch/systemLanguage=en-GB.svg", "ref/resvg/structure/switch/systemLanguage=en-GB.png", "diff/resvg/structure/switch/systemLanguage=en-GB.png", false), 0)}
#[test] fn resvg_structure_switch_non_SVG_child() {assert_eq!(run_test("svg/resvg/structure/switch/non-SVG-child.svg", "ref/resvg/structure/switch/non-SVG-child.png", "diff/resvg/structure/switch/non-SVG-child.png", false), 0)}
#[test] fn resvg_structure_switch_single_child() {assert_eq!(run_test("svg/resvg/structure/switch/single-child.svg", "ref/resvg/structure/switch/single-child.png", "diff/resvg/structure/switch/single-child.png", false), 0)}
#[test] fn resvg_structure_switch_systemLanguage_en() {assert_eq!(run_test("svg/resvg/structure/switch/systemLanguage=en.svg", "ref/resvg/structure/switch/systemLanguage=en.png", "diff/resvg/structure/switch/systemLanguage=en.png", false), 0)}
#[test] fn resvg_structure_switch_simple_case() {assert_eq!(run_test("svg/resvg/structure/switch/simple-case.svg", "ref/resvg/structure/switch/simple-case.png", "diff/resvg/structure/switch/simple-case.png", false), 0)}
#[test] fn resvg_structure_switch_systemLanguage() {assert_eq!(run_test("svg/resvg/structure/switch/systemLanguage.svg", "ref/resvg/structure/switch/systemLanguage.png", "diff/resvg/structure/switch/systemLanguage.png", false), 0)}
#[test] fn resvg_structure_switch_systemLanguage_ru_Ru() {assert_eq!(run_test("svg/resvg/structure/switch/systemLanguage=ru-Ru.svg", "ref/resvg/structure/switch/systemLanguage=ru-Ru.png", "diff/resvg/structure/switch/systemLanguage=ru-Ru.png", false), 0)}
#[test] fn resvg_structure_switch_systemLanguage_ru_en() {assert_eq!(run_test("svg/resvg/structure/switch/systemLanguage=ru-en.svg", "ref/resvg/structure/switch/systemLanguage=ru-en.png", "diff/resvg/structure/switch/systemLanguage=ru-en.png", false), 0)}
#[test] fn resvg_structure_switch_with_attributes() {assert_eq!(run_test("svg/resvg/structure/switch/with-attributes.svg", "ref/resvg/structure/switch/with-attributes.png", "diff/resvg/structure/switch/with-attributes.png", false), 0)}
#[test] fn resvg_structure_style_attribute_non_presentational_attribute() {assert_eq!(run_test("svg/resvg/structure/style-attribute/non-presentational-attribute.svg", "ref/resvg/structure/style-attribute/non-presentational-attribute.png", "diff/resvg/structure/style-attribute/non-presentational-attribute.png", false), 0)}
#[test] fn resvg_structure_style_attribute_comments() {assert_eq!(run_test("svg/resvg/structure/style-attribute/comments.svg", "ref/resvg/structure/style-attribute/comments.png", "diff/resvg/structure/style-attribute/comments.png", false), 0)}
#[test] fn resvg_structure_style_attribute_transform() {assert_eq!(run_test("svg/resvg/structure/style-attribute/transform.svg", "ref/resvg/structure/style-attribute/transform.png", "diff/resvg/structure/style-attribute/transform.png", false), 0)}
#[test] fn resvg_structure_style_attribute_simple_case() {assert_eq!(run_test("svg/resvg/structure/style-attribute/simple-case.svg", "ref/resvg/structure/style-attribute/simple-case.png", "diff/resvg/structure/style-attribute/simple-case.png", false), 0)}
#[test] fn resvg_structure_transform_origin_no_transform() {assert_eq!(run_test("svg/resvg/structure/transform-origin/no-transform.svg", "ref/resvg/structure/transform-origin/no-transform.png", "diff/resvg/structure/transform-origin/no-transform.png", false), 0)}
#[test] fn resvg_structure_transform_origin_on_gradient_user_space_on_use() {assert_eq!(run_test("svg/resvg/structure/transform-origin/on-gradient-user-space-on-use.svg", "ref/resvg/structure/transform-origin/on-gradient-user-space-on-use.png", "diff/resvg/structure/transform-origin/on-gradient-user-space-on-use.png", false), 0)}
#[test] fn resvg_structure_transform_origin_on_text() {assert_eq!(run_test("svg/resvg/structure/transform-origin/on-text.svg", "ref/resvg/structure/transform-origin/on-text.png", "diff/resvg/structure/transform-origin/on-text.png", false), 0)}
#[test] fn resvg_structure_transform_origin_length_px() {assert_eq!(run_test("svg/resvg/structure/transform-origin/length-px.svg", "ref/resvg/structure/transform-origin/length-px.png", "diff/resvg/structure/transform-origin/length-px.png", false), 0)}
#[test] fn resvg_structure_transform_origin_bottom() {assert_eq!(run_test("svg/resvg/structure/transform-origin/bottom.svg", "ref/resvg/structure/transform-origin/bottom.png", "diff/resvg/structure/transform-origin/bottom.png", false), 0)}
#[test] fn resvg_structure_transform_origin_on_shape() {assert_eq!(run_test("svg/resvg/structure/transform-origin/on-shape.svg", "ref/resvg/structure/transform-origin/on-shape.png", "diff/resvg/structure/transform-origin/on-shape.png", false), 0)}
#[test] fn resvg_structure_transform_origin_keyword_length() {assert_eq!(run_test("svg/resvg/structure/transform-origin/keyword-length.svg", "ref/resvg/structure/transform-origin/keyword-length.png", "diff/resvg/structure/transform-origin/keyword-length.png", false), 0)}
#[test] fn resvg_structure_transform_origin_on_clippath() {assert_eq!(run_test("svg/resvg/structure/transform-origin/on-clippath.svg", "ref/resvg/structure/transform-origin/on-clippath.png", "diff/resvg/structure/transform-origin/on-clippath.png", false), 0)}
#[test] fn resvg_structure_transform_origin_right_bottom() {assert_eq!(run_test("svg/resvg/structure/transform-origin/right-bottom.svg", "ref/resvg/structure/transform-origin/right-bottom.png", "diff/resvg/structure/transform-origin/right-bottom.png", false), 0)}
#[test] fn resvg_structure_transform_origin_transform_on_parent() {assert_eq!(run_test("svg/resvg/structure/transform-origin/transform-on-parent.svg", "ref/resvg/structure/transform-origin/transform-on-parent.png", "diff/resvg/structure/transform-origin/transform-on-parent.png", false), 0)}
#[test] fn resvg_structure_transform_origin_on_clippath_objectBoundingBox() {assert_eq!(run_test("svg/resvg/structure/transform-origin/on-clippath-objectBoundingBox.svg", "ref/resvg/structure/transform-origin/on-clippath-objectBoundingBox.png", "diff/resvg/structure/transform-origin/on-clippath-objectBoundingBox.png", false), 0)}
#[test] fn resvg_structure_transform_origin_on_group() {assert_eq!(run_test("svg/resvg/structure/transform-origin/on-group.svg", "ref/resvg/structure/transform-origin/on-group.png", "diff/resvg/structure/transform-origin/on-group.png", false), 0)}
#[test] fn resvg_structure_transform_origin_right() {assert_eq!(run_test("svg/resvg/structure/transform-origin/right.svg", "ref/resvg/structure/transform-origin/right.png", "diff/resvg/structure/transform-origin/right.png", false), 0)}
#[test] fn resvg_structure_transform_origin_on_image() {assert_eq!(run_test("svg/resvg/structure/transform-origin/on-image.svg", "ref/resvg/structure/transform-origin/on-image.png", "diff/resvg/structure/transform-origin/on-image.png", false), 0)}
#[test] fn resvg_structure_transform_origin_on_pattern_object_bounding_box() {assert_eq!(run_test("svg/resvg/structure/transform-origin/on-pattern-object-bounding-box.svg", "ref/resvg/structure/transform-origin/on-pattern-object-bounding-box.png", "diff/resvg/structure/transform-origin/on-pattern-object-bounding-box.png", false), 0)}
#[test] fn resvg_structure_transform_origin_length_percent() {assert_eq!(run_test("svg/resvg/structure/transform-origin/length-percent.svg", "ref/resvg/structure/transform-origin/length-percent.png", "diff/resvg/structure/transform-origin/length-percent.png", false), 0)}
#[test] fn resvg_structure_transform_origin_on_text_path() {assert_eq!(run_test("svg/resvg/structure/transform-origin/on-text-path.svg", "ref/resvg/structure/transform-origin/on-text-path.png", "diff/resvg/structure/transform-origin/on-text-path.png", false), 0)}
#[test] fn resvg_structure_transform_origin_on_pattern_user_space_on_use() {assert_eq!(run_test("svg/resvg/structure/transform-origin/on-pattern-user-space-on-use.svg", "ref/resvg/structure/transform-origin/on-pattern-user-space-on-use.png", "diff/resvg/structure/transform-origin/on-pattern-user-space-on-use.png", false), 0)}
#[test] fn resvg_structure_transform_origin_on_gradient_object_bounding_box() {assert_eq!(run_test("svg/resvg/structure/transform-origin/on-gradient-object-bounding-box.svg", "ref/resvg/structure/transform-origin/on-gradient-object-bounding-box.png", "diff/resvg/structure/transform-origin/on-gradient-object-bounding-box.png", false), 0)}
#[test] fn resvg_structure_transform_origin_center() {assert_eq!(run_test("svg/resvg/structure/transform-origin/center.svg", "ref/resvg/structure/transform-origin/center.png", "diff/resvg/structure/transform-origin/center.png", false), 0)}
#[test] fn resvg_structure_transform_origin_top() {assert_eq!(run_test("svg/resvg/structure/transform-origin/top.svg", "ref/resvg/structure/transform-origin/top.png", "diff/resvg/structure/transform-origin/top.png", false), 0)}
#[test] fn resvg_structure_transform_origin_top_left() {assert_eq!(run_test("svg/resvg/structure/transform-origin/top-left.svg", "ref/resvg/structure/transform-origin/top-left.png", "diff/resvg/structure/transform-origin/top-left.png", false), 0)}
#[test] fn resvg_structure_transform_origin_left() {assert_eq!(run_test("svg/resvg/structure/transform-origin/left.svg", "ref/resvg/structure/transform-origin/left.png", "diff/resvg/structure/transform-origin/left.png", false), 0)}
#[test] fn resvg_structure_transform_rotate_at_position() {assert_eq!(run_test("svg/resvg/structure/transform/rotate-at-position.svg", "ref/resvg/structure/transform/rotate-at-position.png", "diff/resvg/structure/transform/rotate-at-position.png", false), 0)}
#[test] fn resvg_structure_transform_matrix() {assert_eq!(run_test("svg/resvg/structure/transform/matrix.svg", "ref/resvg/structure/transform/matrix.png", "diff/resvg/structure/transform/matrix.png", false), 0)}
#[test] fn resvg_structure_transform_translate() {assert_eq!(run_test("svg/resvg/structure/transform/translate.svg", "ref/resvg/structure/transform/translate.png", "diff/resvg/structure/transform/translate.png", false), 0)}
#[test] fn resvg_structure_transform_extra_spaces() {assert_eq!(run_test("svg/resvg/structure/transform/extra-spaces.svg", "ref/resvg/structure/transform/extra-spaces.png", "diff/resvg/structure/transform/extra-spaces.png", false), 0)}
#[test] fn resvg_structure_transform_matrix_no_commas() {assert_eq!(run_test("svg/resvg/structure/transform/matrix-no-commas.svg", "ref/resvg/structure/transform/matrix-no-commas.png", "diff/resvg/structure/transform/matrix-no-commas.png", false), 0)}
#[test] fn resvg_structure_transform_skewY() {assert_eq!(run_test("svg/resvg/structure/transform/skewY.svg", "ref/resvg/structure/transform/skewY.png", "diff/resvg/structure/transform/skewY.png", false), 0)}
#[test] fn resvg_structure_transform_rotate() {assert_eq!(run_test("svg/resvg/structure/transform/rotate.svg", "ref/resvg/structure/transform/rotate.png", "diff/resvg/structure/transform/rotate.png", false), 0)}
#[test] fn resvg_structure_transform_skewX() {assert_eq!(run_test("svg/resvg/structure/transform/skewX.svg", "ref/resvg/structure/transform/skewX.png", "diff/resvg/structure/transform/skewX.png", false), 0)}
#[test] fn resvg_structure_transform_zeroed_matrix() {assert_eq!(run_test("svg/resvg/structure/transform/zeroed-matrix.svg", "ref/resvg/structure/transform/zeroed-matrix.png", "diff/resvg/structure/transform/zeroed-matrix.png", false), 0)}
#[test] fn resvg_structure_transform_empty() {assert_eq!(run_test("svg/resvg/structure/transform/empty.svg", "ref/resvg/structure/transform/empty.png", "diff/resvg/structure/transform/empty.png", false), 0)}
#[test] fn resvg_structure_transform_scale_without_Y() {assert_eq!(run_test("svg/resvg/structure/transform/scale-without-Y.svg", "ref/resvg/structure/transform/scale-without-Y.png", "diff/resvg/structure/transform/scale-without-Y.png", false), 0)}
#[test] fn resvg_structure_transform_numeric_character_references() {assert_eq!(run_test("svg/resvg/structure/transform/numeric-character-references.svg", "ref/resvg/structure/transform/numeric-character-references.png", "diff/resvg/structure/transform/numeric-character-references.png", false), 0)}
#[test] fn resvg_structure_transform_transform_list() {assert_eq!(run_test("svg/resvg/structure/transform/transform-list.svg", "ref/resvg/structure/transform/transform-list.png", "diff/resvg/structure/transform/transform-list.png", false), 0)}
#[test] fn resvg_structure_transform_nested_transforms_2() {assert_eq!(run_test("svg/resvg/structure/transform/nested-transforms-2.svg", "ref/resvg/structure/transform/nested-transforms-2.png", "diff/resvg/structure/transform/nested-transforms-2.png", false), 0)}
#[test] fn resvg_structure_transform_scale() {assert_eq!(run_test("svg/resvg/structure/transform/scale.svg", "ref/resvg/structure/transform/scale.png", "diff/resvg/structure/transform/scale.png", false), 0)}
#[test] fn resvg_structure_transform_nested_transforms_1() {assert_eq!(run_test("svg/resvg/structure/transform/nested-transforms-1.svg", "ref/resvg/structure/transform/nested-transforms-1.png", "diff/resvg/structure/transform/nested-transforms-1.png", false), 0)}
#[test] fn resvg_structure_transform_default() {assert_eq!(run_test("svg/resvg/structure/transform/default.svg", "ref/resvg/structure/transform/default.png", "diff/resvg/structure/transform/default.png", false), 0)}
#[test] fn resvg_structure_transform_translate_without_Y() {assert_eq!(run_test("svg/resvg/structure/transform/translate-without-Y.svg", "ref/resvg/structure/transform/translate-without-Y.png", "diff/resvg/structure/transform/translate-without-Y.png", false), 0)}
#[test] fn resvg_structure_transform_direct_transform() {assert_eq!(run_test("svg/resvg/structure/transform/direct-transform.svg", "ref/resvg/structure/transform/direct-transform.png", "diff/resvg/structure/transform/direct-transform.png", false), 0)}
#[test] fn resvg_structure_defs_style_inheritance() {assert_eq!(run_test("svg/resvg/structure/defs/style-inheritance.svg", "ref/resvg/structure/defs/style-inheritance.png", "diff/resvg/structure/defs/style-inheritance.png", false), 0)}
#[test] fn resvg_structure_defs_out_of_order() {assert_eq!(run_test("svg/resvg/structure/defs/out-of-order.svg", "ref/resvg/structure/defs/out-of-order.png", "diff/resvg/structure/defs/out-of-order.png", false), 0)}
#[test] fn resvg_structure_defs_simple_case() {assert_eq!(run_test("svg/resvg/structure/defs/simple-case.svg", "ref/resvg/structure/defs/simple-case.png", "diff/resvg/structure/defs/simple-case.png", false), 0)}
#[test] fn resvg_structure_defs_ignore_shapes_inside_defs() {assert_eq!(run_test("svg/resvg/structure/defs/ignore-shapes-inside-defs.svg", "ref/resvg/structure/defs/ignore-shapes-inside-defs.png", "diff/resvg/structure/defs/ignore-shapes-inside-defs.png", false), 0)}
#[test] fn resvg_structure_defs_style_inheritance_on_text() {assert_eq!(run_test("svg/resvg/structure/defs/style-inheritance-on-text.svg", "ref/resvg/structure/defs/style-inheritance-on-text.png", "diff/resvg/structure/defs/style-inheritance-on-text.png", false), 0)}
#[test] fn resvg_structure_defs_multiple_defs() {assert_eq!(run_test("svg/resvg/structure/defs/multiple-defs.svg", "ref/resvg/structure/defs/multiple-defs.png", "diff/resvg/structure/defs/multiple-defs.png", false), 0)}
#[test] fn resvg_structure_defs_nested_defs() {assert_eq!(run_test("svg/resvg/structure/defs/nested-defs.svg", "ref/resvg/structure/defs/nested-defs.png", "diff/resvg/structure/defs/nested-defs.png", false), 0)}
#[test] fn resvg_masking_clip_rule_clip_rule_evenodd() {assert_eq!(run_test("svg/resvg/masking/clip-rule/clip-rule=evenodd.svg", "ref/resvg/masking/clip-rule/clip-rule=evenodd.png", "diff/resvg/masking/clip-rule/clip-rule=evenodd.png", false), 0)}
#[ignore] #[test] fn resvg_masking_clip_simple_case() {assert_eq!(run_test("svg/resvg/masking/clip/simple-case.svg", "ref/resvg/masking/clip/simple-case.png", "diff/resvg/masking/clip/simple-case.png", false), 0)}
#[test] fn resvg_masking_clipPath_with_marker_on_clip() {assert_eq!(run_test("svg/resvg/masking/clipPath/with-marker-on-clip.svg", "ref/resvg/masking/clipPath/with-marker-on-clip.png", "diff/resvg/masking/clipPath/with-marker-on-clip.png", false), 0)}
#[test] fn resvg_masking_clipPath_mixed_clip_rule() {assert_eq!(run_test("svg/resvg/masking/clipPath/mixed-clip-rule.svg", "ref/resvg/masking/clipPath/mixed-clip-rule.png", "diff/resvg/masking/clipPath/mixed-clip-rule.png", false), 0)}
#[ignore] #[test] fn resvg_masking_clipPath_circle_shorthand() {assert_eq!(run_test("svg/resvg/masking/clipPath/circle-shorthand.svg", "ref/resvg/masking/clipPath/circle-shorthand.png", "diff/resvg/masking/clipPath/circle-shorthand.png", false), 0)}
#[test] fn resvg_masking_clipPath_clip_rule_evenodd() {assert_eq!(run_test("svg/resvg/masking/clipPath/clip-rule=evenodd.svg", "ref/resvg/masking/clipPath/clip-rule=evenodd.png", "diff/resvg/masking/clipPath/clip-rule=evenodd.png", false), 0)}
#[test] fn resvg_masking_clipPath_switch_is_not_a_valid_child() {assert_eq!(run_test("svg/resvg/masking/clipPath/switch-is-not-a-valid-child.svg", "ref/resvg/masking/clipPath/switch-is-not-a-valid-child.png", "diff/resvg/masking/clipPath/switch-is-not-a-valid-child.png", false), 0)}
#[test] fn resvg_masking_clipPath_g_is_not_a_valid_child() {assert_eq!(run_test("svg/resvg/masking/clipPath/g-is-not-a-valid-child.svg", "ref/resvg/masking/clipPath/g-is-not-a-valid-child.png", "diff/resvg/masking/clipPath/g-is-not-a-valid-child.png", false), 0)}
#[test] fn resvg_masking_clipPath_with_invalid_child_via_use() {assert_eq!(run_test("svg/resvg/masking/clipPath/with-invalid-child-via-use.svg", "ref/resvg/masking/clipPath/with-invalid-child-via-use.png", "diff/resvg/masking/clipPath/with-invalid-child-via-use.png", false), 0)}
#[test] fn resvg_masking_clipPath_recursive_on_child() {assert_eq!(run_test("svg/resvg/masking/clipPath/recursive-on-child.svg", "ref/resvg/masking/clipPath/recursive-on-child.png", "diff/resvg/masking/clipPath/recursive-on-child.png", false), 0)}
#[test] fn resvg_masking_clipPath_no_children() {assert_eq!(run_test("svg/resvg/masking/clipPath/no-children.svg", "ref/resvg/masking/clipPath/no-children.png", "diff/resvg/masking/clipPath/no-children.png", false), 0)}
#[test] fn resvg_masking_clipPath_invalid_transform_on_clipPath() {assert_eq!(run_test("svg/resvg/masking/clipPath/invalid-transform-on-clipPath.svg", "ref/resvg/masking/clipPath/invalid-transform-on-clipPath.png", "diff/resvg/masking/clipPath/invalid-transform-on-clipPath.png", false), 0)}
#[test] fn resvg_masking_clipPath_mask_has_no_effect() {assert_eq!(run_test("svg/resvg/masking/clipPath/mask-has-no-effect.svg", "ref/resvg/masking/clipPath/mask-has-no-effect.png", "diff/resvg/masking/clipPath/mask-has-no-effect.png", false), 0)}
#[test] fn resvg_masking_clipPath_fill_has_no_effect() {assert_eq!(run_test("svg/resvg/masking/clipPath/fill-has-no-effect.svg", "ref/resvg/masking/clipPath/fill-has-no-effect.png", "diff/resvg/masking/clipPath/fill-has-no-effect.png", false), 0)}
#[test] fn resvg_masking_clipPath_recursive() {assert_eq!(run_test("svg/resvg/masking/clipPath/recursive.svg", "ref/resvg/masking/clipPath/recursive.png", "diff/resvg/masking/clipPath/recursive.png", false), 0)}
#[test] fn resvg_masking_clipPath_clip_path_on_children() {assert_eq!(run_test("svg/resvg/masking/clipPath/clip-path-on-children.svg", "ref/resvg/masking/clipPath/clip-path-on-children.png", "diff/resvg/masking/clipPath/clip-path-on-children.png", false), 0)}
#[test] fn resvg_masking_clipPath_opacity_has_no_effect() {assert_eq!(run_test("svg/resvg/masking/clipPath/opacity-has-no-effect.svg", "ref/resvg/masking/clipPath/opacity-has-no-effect.png", "diff/resvg/masking/clipPath/opacity-has-no-effect.png", false), 0)}
#[test] fn resvg_masking_clipPath_invisible_child_2() {assert_eq!(run_test("svg/resvg/masking/clipPath/invisible-child-2.svg", "ref/resvg/masking/clipPath/invisible-child-2.png", "diff/resvg/masking/clipPath/invisible-child-2.png", false), 0)}
#[test] fn resvg_masking_clipPath_multiple_children() {assert_eq!(run_test("svg/resvg/masking/clipPath/multiple-children.svg", "ref/resvg/masking/clipPath/multiple-children.png", "diff/resvg/masking/clipPath/multiple-children.png", false), 0)}
#[ignore] #[test] fn resvg_masking_clipPath_on_the_root_svg_without_size() {assert_eq!(run_test("svg/resvg/masking/clipPath/on-the-root-svg-without-size.svg", "ref/resvg/masking/clipPath/on-the-root-svg-without-size.png", "diff/resvg/masking/clipPath/on-the-root-svg-without-size.png", false), 0)}
#[test] fn resvg_masking_clipPath_invisible_child_1() {assert_eq!(run_test("svg/resvg/masking/clipPath/invisible-child-1.svg", "ref/resvg/masking/clipPath/invisible-child-1.png", "diff/resvg/masking/clipPath/invisible-child-1.png", false), 0)}
#[test] fn resvg_masking_clipPath_transform_on_clipPath() {assert_eq!(run_test("svg/resvg/masking/clipPath/transform-on-clipPath.svg", "ref/resvg/masking/clipPath/transform-on-clipPath.png", "diff/resvg/masking/clipPath/transform-on-clipPath.png", false), 0)}
#[test] fn resvg_masking_clipPath_on_a_horizontal_line() {assert_eq!(run_test("svg/resvg/masking/clipPath/on-a-horizontal-line.svg", "ref/resvg/masking/clipPath/on-a-horizontal-line.png", "diff/resvg/masking/clipPath/on-a-horizontal-line.png", false), 0)}
#[test] fn resvg_masking_clipPath_invalid_clip_path_on_self() {assert_eq!(run_test("svg/resvg/masking/clipPath/invalid-clip-path-on-self.svg", "ref/resvg/masking/clipPath/invalid-clip-path-on-self.png", "diff/resvg/masking/clipPath/invalid-clip-path-on-self.png", false), 0)}
#[test] fn resvg_masking_clipPath_clip_path_on_child() {assert_eq!(run_test("svg/resvg/masking/clipPath/clip-path-on-child.svg", "ref/resvg/masking/clipPath/clip-path-on-child.png", "diff/resvg/masking/clipPath/clip-path-on-child.png", false), 0)}
#[ignore] #[test] fn resvg_masking_clipPath_circle_shorthand_with_view_box() {assert_eq!(run_test("svg/resvg/masking/clipPath/circle-shorthand-with-view-box.svg", "ref/resvg/masking/clipPath/circle-shorthand-with-view-box.png", "diff/resvg/masking/clipPath/circle-shorthand-with-view-box.png", false), 0)}
#[test] fn resvg_masking_clipPath_clipping_with_complex_text_and_clip_rule() {assert_eq!(run_test("svg/resvg/masking/clipPath/clipping-with-complex-text-and-clip-rule.svg", "ref/resvg/masking/clipPath/clipping-with-complex-text-and-clip-rule.png", "diff/resvg/masking/clipPath/clipping-with-complex-text-and-clip-rule.png", false), 0)}
#[test] fn resvg_masking_clipPath_simple_case() {assert_eq!(run_test("svg/resvg/masking/clipPath/simple-case.svg", "ref/resvg/masking/clipPath/simple-case.png", "diff/resvg/masking/clipPath/simple-case.png", false), 0)}
#[test] fn resvg_masking_clipPath_clipPathUnits_objectBoundingBox() {assert_eq!(run_test("svg/resvg/masking/clipPath/clipPathUnits=objectBoundingBox.svg", "ref/resvg/masking/clipPath/clipPathUnits=objectBoundingBox.png", "diff/resvg/masking/clipPath/clipPathUnits=objectBoundingBox.png", false), 0)}
#[test] fn resvg_masking_clipPath_with_use_child() {assert_eq!(run_test("svg/resvg/masking/clipPath/with-use-child.svg", "ref/resvg/masking/clipPath/with-use-child.png", "diff/resvg/masking/clipPath/with-use-child.png", false), 0)}
#[test] fn resvg_masking_clipPath_clipping_with_text() {assert_eq!(run_test("svg/resvg/masking/clipPath/clipping-with-text.svg", "ref/resvg/masking/clipPath/clipping-with-text.png", "diff/resvg/masking/clipPath/clipping-with-text.png", false), 0)}
#[test] fn resvg_masking_clipPath_clip_path_with_transform_on_text() {assert_eq!(run_test("svg/resvg/masking/clipPath/clip-path-with-transform-on-text.svg", "ref/resvg/masking/clipPath/clip-path-with-transform-on-text.png", "diff/resvg/masking/clipPath/clip-path-with-transform-on-text.png", false), 0)}
#[test] fn resvg_masking_clipPath_malformed_path_child() {assert_eq!(run_test("svg/resvg/masking/clipPath/malformed-path-child.svg", "ref/resvg/masking/clipPath/malformed-path-child.png", "diff/resvg/masking/clipPath/malformed-path-child.png", false), 0)}
#[test] fn resvg_masking_clipPath_line_is_not_a_valid_child() {assert_eq!(run_test("svg/resvg/masking/clipPath/line-is-not-a-valid-child.svg", "ref/resvg/masking/clipPath/line-is-not-a-valid-child.png", "diff/resvg/masking/clipPath/line-is-not-a-valid-child.png", false), 0)}
#[test] fn resvg_masking_clipPath_recursive_on_self() {assert_eq!(run_test("svg/resvg/masking/clipPath/recursive-on-self.svg", "ref/resvg/masking/clipPath/recursive-on-self.png", "diff/resvg/masking/clipPath/recursive-on-self.png", false), 0)}
#[test] fn resvg_masking_clipPath_none() {assert_eq!(run_test("svg/resvg/masking/clipPath/none.svg", "ref/resvg/masking/clipPath/none.png", "diff/resvg/masking/clipPath/none.png", false), 0)}
#[test] fn resvg_masking_clipPath_clip_path_on_self() {assert_eq!(run_test("svg/resvg/masking/clipPath/clip-path-on-self.svg", "ref/resvg/masking/clipPath/clip-path-on-self.png", "diff/resvg/masking/clipPath/clip-path-on-self.png", false), 0)}
#[test] fn resvg_masking_clipPath_overlapped_shapes_with_evenodd() {assert_eq!(run_test("svg/resvg/masking/clipPath/overlapped-shapes-with-evenodd.svg", "ref/resvg/masking/clipPath/overlapped-shapes-with-evenodd.png", "diff/resvg/masking/clipPath/overlapped-shapes-with-evenodd.png", false), 0)}
#[test] fn resvg_masking_clipPath_clipping_with_complex_text_2() {assert_eq!(run_test("svg/resvg/masking/clipPath/clipping-with-complex-text-2.svg", "ref/resvg/masking/clipPath/clipping-with-complex-text-2.png", "diff/resvg/masking/clipPath/clipping-with-complex-text-2.png", false), 0)}
#[ignore] #[test] fn resvg_masking_clipPath_circle_shorthand_with_stroke_box() {assert_eq!(run_test("svg/resvg/masking/clipPath/circle-shorthand-with-stroke-box.svg", "ref/resvg/masking/clipPath/circle-shorthand-with-stroke-box.png", "diff/resvg/masking/clipPath/circle-shorthand-with-stroke-box.png", false), 0)}
#[test] fn resvg_masking_clipPath_invalid_clip_path_on_child() {assert_eq!(run_test("svg/resvg/masking/clipPath/invalid-clip-path-on-child.svg", "ref/resvg/masking/clipPath/invalid-clip-path-on-child.png", "diff/resvg/masking/clipPath/invalid-clip-path-on-child.png", false), 0)}
#[test] fn resvg_masking_clipPath_symbol_via_use_is_not_a_valid_child() {assert_eq!(run_test("svg/resvg/masking/clipPath/symbol-via-use-is-not-a-valid-child.svg", "ref/resvg/masking/clipPath/symbol-via-use-is-not-a-valid-child.png", "diff/resvg/masking/clipPath/symbol-via-use-is-not-a-valid-child.png", false), 0)}
#[test] fn resvg_masking_clipPath_clip_rule_from_parent_node() {assert_eq!(run_test("svg/resvg/masking/clipPath/clip-rule-from-parent-node.svg", "ref/resvg/masking/clipPath/clip-rule-from-parent-node.png", "diff/resvg/masking/clipPath/clip-rule-from-parent-node.png", false), 0)}
#[test] fn resvg_masking_clipPath_clipping_with_complex_text_1() {assert_eq!(run_test("svg/resvg/masking/clipPath/clipping-with-complex-text-1.svg", "ref/resvg/masking/clipPath/clipping-with-complex-text-1.png", "diff/resvg/masking/clipPath/clipping-with-complex-text-1.png", false), 0)}
#[test] fn resvg_masking_clipPath_image_is_not_a_valid_child() {assert_eq!(run_test("svg/resvg/masking/clipPath/image-is-not-a-valid-child.svg", "ref/resvg/masking/clipPath/image-is-not-a-valid-child.png", "diff/resvg/masking/clipPath/image-is-not-a-valid-child.png", false), 0)}
#[test] fn resvg_masking_clipPath_filter_has_no_effect() {assert_eq!(run_test("svg/resvg/masking/clipPath/filter-has-no-effect.svg", "ref/resvg/masking/clipPath/filter-has-no-effect.png", "diff/resvg/masking/clipPath/filter-has-no-effect.png", false), 0)}
#[test] fn resvg_masking_clipPath_on_the_root_svg_with_size() {assert_eq!(run_test("svg/resvg/masking/clipPath/on-the-root-svg-with-size.svg", "ref/resvg/masking/clipPath/on-the-root-svg-with-size.png", "diff/resvg/masking/clipPath/on-the-root-svg-with-size.png", false), 0)}
#[test] fn resvg_masking_clipPath_invalid_FuncIRI() {assert_eq!(run_test("svg/resvg/masking/clipPath/invalid-FuncIRI.svg", "ref/resvg/masking/clipPath/invalid-FuncIRI.png", "diff/resvg/masking/clipPath/invalid-FuncIRI.png", false), 0)}
#[test] fn resvg_masking_clipPath_clip_path_with_transform() {assert_eq!(run_test("svg/resvg/masking/clipPath/clip-path-with-transform.svg", "ref/resvg/masking/clipPath/clip-path-with-transform.png", "diff/resvg/masking/clipPath/clip-path-with-transform.png", false), 0)}
#[test] fn resvg_masking_clipPath_self_recursive() {assert_eq!(run_test("svg/resvg/masking/clipPath/self-recursive.svg", "ref/resvg/masking/clipPath/self-recursive.png", "diff/resvg/masking/clipPath/self-recursive.png", false), 0)}
#[test] fn resvg_masking_clipPath_stroke_has_no_effect() {assert_eq!(run_test("svg/resvg/masking/clipPath/stroke-has-no-effect.svg", "ref/resvg/masking/clipPath/stroke-has-no-effect.png", "diff/resvg/masking/clipPath/stroke-has-no-effect.png", false), 0)}
#[test] fn resvg_masking_clipPath_nested_clip_path() {assert_eq!(run_test("svg/resvg/masking/clipPath/nested-clip-path.svg", "ref/resvg/masking/clipPath/nested-clip-path.png", "diff/resvg/masking/clipPath/nested-clip-path.png", false), 0)}
#[test] fn resvg_masking_clipPath_clip_path_on_child_with_transform() {assert_eq!(run_test("svg/resvg/masking/clipPath/clip-path-on-child-with-transform.svg", "ref/resvg/masking/clipPath/clip-path-on-child-with-transform.png", "diff/resvg/masking/clipPath/clip-path-on-child-with-transform.png", false), 0)}
#[test] fn resvg_masking_clipPath_clip_path_on_self_2() {assert_eq!(run_test("svg/resvg/masking/clipPath/clip-path-on-self-2.svg", "ref/resvg/masking/clipPath/clip-path-on-self-2.png", "diff/resvg/masking/clipPath/clip-path-on-self-2.png", false), 0)}
#[test] fn resvg_masking_mask_with_image() {assert_eq!(run_test("svg/resvg/masking/mask/with-image.svg", "ref/resvg/masking/mask/with-image.png", "diff/resvg/masking/mask/with-image.png", false), 0)}
#[test] fn resvg_masking_mask_maskUnits_userSpaceOnUse_without_rect() {assert_eq!(run_test("svg/resvg/masking/mask/maskUnits=userSpaceOnUse-without-rect.svg", "ref/resvg/masking/mask/maskUnits=userSpaceOnUse-without-rect.png", "diff/resvg/masking/mask/maskUnits=userSpaceOnUse-without-rect.png", false), 0)}
#[ignore] #[test] fn resvg_masking_mask_recursive_on_child() {assert_eq!(run_test("svg/resvg/masking/mask/recursive-on-child.svg", "ref/resvg/masking/mask/recursive-on-child.png", "diff/resvg/masking/mask/recursive-on-child.png", false), 0)}
#[test] fn resvg_masking_mask_maskUnits_userSpaceOnUse_with_rect() {assert_eq!(run_test("svg/resvg/masking/mask/maskUnits=userSpaceOnUse-with-rect.svg", "ref/resvg/masking/mask/maskUnits=userSpaceOnUse-with-rect.png", "diff/resvg/masking/mask/maskUnits=userSpaceOnUse-with-rect.png", false), 0)}
#[test] fn resvg_masking_mask_mask_on_child() {assert_eq!(run_test("svg/resvg/masking/mask/mask-on-child.svg", "ref/resvg/masking/mask/mask-on-child.png", "diff/resvg/masking/mask/mask-on-child.png", false), 0)}
#[test] fn resvg_masking_mask_no_children() {assert_eq!(run_test("svg/resvg/masking/mask/no-children.svg", "ref/resvg/masking/mask/no-children.png", "diff/resvg/masking/mask/no-children.png", false), 0)}
#[test] fn resvg_masking_mask_maskUnits_userSpaceOnUse_with_percent() {assert_eq!(run_test("svg/resvg/masking/mask/maskUnits=userSpaceOnUse-with-percent.svg", "ref/resvg/masking/mask/maskUnits=userSpaceOnUse-with-percent.png", "diff/resvg/masking/mask/maskUnits=userSpaceOnUse-with-percent.png", false), 0)}
#[test] fn resvg_masking_mask_recursive() {assert_eq!(run_test("svg/resvg/masking/mask/recursive.svg", "ref/resvg/masking/mask/recursive.png", "diff/resvg/masking/mask/recursive.png", false), 0)}
#[test] fn resvg_masking_mask_mask_type_invalid() {assert_eq!(run_test("svg/resvg/masking/mask/mask-type=invalid.svg", "ref/resvg/masking/mask/mask-type=invalid.png", "diff/resvg/masking/mask/mask-type=invalid.png", false), 0)}
#[test] fn resvg_masking_mask_with_opacity_1() {assert_eq!(run_test("svg/resvg/masking/mask/with-opacity-1.svg", "ref/resvg/masking/mask/with-opacity-1.png", "diff/resvg/masking/mask/with-opacity-1.png", false), 0)}
#[test] fn resvg_masking_mask_invisible_child_2() {assert_eq!(run_test("svg/resvg/masking/mask/invisible-child-2.svg", "ref/resvg/masking/mask/invisible-child-2.png", "diff/resvg/masking/mask/invisible-child-2.png", false), 0)}
#[test] fn resvg_masking_mask_on_group_with_transform() {assert_eq!(run_test("svg/resvg/masking/mask/on-group-with-transform.svg", "ref/resvg/masking/mask/on-group-with-transform.png", "diff/resvg/masking/mask/on-group-with-transform.png", false), 0)}
#[test] fn resvg_masking_mask_mask_type_alpha() {assert_eq!(run_test("svg/resvg/masking/mask/mask-type=alpha.svg", "ref/resvg/masking/mask/mask-type=alpha.png", "diff/resvg/masking/mask/mask-type=alpha.png", false), 0)}
#[test] fn resvg_masking_mask_with_opacity_2() {assert_eq!(run_test("svg/resvg/masking/mask/with-opacity-2.svg", "ref/resvg/masking/mask/with-opacity-2.png", "diff/resvg/masking/mask/with-opacity-2.png", false), 0)}
#[ignore] #[test] fn resvg_masking_mask_color_interpolation_linearRGB() {assert_eq!(run_test("svg/resvg/masking/mask/color-interpolation=linearRGB.svg", "ref/resvg/masking/mask/color-interpolation=linearRGB.png", "diff/resvg/masking/mask/color-interpolation=linearRGB.png", false), 0)}
#[test] fn resvg_masking_mask_with_opacity_3() {assert_eq!(run_test("svg/resvg/masking/mask/with-opacity-3.svg", "ref/resvg/masking/mask/with-opacity-3.png", "diff/resvg/masking/mask/with-opacity-3.png", false), 0)}
#[test] fn resvg_masking_mask_invisible_child_1() {assert_eq!(run_test("svg/resvg/masking/mask/invisible-child-1.svg", "ref/resvg/masking/mask/invisible-child-1.png", "diff/resvg/masking/mask/invisible-child-1.png", false), 0)}
#[test] fn resvg_masking_mask_transform_on_shape() {assert_eq!(run_test("svg/resvg/masking/mask/transform-on-shape.svg", "ref/resvg/masking/mask/transform-on-shape.png", "diff/resvg/masking/mask/transform-on-shape.png", false), 0)}
#[test] fn resvg_masking_mask_mask_on_self_with_mask_type_alpha() {assert_eq!(run_test("svg/resvg/masking/mask/mask-on-self-with-mask-type=alpha.svg", "ref/resvg/masking/mask/mask-on-self-with-mask-type=alpha.png", "diff/resvg/masking/mask/mask-on-self-with-mask-type=alpha.png", false), 0)}
#[test] fn resvg_masking_mask_half_width_region_with_rotation() {assert_eq!(run_test("svg/resvg/masking/mask/half-width-region-with-rotation.svg", "ref/resvg/masking/mask/half-width-region-with-rotation.png", "diff/resvg/masking/mask/half-width-region-with-rotation.png", false), 0)}
#[test] fn resvg_masking_mask_on_a_horizontal_line() {assert_eq!(run_test("svg/resvg/masking/mask/on-a-horizontal-line.svg", "ref/resvg/masking/mask/on-a-horizontal-line.png", "diff/resvg/masking/mask/on-a-horizontal-line.png", false), 0)}
#[test] fn resvg_masking_mask_nested_objectBoundingBox() {assert_eq!(run_test("svg/resvg/masking/mask/nested-objectBoundingBox.svg", "ref/resvg/masking/mask/nested-objectBoundingBox.png", "diff/resvg/masking/mask/nested-objectBoundingBox.png", false), 0)}
#[test] fn resvg_masking_mask_maskUnits_objectBoundingBox_with_percent() {assert_eq!(run_test("svg/resvg/masking/mask/maskUnits=objectBoundingBox-with-percent.svg", "ref/resvg/masking/mask/maskUnits=objectBoundingBox-with-percent.png", "diff/resvg/masking/mask/maskUnits=objectBoundingBox-with-percent.png", false), 0)}
#[test] fn resvg_masking_mask_simple_case() {assert_eq!(run_test("svg/resvg/masking/mask/simple-case.svg", "ref/resvg/masking/mask/simple-case.png", "diff/resvg/masking/mask/simple-case.png", false), 0)}
#[test] fn resvg_masking_mask_maskContentUnits_objectBoundingBox() {assert_eq!(run_test("svg/resvg/masking/mask/maskContentUnits=objectBoundingBox.svg", "ref/resvg/masking/mask/maskContentUnits=objectBoundingBox.png", "diff/resvg/masking/mask/maskContentUnits=objectBoundingBox.png", false), 0)}
#[test] fn resvg_masking_mask_mask_on_self_with_mixed_mask_type() {assert_eq!(run_test("svg/resvg/masking/mask/mask-on-self-with-mixed-mask-type.svg", "ref/resvg/masking/mask/mask-on-self-with-mixed-mask-type.png", "diff/resvg/masking/mask/mask-on-self-with-mixed-mask-type.png", false), 0)}
#[test] fn resvg_masking_mask_with_clip_path() {assert_eq!(run_test("svg/resvg/masking/mask/with-clip-path.svg", "ref/resvg/masking/mask/with-clip-path.png", "diff/resvg/masking/mask/with-clip-path.png", false), 0)}
#[test] fn resvg_masking_mask_recursive_on_self() {assert_eq!(run_test("svg/resvg/masking/mask/recursive-on-self.svg", "ref/resvg/masking/mask/recursive-on-self.png", "diff/resvg/masking/mask/recursive-on-self.png", false), 0)}
#[test] fn resvg_masking_mask_none() {assert_eq!(run_test("svg/resvg/masking/mask/none.svg", "ref/resvg/masking/mask/none.png", "diff/resvg/masking/mask/none.png", false), 0)}
#[test] fn resvg_masking_mask_on_a_small_object() {assert_eq!(run_test("svg/resvg/masking/mask/on-a-small-object.svg", "ref/resvg/masking/mask/on-a-small-object.png", "diff/resvg/masking/mask/on-a-small-object.png", false), 0)}
#[test] fn resvg_masking_mask_transform_has_no_effect() {assert_eq!(run_test("svg/resvg/masking/mask/transform-has-no-effect.svg", "ref/resvg/masking/mask/transform-has-no-effect.png", "diff/resvg/masking/mask/transform-has-no-effect.png", false), 0)}
#[ignore] #[test] fn resvg_masking_mask_mask_type_in_style() {assert_eq!(run_test("svg/resvg/masking/mask/mask-type-in-style.svg", "ref/resvg/masking/mask/mask-type-in-style.png", "diff/resvg/masking/mask/mask-type-in-style.png", false), 0)}
#[test] fn resvg_masking_mask_mask_type_luminance() {assert_eq!(run_test("svg/resvg/masking/mask/mask-type=luminance.svg", "ref/resvg/masking/mask/mask-type=luminance.png", "diff/resvg/masking/mask/mask-type=luminance.png", false), 0)}
#[test] fn resvg_masking_mask_with_grayscale_image() {assert_eq!(run_test("svg/resvg/masking/mask/with-grayscale-image.svg", "ref/resvg/masking/mask/with-grayscale-image.png", "diff/resvg/masking/mask/with-grayscale-image.png", false), 0)}
#[test] fn resvg_masking_mask_invalid_child() {assert_eq!(run_test("svg/resvg/masking/mask/invalid-child.svg", "ref/resvg/masking/mask/invalid-child.png", "diff/resvg/masking/mask/invalid-child.png", false), 0)}
#[test] fn resvg_masking_mask_invalid_FuncIRI() {assert_eq!(run_test("svg/resvg/masking/mask/invalid-FuncIRI.svg", "ref/resvg/masking/mask/invalid-FuncIRI.png", "diff/resvg/masking/mask/invalid-FuncIRI.png", false), 0)}
#[test] fn resvg_masking_mask_self_recursive() {assert_eq!(run_test("svg/resvg/masking/mask/self-recursive.svg", "ref/resvg/masking/mask/self-recursive.png", "diff/resvg/masking/mask/self-recursive.png", false), 0)}
#[test] fn resvg_masking_mask_mask_on_self() {assert_eq!(run_test("svg/resvg/masking/mask/mask-on-self.svg", "ref/resvg/masking/mask/mask-on-self.png", "diff/resvg/masking/mask/mask-on-self.png", false), 0)}
#[test] fn resvg_masking_mask_maskUnits_userSpaceOnUse_with_width_only() {assert_eq!(run_test("svg/resvg/masking/mask/maskUnits=userSpaceOnUse-with-width-only.svg", "ref/resvg/masking/mask/maskUnits=userSpaceOnUse-with-width-only.png", "diff/resvg/masking/mask/maskUnits=userSpaceOnUse-with-width-only.png", false), 0)}
#[test] fn custom_paint_servers_linearGradient_linear_gradient_2() {assert_eq!(run_test("svg/custom/paint-servers/linearGradient/linear-gradient-2.svg", "ref/custom/paint-servers/linearGradient/linear-gradient-2.png", "diff/custom/paint-servers/linearGradient/linear-gradient-2.png", false), 0)}
#[test] fn custom_paint_servers_linearGradient_linear_gradient_3() {assert_eq!(run_test("svg/custom/paint-servers/linearGradient/linear-gradient-3.svg", "ref/custom/paint-servers/linearGradient/linear-gradient-3.png", "diff/custom/paint-servers/linearGradient/linear-gradient-3.png", false), 0)}
#[test] fn custom_paint_servers_linearGradient_linear_gradient_1() {assert_eq!(run_test("svg/custom/paint-servers/linearGradient/linear-gradient-1.svg", "ref/custom/paint-servers/linearGradient/linear-gradient-1.png", "diff/custom/paint-servers/linearGradient/linear-gradient-1.png", false), 0)}
#[test] fn custom_paint_servers_linearGradient_linear_gradient_4() {assert_eq!(run_test("svg/custom/paint-servers/linearGradient/linear-gradient-4.svg", "ref/custom/paint-servers/linearGradient/linear-gradient-4.png", "diff/custom/paint-servers/linearGradient/linear-gradient-4.png", false), 0)}
#[test] fn custom_paint_servers_linearGradient_linear_gradient_5() {assert_eq!(run_test("svg/custom/paint-servers/linearGradient/linear-gradient-5.svg", "ref/custom/paint-servers/linearGradient/linear-gradient-5.png", "diff/custom/paint-servers/linearGradient/linear-gradient-5.png", false), 0)}
#[test] fn custom_paint_servers_linearGradient_linear_gradient_6() {assert_eq!(run_test("svg/custom/paint-servers/linearGradient/linear-gradient-6.svg", "ref/custom/paint-servers/linearGradient/linear-gradient-6.png", "diff/custom/paint-servers/linearGradient/linear-gradient-6.png", false), 0)}
#[test] fn custom_paint_servers_linearGradient_linear_gradient_18() {assert_eq!(run_test("svg/custom/paint-servers/linearGradient/linear-gradient-18.svg", "ref/custom/paint-servers/linearGradient/linear-gradient-18.png", "diff/custom/paint-servers/linearGradient/linear-gradient-18.png", false), 0)}
#[test] fn custom_paint_servers_linearGradient_linear_gradient_19() {assert_eq!(run_test("svg/custom/paint-servers/linearGradient/linear-gradient-19.svg", "ref/custom/paint-servers/linearGradient/linear-gradient-19.png", "diff/custom/paint-servers/linearGradient/linear-gradient-19.png", false), 0)}
#[test] fn custom_paint_servers_linearGradient_linear_gradient_14() {assert_eq!(run_test("svg/custom/paint-servers/linearGradient/linear-gradient-14.svg", "ref/custom/paint-servers/linearGradient/linear-gradient-14.png", "diff/custom/paint-servers/linearGradient/linear-gradient-14.png", false), 0)}
#[test] fn custom_paint_servers_linearGradient_linear_gradient_15() {assert_eq!(run_test("svg/custom/paint-servers/linearGradient/linear-gradient-15.svg", "ref/custom/paint-servers/linearGradient/linear-gradient-15.png", "diff/custom/paint-servers/linearGradient/linear-gradient-15.png", false), 0)}
#[test] fn custom_paint_servers_linearGradient_linear_gradient_17() {assert_eq!(run_test("svg/custom/paint-servers/linearGradient/linear-gradient-17.svg", "ref/custom/paint-servers/linearGradient/linear-gradient-17.png", "diff/custom/paint-servers/linearGradient/linear-gradient-17.png", false), 0)}
#[test] fn custom_paint_servers_linearGradient_linear_gradient_16() {assert_eq!(run_test("svg/custom/paint-servers/linearGradient/linear-gradient-16.svg", "ref/custom/paint-servers/linearGradient/linear-gradient-16.png", "diff/custom/paint-servers/linearGradient/linear-gradient-16.png", false), 0)}
#[test] fn custom_paint_servers_linearGradient_linear_gradient_12() {assert_eq!(run_test("svg/custom/paint-servers/linearGradient/linear-gradient-12.svg", "ref/custom/paint-servers/linearGradient/linear-gradient-12.png", "diff/custom/paint-servers/linearGradient/linear-gradient-12.png", false), 0)}
#[test] fn custom_paint_servers_linearGradient_linear_gradient_13() {assert_eq!(run_test("svg/custom/paint-servers/linearGradient/linear-gradient-13.svg", "ref/custom/paint-servers/linearGradient/linear-gradient-13.png", "diff/custom/paint-servers/linearGradient/linear-gradient-13.png", false), 0)}
#[test] fn custom_paint_servers_linearGradient_linear_gradient_11() {assert_eq!(run_test("svg/custom/paint-servers/linearGradient/linear-gradient-11.svg", "ref/custom/paint-servers/linearGradient/linear-gradient-11.png", "diff/custom/paint-servers/linearGradient/linear-gradient-11.png", false), 0)}
#[test] fn custom_paint_servers_linearGradient_linear_gradient_10() {assert_eq!(run_test("svg/custom/paint-servers/linearGradient/linear-gradient-10.svg", "ref/custom/paint-servers/linearGradient/linear-gradient-10.png", "diff/custom/paint-servers/linearGradient/linear-gradient-10.png", false), 0)}
#[test] fn custom_paint_servers_linearGradient_linear_gradient_9() {assert_eq!(run_test("svg/custom/paint-servers/linearGradient/linear-gradient-9.svg", "ref/custom/paint-servers/linearGradient/linear-gradient-9.png", "diff/custom/paint-servers/linearGradient/linear-gradient-9.png", false), 0)}
#[test] fn custom_paint_servers_pattern_patterns_10() {assert_eq!(run_test("svg/custom/paint-servers/pattern/patterns-10.svg", "ref/custom/paint-servers/pattern/patterns-10.png", "diff/custom/paint-servers/pattern/patterns-10.png", false), 0)}
#[test] fn custom_paint_servers_pattern_patterns_11() {assert_eq!(run_test("svg/custom/paint-servers/pattern/patterns-11.svg", "ref/custom/paint-servers/pattern/patterns-11.png", "diff/custom/paint-servers/pattern/patterns-11.png", false), 0)}
#[test] fn custom_paint_servers_pattern_patterns_12() {assert_eq!(run_test("svg/custom/paint-servers/pattern/patterns-12.svg", "ref/custom/paint-servers/pattern/patterns-12.png", "diff/custom/paint-servers/pattern/patterns-12.png", false), 0)}
#[test] fn custom_paint_servers_pattern_patterns_9() {assert_eq!(run_test("svg/custom/paint-servers/pattern/patterns-9.svg", "ref/custom/paint-servers/pattern/patterns-9.png", "diff/custom/paint-servers/pattern/patterns-9.png", false), 0)}
#[test] fn custom_paint_servers_pattern_patterns_8() {assert_eq!(run_test("svg/custom/paint-servers/pattern/patterns-8.svg", "ref/custom/paint-servers/pattern/patterns-8.png", "diff/custom/paint-servers/pattern/patterns-8.png", false), 0)}
#[test] fn custom_paint_servers_pattern_patterns_6() {assert_eq!(run_test("svg/custom/paint-servers/pattern/patterns-6.svg", "ref/custom/paint-servers/pattern/patterns-6.png", "diff/custom/paint-servers/pattern/patterns-6.png", false), 0)}
#[test] fn custom_paint_servers_pattern_patterns_7() {assert_eq!(run_test("svg/custom/paint-servers/pattern/patterns-7.svg", "ref/custom/paint-servers/pattern/patterns-7.png", "diff/custom/paint-servers/pattern/patterns-7.png", false), 0)}
#[test] fn custom_paint_servers_pattern_patterns_5() {assert_eq!(run_test("svg/custom/paint-servers/pattern/patterns-5.svg", "ref/custom/paint-servers/pattern/patterns-5.png", "diff/custom/paint-servers/pattern/patterns-5.png", false), 0)}
#[test] fn custom_paint_servers_pattern_patterns_4() {assert_eq!(run_test("svg/custom/paint-servers/pattern/patterns-4.svg", "ref/custom/paint-servers/pattern/patterns-4.png", "diff/custom/paint-servers/pattern/patterns-4.png", false), 0)}
#[test] fn custom_paint_servers_pattern_patterns_1() {assert_eq!(run_test("svg/custom/paint-servers/pattern/patterns-1.svg", "ref/custom/paint-servers/pattern/patterns-1.png", "diff/custom/paint-servers/pattern/patterns-1.png", false), 0)}
#[test] fn custom_paint_servers_pattern_patterns_3() {assert_eq!(run_test("svg/custom/paint-servers/pattern/patterns-3.svg", "ref/custom/paint-servers/pattern/patterns-3.png", "diff/custom/paint-servers/pattern/patterns-3.png", false), 0)}
#[test] fn custom_paint_servers_pattern_patterns_2() {assert_eq!(run_test("svg/custom/paint-servers/pattern/patterns-2.svg", "ref/custom/paint-servers/pattern/patterns-2.png", "diff/custom/paint-servers/pattern/patterns-2.png", false), 0)}
#[test] fn custom_integration_drawio_diagram1() {assert_eq!(run_test("svg/custom/integration/drawio/diagram1.svg", "ref/custom/integration/drawio/diagram1.png", "diff/custom/integration/drawio/diagram1.png", false), 0)}
#[test] fn custom_integration_matplotlib_step() {assert_eq!(run_test("svg/custom/integration/matplotlib/step.svg", "ref/custom/integration/matplotlib/step.png", "diff/custom/integration/matplotlib/step.png", false), 0)}
#[test] fn custom_integration_matplotlib_bar_label() {assert_eq!(run_test("svg/custom/integration/matplotlib/bar_label.svg", "ref/custom/integration/matplotlib/bar_label.png", "diff/custom/integration/matplotlib/bar_label.png", false), 0)}
#[test] fn custom_integration_matplotlib_multi_colored_lines() {assert_eq!(run_test("svg/custom/integration/matplotlib/multi_colored_lines.svg", "ref/custom/integration/matplotlib/multi_colored_lines.png", "diff/custom/integration/matplotlib/multi_colored_lines.png", false), 0)}
#[test] fn custom_integration_matplotlib_signals() {assert_eq!(run_test("svg/custom/integration/matplotlib/signals.svg", "ref/custom/integration/matplotlib/signals.png", "diff/custom/integration/matplotlib/signals.png", false), 0)}
#[test] fn custom_integration_matplotlib_bar_char_with_gradient() {assert_eq!(run_test("svg/custom/integration/matplotlib/bar_char_with_gradient.svg", "ref/custom/integration/matplotlib/bar_char_with_gradient.png", "diff/custom/integration/matplotlib/bar_char_with_gradient.png", false), 0)}
#[test] fn custom_integration_matplotlib_affine_image_transformation() {assert_eq!(run_test("svg/custom/integration/matplotlib/affine_image_transformation.svg", "ref/custom/integration/matplotlib/affine_image_transformation.png", "diff/custom/integration/matplotlib/affine_image_transformation.png", false), 0)}
#[test] fn custom_integration_matplotlib_tripcolor() {assert_eq!(run_test("svg/custom/integration/matplotlib/tripcolor.svg", "ref/custom/integration/matplotlib/tripcolor.png", "diff/custom/integration/matplotlib/tripcolor.png", false), 0)}
#[test] fn custom_integration_matplotlib_time_series() {assert_eq!(run_test("svg/custom/integration/matplotlib/time_series.svg", "ref/custom/integration/matplotlib/time_series.png", "diff/custom/integration/matplotlib/time_series.png", false), 0)}
#[test] fn custom_integration_wikimedia_coat_of_the_arms_of_edinburgh_city_council() {assert_eq!(run_test("svg/custom/integration/wikimedia/coat_of_the_arms_of_edinburgh_city_council.svg", "ref/custom/integration/wikimedia/coat_of_the_arms_of_edinburgh_city_council.png", "diff/custom/integration/wikimedia/coat_of_the_arms_of_edinburgh_city_council.png", false), 0)}
#[test] fn custom_painting_stroke_stroke_with_stroke_opacity_0() {assert_eq!(run_test("svg/custom/painting/stroke/stroke-with-stroke-opacity-0.svg", "ref/custom/painting/stroke/stroke-with-stroke-opacity-0.png", "diff/custom/painting/stroke/stroke-with-stroke-opacity-0.png", false), 0)}
#[test] fn custom_painting_stroke_dasharray_on_path_with_fill() {assert_eq!(run_test("svg/custom/painting/stroke-dasharray/on-path-with-fill.svg", "ref/custom/painting/stroke-dasharray/on-path-with-fill.png", "diff/custom/painting/stroke-dasharray/on-path-with-fill.png", false), 0)}
#[test] fn custom_structure_image_png_lumaa_16() {assert_eq!(run_test("svg/custom/structure/image/png-lumaa-16.svg", "ref/custom/structure/image/png-lumaa-16.png", "diff/custom/structure/image/png-lumaa-16.png", false), 0)}
#[test] fn custom_structure_image_png_luma_16() {assert_eq!(run_test("svg/custom/structure/image/png-luma-16.svg", "ref/custom/structure/image/png-luma-16.png", "diff/custom/structure/image/png-luma-16.png", false), 0)}
#[test] fn custom_structure_image_embedded_jpeg_as_image_jpeg() {assert_eq!(run_test("svg/custom/structure/image/embedded-jpeg-as-image-jpeg.svg", "ref/custom/structure/image/embedded-jpeg-as-image-jpeg.png", "diff/custom/structure/image/embedded-jpeg-as-image-jpeg.png", false), 0)}
#[test] fn custom_structure_image_png_rgb_16() {assert_eq!(run_test("svg/custom/structure/image/png-rgb-16.svg", "ref/custom/structure/image/png-rgb-16.png", "diff/custom/structure/image/png-rgb-16.png", false), 0)}
#[test] fn custom_structure_image_png_lumaa_8() {assert_eq!(run_test("svg/custom/structure/image/png-lumaa-8.svg", "ref/custom/structure/image/png-lumaa-8.png", "diff/custom/structure/image/png-lumaa-8.png", false), 0)}
#[test] fn custom_structure_image_embedded_jpeg_as_image_jpg() {assert_eq!(run_test("svg/custom/structure/image/embedded-jpeg-as-image-jpg.svg", "ref/custom/structure/image/embedded-jpeg-as-image-jpg.png", "diff/custom/structure/image/embedded-jpeg-as-image-jpg.png", false), 0)}
#[test] fn custom_structure_image_image_2() {assert_eq!(run_test("svg/custom/structure/image/image-2.svg", "ref/custom/structure/image/image-2.png", "diff/custom/structure/image/image-2.png", false), 0)}
#[test] fn custom_structure_image_image_1() {assert_eq!(run_test("svg/custom/structure/image/image-1.svg", "ref/custom/structure/image/image-1.png", "diff/custom/structure/image/image-1.png", false), 0)}
#[test] fn custom_structure_image_png_luma_8() {assert_eq!(run_test("svg/custom/structure/image/png-luma-8.svg", "ref/custom/structure/image/png-luma-8.png", "diff/custom/structure/image/png-luma-8.png", false), 0)}
#[test] fn custom_structure_image_png_rgba_8() {assert_eq!(run_test("svg/custom/structure/image/png-rgba-8.svg", "ref/custom/structure/image/png-rgba-8.png", "diff/custom/structure/image/png-rgba-8.png", false), 0)}
#[test] fn custom_structure_image_png_rgb_8() {assert_eq!(run_test("svg/custom/structure/image/png-rgb-8.svg", "ref/custom/structure/image/png-rgb-8.png", "diff/custom/structure/image/png-rgb-8.png", false), 0)}
#[test] fn custom_structure_image_png_rgba_16() {assert_eq!(run_test("svg/custom/structure/image/png-rgba-16.svg", "ref/custom/structure/image/png-rgba-16.png", "diff/custom/structure/image/png-rgba-16.png", false), 0)}
#[test] fn custom_structure_image_embedded_jpeg_without_mime() {assert_eq!(run_test("svg/custom/structure/image/embedded-jpeg-without-mime.svg", "ref/custom/structure/image/embedded-jpeg-without-mime.png", "diff/custom/structure/image/embedded-jpeg-without-mime.png", false), 0)}
#[test] fn custom_structure_viewbox_negative_viewbox() {assert_eq!(run_test("svg/custom/structure/viewbox/negative_viewbox.svg", "ref/custom/structure/viewbox/negative_viewbox.png", "diff/custom/structure/viewbox/negative_viewbox.png", false), 0)}
#[test] fn custom_masking_clipPath_clip_path_with_nested_clip_path_and_transform() {assert_eq!(run_test("svg/custom/masking/clipPath/clip-path-with-nested-clip-path-and-transform.svg", "ref/custom/masking/clipPath/clip-path-with-nested-clip-path-and-transform.png", "diff/custom/masking/clipPath/clip-path-with-nested-clip-path-and-transform.png", false), 0)}
#[test] fn custom_masking_clipPath_complex_clip_path_with_nested_clip_path_on_child() {assert_eq!(run_test("svg/custom/masking/clipPath/complex-clip-path-with-nested-clip-path-on-child.svg", "ref/custom/masking/clipPath/complex-clip-path-with-nested-clip-path-on-child.png", "diff/custom/masking/clipPath/complex-clip-path-with-nested-clip-path-on-child.png", false), 0)}
